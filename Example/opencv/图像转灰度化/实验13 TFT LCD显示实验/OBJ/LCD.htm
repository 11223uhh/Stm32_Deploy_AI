<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\LCD.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\LCD.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Feb 22 11:20:53 2022
<BR><P>
<H3>Maximum Stack Usage =       8312 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
icvLUT_Transform8u_64f_CnR(const unsigned char*, int, double*, int, CvSize, const double*, int)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[53]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[53]">HardFault_Handler</a><BR>
 <LI><a href="#[54]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">MemManage_Handler</a><BR>
 <LI><a href="#[55]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55]">BusFault_Handler</a><BR>
 <LI><a href="#[56]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c0]">abort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c0]">abort</a><BR>
 <LI><a href="#[6d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6d]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6f]">CAN1_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[70]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[71]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9b]">CAN2_RX0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9a]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[aa]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a9]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[69]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[93]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[94]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[95]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[96]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[97]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a0]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a1]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[98]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[99]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[83]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[72]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ac]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8b]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ab]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7b]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7a]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7d]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7c]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a4]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a3]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[9e]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[85]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a6]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a5]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a8]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a7]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">PendSV_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[84]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8c]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7e]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7f]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8e]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[ae]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[5d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[73]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[74]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[77]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[78]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[79]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8d]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[91]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[92]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[86]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[89]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[88]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[87]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[8f]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[90]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[80]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[81]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[82]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[a2]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[f0]">icvIPow_8u(const unsigned char*, unsigned char*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f2]">icvIPow_16s(const short*, short*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f1]">icvIPow_16u(const unsigned short*, unsigned short*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f4]">icvIPow_32f(const float*, float*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f3]">icvIPow_32s(const int*, int*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f5]">icvIPow_64f(const double*, double*, int, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f9]">icvSqrt_32f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f8]">icvSqrt_64f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[3f]">icvExp_32f_f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[40]">icvExp_64f_f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[41]">icvLog_32f_f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[42]">icvLog_64f_f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[125]">icvAdd_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[10c]">icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[106]">icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[3c]">icvSqrt_32f_f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[3d]">icvSqrt_64f_f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[11f]">icvSub_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[100]">icvAddC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[127]">icvAdd_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[126]">icvAdd_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[129]">icvAdd_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[128]">icvAdd_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[12a]">icvAdd_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[2]">icvDefaultFree(void*, void*)</a> from cxalloc.o(.text) referenced 2 times from cxalloc.o(.data)
 <LI><a href="#[2]">icvDefaultFree(void*, void*)</a> from cxalloc.o(.text) referenced from cxalloc.o(.text)
 <LI><a href="#[10e]">icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[10d]">icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[110]">icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[10f]">icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[111]">icvDiv_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[f7]">icvInvSqrt_32f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[f6]">icvInvSqrt_64f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced from cxmathfuncs.o(.text)
 <LI><a href="#[108]">icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[107]">icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[10a]">icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[109]">icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[10b]">icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[b0]">icvSet_8u_C1MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b2]">icvSet_8u_C3MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b3]">icvSet_8u_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[121]">icvSub_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[120]">icvSub_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[123]">icvSub_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[122]">icvSub_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[124]">icvSub_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[102]">icvAddC_16s_C1R(const short*, int, short*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[101]">icvAddC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[104]">icvAddC_32f_C1R(const float*, int, float*, int, CvSize, const float*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[103]">icvAddC_32s_C1R(const int*, int, int*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[105]">icvAddC_64f_C1R(const double*, int, double*, int, CvSize, const double*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[45]">icvAdd_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[20a]">icvCopy_8u_C1MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[20c]">icvCopy_8u_C3MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[20d]">icvCopy_8u_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[ce]">icvCvtTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[cd]">icvCvtTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[38]">icvCvt_32f64f_f(const float*, double*, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[39]">icvCvt_64f32f_f(const double*, float*, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1]">icvDefaultAlloc(unsigned, void*)</a> from cxalloc.o(.text) referenced 2 times from cxalloc.o(.data)
 <LI><a href="#[1]">icvDefaultAlloc(unsigned, void*)</a> from cxalloc.o(.text) referenced from cxalloc.o(.text)
 <LI><a href="#[112]">icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[b1]">icvSet_16s_C1MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b4]">icvSet_16s_C3MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b5]">icvSet_16s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b6]">icvSet_32f_C3MR(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b7]">icvSet_32f_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[21f]">icvSet_64s_C3MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[220]">icvSet_64s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[fa]">icvSubRC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[4b]">icvSub_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[47]">icvAdd_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[46]">icvAdd_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[49]">icvAdd_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[48]">icvAdd_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[4a]">icvAdd_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[20b]">icvCopy_16s_C1MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[20e]">icvCopy_16s_C3MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[20f]">icvCopy_16s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[210]">icvCopy_32f_C3MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[211]">icvCopy_32f_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[212]">icvCopy_64s_C3MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[213]">icvCopy_64s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[3]">icvCopy_8u_C1R_f(const unsigned char*, int, unsigned char*, int, CvSize)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[d4]">icvCopy_8u_C2P2R(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d5]">icvCopy_8u_C3P3R(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d6]">icvCopy_8u_C4P4R(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e0]">icvCopy_8u_P2C2R(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e1]">icvCopy_8u_P3C3R(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e2]">icvCopy_8u_P4C4R(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d0]">icvCvtTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[cf]">icvCvtTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d2]">icvCvtTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d1]">icvCvtTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d3]">icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[3b]">icvInvSqrt_32f_f(const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[3e]">icvInvSqrt_64f_f(const double*, double*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[114]">icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[113]">icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[116]">icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[115]">icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[117]">icvRecip_64f_C1R(const double*, int, double*, int, CvSize, double)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[4]">icvSet_8u_C1MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[6]">icvSet_8u_C3MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[7]">icvSet_8u_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[fc]">icvSubRC_16s_C1R(const short*, int, short*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[fb]">icvSubRC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[fe]">icvSubRC_32f_C1R(const float*, int, float*, int, CvSize, const float*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[fd]">icvSubRC_32s_C1R(const int*, int, int*, int, CvSize, const int*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[ff]">icvSubRC_64f_C1R(const double*, int, double*, int, CvSize, const double*)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[4d]">icvSub_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[4c]">icvSub_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[4f]">icvSub_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[4e]">icvSub_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[50]">icvSub_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)</a> from cxarithm.o(.text) referenced 2 times from cxarithm.o(.data)
 <LI><a href="#[d7]">icvCopy_16s_C2P2R(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d8]">icvCopy_16s_C3P3R(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[d9]">icvCopy_16s_C4P4R(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e3]">icvCopy_16s_P2C2R(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e4]">icvCopy_16s_P3C3R(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e5]">icvCopy_16s_P4C4R(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[da]">icvCopy_32f_C2P2R(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[db]">icvCopy_32f_C3P3R(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[dc]">icvCopy_32f_C4P4R(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e6]">icvCopy_32f_P2C2R(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e7]">icvCopy_32f_P3C3R(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e8]">icvCopy_32f_P4C4R(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[dd]">icvCopy_64f_C2P2R(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[de]">icvCopy_64f_C3P3R(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[df]">icvCopy_64f_C4P4R(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e9]">icvCopy_64f_P2C2R(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[ea]">icvCopy_64f_P3C3R(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[eb]">icvCopy_64f_P4C4R(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[283]">icvCopy_8u_C1CnCR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[e]">icvCopy_8u_C1MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[10]">icvCopy_8u_C3MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[11]">icvCopy_8u_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[27e]">icvCopy_8u_CnC1CR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[c2]">icvMixChannels_8u(const unsigned char**, int*, int*, unsigned char**, int*, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[5]">icvSet_16s_C1MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[8]">icvSet_16s_C3MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[9]">icvSet_16s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[a]">icvSet_32f_C3MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[b]">icvSet_32f_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[c]">icvSet_64s_C3MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[d]">icvSet_64s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[284]">icvCopy_16s_C1CnCR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[f]">icvCopy_16s_C1MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[12]">icvCopy_16s_C3MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[13]">icvCopy_16s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[27f]">icvCopy_16s_CnC1CR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[285]">icvCopy_32f_C1CnCR(const int*, int, int*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[14]">icvCopy_32f_C3MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[15]">icvCopy_32f_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[280]">icvCopy_32f_CnC1CR(const int*, int, int*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[286]">icvCopy_64f_C1CnCR(const long long*, int, long long*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[281]">icvCopy_64f_CnC1CR(const long long*, int, long long*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[16]">icvCopy_64s_C3MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[17]">icvCopy_64s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</a> from cxcopy.o(.text) referenced 2 times from cxcopy.o(.data)
 <LI><a href="#[18]">icvCopy_8u_C2P2R_f(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[19]">icvCopy_8u_C3P3R_f(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1a]">icvCopy_8u_C4P4R_f(const unsigned char*, int, unsigned char**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[28]">icvCopy_8u_P2C2R_f(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[29]">icvCopy_8u_P3C3R_f(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2a]">icvCopy_8u_P4C4R_f(const unsigned char**, int, unsigned char*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[b8]">icvFlipHorz_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[b9]">icvFlipHorz_8u_C2R(const unsigned short*, int, unsigned short*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[ba]">icvFlipHorz_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[c3]">icvMixChannels_16u(const unsigned short**, int*, int*, unsigned short**, int*, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[c4]">icvMixChannels_32s(const int**, int*, int*, int**, int*, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[c5]">icvMixChannels_64s(const long long**, int*, int*, long long**, int*, int*, int, CvSize)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[137]">icvBGRA2RGBA_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[1b]">icvCopy_16s_C2P2R_f(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1c]">icvCopy_16s_C3P3R_f(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1d]">icvCopy_16s_C4P4R_f(const unsigned short*, int, unsigned short**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2b]">icvCopy_16s_P2C2R_f(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2c]">icvCopy_16s_P3C3R_f(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2d]">icvCopy_16s_P4C4R_f(const unsigned short**, int, unsigned short*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1e]">icvCopy_32f_C2P2R_f(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[1f]">icvCopy_32f_C3P3R_f(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[20]">icvCopy_32f_C4P4R_f(const int*, int, int**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2e]">icvCopy_32f_P2C2R_f(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[2f]">icvCopy_32f_P3C3R_f(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[30]">icvCopy_32f_P4C4R_f(const int**, int, int*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[21]">icvCopy_64f_C2P2R_f(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[22]">icvCopy_64f_C3P3R_f(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[23]">icvCopy_64f_C4P4R_f(const long long*, int, long long**, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[31]">icvCopy_64f_P2C2R_f(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[32]">icvCopy_64f_P3C3R_f(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[33]">icvCopy_64f_P4C4R_f(const long long**, int, long long*, int, CvSize)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[34]">icvCopy_8u_C1CnCR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[24]">icvCopy_8u_CnC1CR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[3a]">icvFastArctan_32f_f(const float*, const float*, float*, int)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[bb]">icvFlipHorz_16u_C2R(const int*, int, int*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[bc]">icvFlipHorz_16u_C3R(const unsigned short*, int, unsigned short*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[bd]">icvFlipHorz_32s_C2R(const long long*, int, long long*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[be]">icvFlipHorz_32s_C3R(const int*, int, int*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[bf]">icvFlipHorz_64s_C2R(const int*, int, int*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[c0]">icvFlipHorz_64s_C3R(const long long*, int, long long*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[c1]">icvFlipHorz_64s_C4R(const long long*, int, long long*, int, CvSize)</a> from cxcopy.o(.text) referenced from cxcopy.o(.text)
 <LI><a href="#[131]">icvBGR2BGRx_8u_C3C4R(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[138]">icvBGRA2RGBA_16u_C4R(const unsigned short*, int, unsigned short*, int, CvSize)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[139]">icvBGRA2RGBA_32f_C4R(const int*, int, int*, int, CvSize)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[134]">icvBGRx2BGR_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[149]">icvBGRx2HLS_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[146]">icvBGRx2HSV_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[147]">icvBGRx2Lab_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[148]">icvBGRx2Luv_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[145]">icvBGRx2XYZ_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[35]">icvCopy_16s_C1CnCR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[25]">icvCopy_16s_CnC1CR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[36]">icvCopy_32f_C1CnCR_f(const int*, int, int*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[26]">icvCopy_32f_CnC1CR_f(const int*, int, int*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[37]">icvCopy_64f_C1CnCR_f(const long long*, int, long long*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[27]">icvCopy_64f_CnC1CR_f(const long long*, int, long long*, int, CvSize, int, int)</a> from cxconvert.o(.text) referenced 2 times from cxconvert.o(.data)
 <LI><a href="#[c7]">icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[c6]">icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[153]">icvHLS2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[152]">icvHSV2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[154]">icvLab2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[155]">icvLuv2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[151]">icvXYZ2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[118]">icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[132]">icvBGR2BGRx_16u_C3C4R(const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[133]">icvBGR2BGRx_32f_C3C4R(const int*, int, int*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[135]">icvBGRx2BGR_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[136]">icvBGRx2BGR_32f_CnC3R(const int*, int, int*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[13c]">icvBGRx2Gray_8u_CnC1R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[12c]">icvBGRx2HLS_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[14e]">icvBGRx2HSV_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[14f]">icvBGRx2Lab_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[12f]">icvBGRx2Luv_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[14b]">icvBGRx2XYZ_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[14d]">icvBGRx2XYZ_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[15a]">icvBayer2BGR_8u_C1C3R(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[c9]">icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[c8]">icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[cb]">icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[ca]">icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[cc]">icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)</a> from cxconvert.o(.text) referenced from cxconvert.o(.text)
 <LI><a href="#[140]">icvGray2BGRx_8u_C1CnR(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[12d]">icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[12b]">icvHSV2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[12e]">icvLab2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[130]">icvLuv2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced 2 times from cvcolor.o(.text)
 <LI><a href="#[157]">icvXYZ2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[159]">icvXYZ2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[11a]">icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[119]">icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[11c]">icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[11b]">icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[11d]">icvAddWeighted_64f_C1R(const double*, int, double, const double*, int, double, double, double*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[13d]">icvBGRx2Gray_16u_CnC1R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[13e]">icvBGRx2Gray_32f_CnC1R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[144]">icvBGRx2YCrCb_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[141]">icvGray2BGRx_16u_C1CnR(const unsigned short*, int, unsigned short*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[142]">icvGray2BGRx_32f_C1CnR(const float*, int, float*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[150]">icvYCrCb2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[13b]">icvBGR5x52BGRx_8u_C2CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[13f]">icvBGR5x52Gray_8u_C2C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[13a]">icvBGRx2BGR5x5_8u_CnC2R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[14a]">icvBGRx2YCrCb_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[14c]">icvBGRx2YCrCb_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[43]">icvCheckArray_32f_C1R_f(const float*, int, CvSize, int, double, double)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[44]">icvCheckArray_64f_C1R_f(const double*, int, CvSize, int, double, double)</a> from cxmathfuncs.o(.text) referenced 2 times from cxmathfuncs.o(.data)
 <LI><a href="#[143]">icvGray2BGR5x5_8u_C1C2R(const unsigned char*, int, unsigned char*, int, CvSize, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[156]">icvYCrCb2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[158]">icvYCrCb2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</a> from cvcolor.o(.text) referenced from cvcolor.o(.text)
 <LI><a href="#[28b]">icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[298]">icvLUT_Transform8u_8u_C2R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[299]">icvLUT_Transform8u_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[29a]">icvLUT_Transform8u_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[ec]">icvLUT_Transform8u_8u_CnR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[11e]">icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)</a> from cxarithm.o(.text) referenced from cxarithm.o(.text)
 <LI><a href="#[28f]">icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[ed]">icvLUT_Transform8u_16u_CnR(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*, int)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[290]">icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[ee]">icvLUT_Transform8u_32s_CnR(const unsigned char*, int, int*, int, CvSize, const int*, int)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[292]">icvLUT_Transform8u_64f_C1R(const unsigned char*, int, double*, int, CvSize, const double*)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[ef]">icvLUT_Transform8u_64f_CnR(const unsigned char*, int, double*, int, CvSize, const double*, int)</a> from cxlut.o(.text) referenced from cxlut.o(.text)
 <LI><a href="#[af]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[15c]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[228]">cvStdErrReport</a> from cxerror.o(.text) referenced 2 times from cxerror.o(.text)
 <LI><a href="#[15b]">fputc</a> from usart.o(.text) referenced from printf5.o(i.__0fprintf$5)
 <LI><a href="#[15b]">fputc</a> from usart.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[ad]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[af]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[2e8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[15d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2ea]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2eb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2ec]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2ed]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[52]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[2ee]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>picture_read(_IplImage*)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = picture_read(_IplImage*)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[160]"></a>lcd_show_pic(_IplImage*, int, int)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lcd_show_pic(_IplImage*, int, int) &rArr; LCD_Set_Window &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[165]"></a>test_IplImage()</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = test_IplImage() &rArr; cvCvtColor &rArr; cvGetMat &rArr; cvInitMatHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtColor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pic(_IplImage*, int, int)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;picture_read(_IplImage*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>main</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = main &rArr; test_IplImage() &rArr; cvCvtColor &rArr; cvGetMat &rArr; cvInitMatHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16e]"></a>LED_Init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>LCD_WR_REG</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[179]"></a>LCD_WR_DATA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[177]"></a>LCD_RD_DATA</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[17a]"></a>LCD_WriteReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[174]"></a>LCD_ReadReg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[163]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pic(_IplImage*, int, int)
</UL>

<P><STRONG><a name="[164]"></a>LCD_WriteRAM</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pic(_IplImage*, int, int)
</UL>

<P><STRONG><a name="[17c]"></a>LCD_BGR2RGB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[178]"></a>opt_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_delay
</UL>

<P><STRONG><a name="[162]"></a>LCD_SetCursor</STRONG> (Thumb, 322 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pic(_IplImage*, int, int)
</UL>

<P><STRONG><a name="[17b]"></a>LCD_ReadPoint</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[17d]"></a>LCD_DisplayOn</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[17e]"></a>LCD_DisplayOff</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[17f]"></a>LCD_Scan_Dir</STRONG> (Thumb, 514 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[180]"></a>LCD_DrawPoint</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[181]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[182]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[186]"></a>LCD_Display_Dir</STRONG> (Thumb, 302 bytes, Stack size 36 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[161]"></a>LCD_Set_Window</STRONG> (Thumb, 490 bytes, Stack size 48 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_Set_Window &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_show_pic(_IplImage*, int, int)
</UL>

<P><STRONG><a name="[170]"></a>LCD_Clear</STRONG> (Thumb, 104 bytes, Stack size 28 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>LCD_Init</STRONG> (Thumb, 14110 bytes, Stack size 168 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = LCD_Init &rArr; LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>LCD_Fill</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[18e]"></a>LCD_Color_Fill</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[18f]"></a>LCD_DrawLine</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[190]"></a>LCD_DrawRectangle</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[191]"></a>LCD_Draw_Circle</STRONG> (Thumb, 176 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[192]"></a>LCD_ShowChar</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[194]"></a>LCD_Pow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[193]"></a>LCD_ShowNum</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[195]"></a>LCD_ShowxNum</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[196]"></a>LCD_ShowString</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[16c]"></a>delay_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[198]"></a>delay_xms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[18b]"></a>delay_ms</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2ef]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf5.o(i.__0fprintf$5)
<LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[16d]"></a>uart_init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>USART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[16b]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[2f1]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1a0]"></a>GPIO_DeInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[172]"></a>GPIO_Init</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2f3]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[2f9]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2fd]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2fe]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2ff]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>FSMC_NANDInit</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>FSMC_NANDCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>FSMC_GetECC</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>FSMC_ITConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>FSMC_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>FSMC_GetITStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1a2]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[310]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[322]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[32c]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[32d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a1]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[32e]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[330]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>RCC_LSEModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>USART_DeInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[19a]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[33a]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[33d]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[34e]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[350]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>cvReleaseMat</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDecRefData
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatND
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
</UL>

<P><STRONG><a name="[1ac]"></a>cvSetIPLAllocators</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[1ad]"></a>cvCreateData</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cvCreateData &rArr; cvAlloc &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMatND
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatND
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMat
</UL>

<P><STRONG><a name="[1b1]"></a>cvCreateMatHeader</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckHuge(CvMat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMat
</UL>

<P><STRONG><a name="[1b4]"></a>cvCreateMat</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
</UL>

<P><STRONG><a name="[1b5]"></a>cvInitMatHeader</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvInitMatHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckHuge(CvMat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[1b6]"></a>cvCloneMat</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
</UL>

<P><STRONG><a name="[1b8]"></a>cvInitMatNDHeader</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
</UL>

<P><STRONG><a name="[1b9]"></a>cvCreateMatNDHeader</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatNDHeader
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMatND
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatND
</UL>

<P><STRONG><a name="[1ba]"></a>cvCreateMatND</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
</UL>

<P><STRONG><a name="[1bb]"></a>cvCloneMatND</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
</UL>

<P><STRONG><a name="[1bc]"></a>cvGetMat</STRONG> (Thumb, 1002 bytes, Stack size 48 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = cvGetMat &rArr; cvInitMatHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatHeader
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckHuge(CvMat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtColor
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRepeat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlip
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshape
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDiag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetCols
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRows
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSubRect
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMatND(const void*, CvMatND*, int*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckArr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLUT
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScaleAbs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
</UL>

<P><STRONG><a name="[1be]"></a>cvInitNArrayIterator</STRONG> (Thumb, 1058 bytes, Stack size 72 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMatND(const void*, CvMatND*, int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[1bf]"></a>cvNextNArraySlice</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[1c1]"></a>cvReleaseSparseMat</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneSparseMat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
</UL>

<P><STRONG><a name="[1c3]"></a>cvCreateSparseMat</STRONG> (Thumb, 778 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSet
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseSparseMat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneSparseMat
</UL>

<P><STRONG><a name="[1c8]"></a>cvCloneSparseMat</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseSparseMat
</UL>

<P><STRONG><a name="[1c9]"></a>cvInitSparseMatIterator</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1cd]"></a>cvReleaseData</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = cvReleaseData &rArr; cvDecRefData &rArr; cvFree_ &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDecRefData
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImage
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetData
</UL>

<P><STRONG><a name="[1ce]"></a>cvSetData</STRONG> (Thumb, 450 bytes, Stack size 32 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseData
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckHuge(CvMat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetImage
</UL>

<P><STRONG><a name="[1cf]"></a>cvPtr2D</STRONG> (Thumb, 426 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal2D
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet2D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal2D
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet2D
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRawData
</UL>

<P><STRONG><a name="[1d0]"></a>cvGetRawData</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
</UL>

<P><STRONG><a name="[1d1]"></a>cvGetElemType</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[1d2]"></a>cvGetDims</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
</UL>

<P><STRONG><a name="[1d3]"></a>cvGetDimSize</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[168]"></a>cvGetSize</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvGetSize &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[1d4]"></a>cvGetSubRect</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[1d5]"></a>cvGetRows</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[1d6]"></a>cvGetCols</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[1d7]"></a>cvGetDiag</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[1d8]"></a>cvScalarToRawData</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetND
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet3D
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet2D
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet1D
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
</UL>

<P><STRONG><a name="[1db]"></a>cvRawDataToScalar</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetND
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet3D
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet2D
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet1D
</UL>

<P><STRONG><a name="[1e0]"></a>cvPtr1D</STRONG> (Thumb, 502 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal1D
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet1D
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal1D
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet1D
</UL>

<P><STRONG><a name="[1e1]"></a>cvPtr3D</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal3D
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet3D
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal3D
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet3D
</UL>

<P><STRONG><a name="[1e2]"></a>cvPtrND</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearND
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRealND
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetND
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRealND
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetND
</UL>

<P><STRONG><a name="[1e3]"></a>cvGet1D</STRONG> (Thumb, 194 bytes, Stack size 64 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e4]"></a>cvGet2D</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e5]"></a>cvGet3D</STRONG> (Thumb, 92 bytes, Stack size 72 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e6]"></a>cvGetND</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1e7]"></a>cvGetReal1D</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1e8]"></a>cvGetReal2D</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1e9]"></a>cvGetReal3D</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1ea]"></a>cvGetRealND</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1eb]"></a>cvSet1D</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1ec]"></a>cvSet2D</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1ed]"></a>cvSet3D</STRONG> (Thumb, 72 bytes, Stack size 88 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1ee]"></a>cvSetND</STRONG> (Thumb, 138 bytes, Stack size 56 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1ef]"></a>cvSetReal1D</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1f0]"></a>cvSetReal2D</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1f1]"></a>cvSetReal3D</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1f2]"></a>cvSetRealND</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
</UL>

<P><STRONG><a name="[1f3]"></a>cvClearND</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDeleteNode(CvSparseMat*, const int*, unsigned*)
</UL>

<P><STRONG><a name="[1f4]"></a>cvReshapeMatND</STRONG> (Thumb, 1170 bytes, Stack size 344 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDims
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMatND(const void*, CvMatND*, int*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f5]"></a>cvReshape</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1f6]"></a>cvInitImageHeader</STRONG> (Thumb, 706 bytes, Stack size 48 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = cvInitImageHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetColorModel(int, char**, char**)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetImage
</UL>

<P><STRONG><a name="[1f9]"></a>cvGetImage</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetData
</UL>

<P><STRONG><a name="[1fb]"></a>cvReleaseImageHeader</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvReleaseImageHeader &rArr; cvFree_ &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImage
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
</UL>

<P><STRONG><a name="[1fc]"></a>cvCreateImageHeader</STRONG> (Thumb, 176 bytes, Stack size 88 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = cvCreateImageHeader &rArr; cvInitImageHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImageHeader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetColorModel(int, char**, char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
</UL>

<P><STRONG><a name="[16a]"></a>cvReleaseImage</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cvReleaseImage &rArr; cvReleaseData &rArr; cvDecRefData &rArr; cvFree_ &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImageHeader
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseData
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[166]"></a>cvCreateImage</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = cvCreateImage &rArr; cvCreateImageHeader &rArr; cvInitImageHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[1fd]"></a>cvSetImageROI</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
</UL>

<P><STRONG><a name="[1fe]"></a>cvResetImageROI</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[1ff]"></a>cvGetImageROI</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[200]"></a>cvSetImageCOI</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
</UL>

<P><STRONG><a name="[201]"></a>cvGetImageCOI</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[202]"></a>cvCloneImage</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[204]"></a>cvCheckTermCriteria</STRONG> (Thumb, 232 bytes, Stack size 80 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>

<P><STRONG><a name="[208]"></a>cvSetMemoryManager</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cxalloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[1ae]"></a>cvAlloc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, cxalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = cvAlloc &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
</UL>

<P><STRONG><a name="[1ab]"></a>cvFree_</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cxalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = cvFree_ &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDestroyMemStorage(CvMemStorage*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDecRefData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvResetImageROI
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImageHeader
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseSparseMat
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseGraphScanner
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
</UL>

<P><STRONG><a name="[216]"></a>icvCopy_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
</UL>

<P><STRONG><a name="[b0]"></a>icvSet_8u_C1MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_8u_C1MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>icvSet_16s_C1MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_16s_C1MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>icvSet_8u_C3MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_8u_C3MR(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>icvSet_8u_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_8u_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>icvSet_16s_C3MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_16s_C3MR(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>icvSet_16s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_16s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>icvSet_32f_C3MR(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_32f_C3MR(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>icvSet_32f_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_32f_C4MR(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[21f]"></a>icvSet_64s_C3MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_64s_C3MR(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>icvSet_64s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_64s_C4MR(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20a]"></a>icvCopy_8u_C1MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_C1MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>icvCopy_16s_C1MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_16s_C1MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20c]"></a>icvCopy_8u_C3MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_C3MR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>icvCopy_8u_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20e]"></a>icvCopy_16s_C3MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_16s_C3MR(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>icvCopy_16s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_16s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[210]"></a>icvCopy_32f_C3MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_32f_C3MR(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[211]"></a>icvCopy_32f_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_32f_C4MR(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>icvCopy_64s_C3MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_64s_C3MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[213]"></a>icvCopy_64s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_64s_C4MR(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>icvGetCopyMaskFunc(int)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
</UL>

<P><STRONG><a name="[1b7]"></a>cvCopy</STRONG> (Thumb, 1218 bytes, Stack size 1168 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetCopyMaskFunc(int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCopy_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitSparseMatIterator
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneSparseMat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMatND
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMat
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[21a]"></a>icvSetZero_8u_C1R(unsigned char*, int, CvSize)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
</UL>

<P><STRONG><a name="[21c]"></a>cvSetZero</STRONG> (Thumb, 374 bytes, Stack size 560 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetZero_8u_C1R(unsigned char*, int, CvSize)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
</UL>

<P><STRONG><a name="[21d]"></a>cvSet</STRONG> (Thumb, 1074 bytes, Stack size 728 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSet_8u_C1R(unsigned char*, int, CvSize, const void*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
</UL>

<P><STRONG><a name="[221]"></a>cvFlip</STRONG> (Thumb, 574 bytes, Stack size 104 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFlipVert_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>

<P><STRONG><a name="[223]"></a>cvRepeat</STRONG> (Thumb, 370 bytes, Stack size 112 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[224]"></a>cvGetErrMode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cvGetErrMode &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNulDevReport
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStdErrReport
</UL>

<P><STRONG><a name="[226]"></a>cvErrorStr</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvErrorStr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrInfo
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStdErrReport
</UL>

<P><STRONG><a name="[228]"></a>cvStdErrReport</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = cvStdErrReport &rArr; cvGetErrMode &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorStr
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrMode
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGuiBoxReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxerror.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>cvGuiBoxReport</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStdErrReport
</UL>

<P><STRONG><a name="[22b]"></a>cvNulDevReport</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrMode
</UL>

<P><STRONG><a name="[22c]"></a>cvRedirectError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>

<P><STRONG><a name="[1af]"></a>cvGetErrStatus</STRONG> (Thumb, 934 bytes, Stack size 8 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cvGetErrStatus &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtColor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAllocString
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqElemsClearFlags(CvSeq*, int, int)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrInfo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRepeat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlip
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageCOI
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageROI
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshape
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDiag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetCols
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRows
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSubRect
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRawData
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneSparseMat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMatND
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatND
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatNDHeader
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMat
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMatND(const void*, CvMatND*, int*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckArr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLUT
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScaleAbs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseGraphScanner
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraph
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInvert
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushFront
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeqBlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvEndWriteSeq
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartWriteSeq
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[22d]"></a>cvGetErrInfo</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorStr
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
</UL>

<P><STRONG><a name="[22e]"></a>cvSetErrMode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>

<P><STRONG><a name="[22f]"></a>cvSetErrStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>

<P><STRONG><a name="[1a9]"></a>cvError</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImage
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtColor
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqElemIdx
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAllocString
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearMemStorage
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqBlockSize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSaveMemStoragePos
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRestoreMemStoragePos
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqElemsClearFlags(CvSeq*, int, int)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDestroyMemStorage(CvMemStorage*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRepeat
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlip
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetMemoryManager
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSet
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckTermCriteria
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetImageCOI
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageCOI
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetImageROI
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvResetImageROI
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageROI
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseImageHeader
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetImage
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshape
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRealND
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal3D
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal2D
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal1D
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet2D
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet1D
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRealND
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal3D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal2D
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal1D
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet2D
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet1D
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDiag
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetCols
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRows
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSubRect
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDimSize
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDims
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetElemType
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRawData
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetData
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseData
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitSparseMatIterator
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneSparseMat
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseSparseMat
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMatND
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatND
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatNDHeader
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatNDHeader
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneMat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatHeader
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetIPLAllocators
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateROI(int, int, int, int, int)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDeleteNode(CvSparseMat*, const int*, unsigned*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMatND(const void*, CvMatND*, int*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckArr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLUT
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScaleAbs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPrevTreeNode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRemoveNodeFromTree
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInsertNodeIntoTree
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitTreeNodeIterator
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextTreeNode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextGraphItem
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseGraphScanner
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphVtxDegree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphVtxDegreeByPtr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdge
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdge
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdge
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdgeByPtr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtxByPtr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddVtx
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearGraph
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraph
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemove
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInvert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSearch
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSeq
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopFront
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushFront
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSeqReaderPos
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeqBlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvEndWriteSeq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlushSeqWriter
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartWriteSeq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartAppendToSeq
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMakeSeqHeaderForArray
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[231]"></a>icvPthreadDestructor(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cxerror.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[219]"></a>cvErrorFromIppStatus</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, cxerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtColor
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlip
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLUT
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScaleAbs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
</UL>

<P><STRONG><a name="[233]"></a>cvRestoreMemStoragePos</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
</UL>

<P><STRONG><a name="[234]"></a>cvSaveMemStoragePos</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
</UL>

<P><STRONG><a name="[236]"></a>cvMemStorageAlloc</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAllocString
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
</UL>

<P><STRONG><a name="[237]"></a>cvSetSeqBlockSize</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
</UL>

<P><STRONG><a name="[1cb]"></a>cvSetAdd</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetNew
</UL>

<P><STRONG><a name="[25d]"></a>cvGetSeqElem</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSearch
</UL>

<P><STRONG><a name="[1c5]"></a>cvCreateMemStorage</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
</UL>

<P><STRONG><a name="[239]"></a>cvCreateChildMemStorage</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
</UL>

<P><STRONG><a name="[1c2]"></a>cvReleaseMemStorage</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDestroyMemStorage(CvMemStorage*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseSparseMat
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseGraphScanner
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
</UL>

<P><STRONG><a name="[23b]"></a>cvClearMemStorage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDestroyMemStorage(CvMemStorage*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[23c]"></a>cvMemStorageAllocString</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[23e]"></a>cvCreateSeq</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqBlockSize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSet
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartWriteSeq
</UL>

<P><STRONG><a name="[23f]"></a>cvSeqElemIdx</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[243]"></a>cvSliceLength</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[240]"></a>cvSetSeqReaderPos</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[241]"></a>cvStartReadSeq</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqElemsClearFlags(CvSeq*, int, int)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInvert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSearch
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[242]"></a>cvCvtSeqToArray</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSliceLength
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[244]"></a>cvMakeSeqHeaderForArray</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
</UL>

<P><STRONG><a name="[246]"></a>cvStartAppendToSeq</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartWriteSeq
</UL>

<P><STRONG><a name="[247]"></a>cvStartWriteSeq</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartAppendToSeq
</UL>

<P><STRONG><a name="[248]"></a>cvFlushSeqWriter</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeqBlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvEndWriteSeq
</UL>

<P><STRONG><a name="[249]"></a>cvEndWriteSeq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlushSeqWriter
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
</UL>

<P><STRONG><a name="[24a]"></a>cvCreateSeqBlock</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlushSeqWriter
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
</UL>

<P><STRONG><a name="[24b]"></a>cvChangeSeqBlock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqElemsClearFlags(CvSeq*, int, int)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInvert
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSearch
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
</UL>

<P><STRONG><a name="[24c]"></a>cvGetSeqReaderPos</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
</UL>

<P><STRONG><a name="[24d]"></a>cvSeqPush</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextGraphItem
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
</UL>

<P><STRONG><a name="[24e]"></a>cvSeqPop</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFreeSeqBlock(CvSeq*, int)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextGraphItem
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
</UL>

<P><STRONG><a name="[24f]"></a>cvSeqPushFront</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
</UL>

<P><STRONG><a name="[250]"></a>cvSeqPopFront</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFreeSeqBlock(CvSeq*, int)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
</UL>

<P><STRONG><a name="[251]"></a>cvSeqInsert</STRONG> (Thumb, 542 bytes, Stack size 56 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushFront
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[253]"></a>cvSeqRemove</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFreeSeqBlock(CvSeq*, int)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopFront
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[254]"></a>cvSeqPushMulti</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSlice
</UL>

<P><STRONG><a name="[255]"></a>cvSeqPopMulti</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFreeSeqBlock(CvSeq*, int)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSeq
</UL>

<P><STRONG><a name="[256]"></a>cvClearSeq</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
</UL>

<P><STRONG><a name="[257]"></a>cvSeqSlice</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSliceLength
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
</UL>

<P><STRONG><a name="[258]"></a>cvSeqRemoveSlice</STRONG> (Thumb, 562 bytes, Stack size 104 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSliceLength
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
</UL>

<P><STRONG><a name="[259]"></a>cvSeqInsertSlice</STRONG> (Thumb, 884 bytes, Stack size 184 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMakeSeqHeaderForArray
</UL>

<P><STRONG><a name="[25a]"></a>cvSeqSort</STRONG> (Thumb, 2350 bytes, Stack size 1920 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMed3(char*, char*, char*, int(*)(const void*, const void*, void*), void*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSeqReaderPos
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[25c]"></a>cvSeqSearch</STRONG> (Thumb, 372 bytes, Stack size 72 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSeqElem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
</UL>

<P><STRONG><a name="[25e]"></a>cvSeqInvert</STRONG> (Thumb, 160 bytes, Stack size 88 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
</UL>

<P><STRONG><a name="[25f]"></a>cvSeqPartition</STRONG> (Thumb, 678 bytes, Stack size 152 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeqBlock
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvEndWriteSeq
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartAppendToSeq
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[1c6]"></a>cvCreateSet</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraph
</UL>

<P><STRONG><a name="[260]"></a>cvSetRemove</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemoveByPtr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
</UL>

<P><STRONG><a name="[214]"></a>cvClearSet</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSeq
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearGraph
</UL>

<P><STRONG><a name="[263]"></a>cvCreateGraph</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSet
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
</UL>

<P><STRONG><a name="[264]"></a>cvClearGraph</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearSet
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[265]"></a>cvGraphAddVtx</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetNew
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
</UL>

<P><STRONG><a name="[267]"></a>cvGraphRemoveEdgeByPtr</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemoveByPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdge
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtxByPtr
</UL>

<P><STRONG><a name="[268]"></a>cvGraphRemoveVtxByPtr</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemoveByPtr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
</UL>

<P><STRONG><a name="[269]"></a>cvGraphRemoveVtx</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemoveByPtr
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
</UL>

<P><STRONG><a name="[26a]"></a>cvFindGraphEdgeByPtr</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdge
</UL>

<P><STRONG><a name="[26b]"></a>cvFindGraphEdge</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdgeByPtr
</UL>

<P><STRONG><a name="[26c]"></a>cvGraphAddEdgeByPtr</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetNew
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdgeByPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdge
</UL>

<P><STRONG><a name="[26d]"></a>cvGraphAddEdge</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
</UL>

<P><STRONG><a name="[26e]"></a>cvGraphRemoveEdge</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
</UL>

<P><STRONG><a name="[26f]"></a>cvGraphVtxDegreeByPtr</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[270]"></a>cvGraphVtxDegree</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSetElem
</UL>

<P><STRONG><a name="[273]"></a>cvCreateGraphScanner</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateChildMemStorage
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqElemsClearFlags(CvSeq*, int, int)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[274]"></a>cvReleaseGraphScanner</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[275]"></a>cvNextGraphItem</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSeqFindNextElem(CvSeq*, int, int, int, int*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
</UL>

<P><STRONG><a name="[276]"></a>cvCloneGraph</STRONG> (Thumb, 678 bytes, Stack size 80 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddVtx
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraph
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[277]"></a>cvNextTreeNode</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
</UL>

<P><STRONG><a name="[278]"></a>cvInitTreeNodeIterator</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvTreeToNodeSeq
</UL>

<P><STRONG><a name="[279]"></a>cvTreeToNodeSeq</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitTreeNodeIterator
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextTreeNode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
</UL>

<P><STRONG><a name="[27a]"></a>cvInsertNodeIntoTree</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[27b]"></a>cvRemoveNodeFromTree</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[27c]"></a>cvPrevTreeNode</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[d4]"></a>icvCopy_8u_C2P2R(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_C2P2R(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>icvCopy_8u_C3P3R(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_C3P3R(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>icvCopy_8u_C4P4R(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_C4P4R(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d7]"></a>icvCopy_16s_C2P2R(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_C2P2R(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>icvCopy_16s_C3P3R(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_C3P3R(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>icvCopy_16s_C4P4R(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_C4P4R(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>icvCopy_32f_C2P2R(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_C2P2R(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>icvCopy_32f_C3P3R(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_C3P3R(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>icvCopy_32f_C4P4R(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_C4P4R(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>icvCopy_64f_C2P2R(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_C2P2R(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>icvCopy_64f_C3P3R(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_C3P3R(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>icvCopy_64f_C4P4R(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_C4P4R(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[27e]"></a>icvCopy_8u_CnC1CR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_CnC1CR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[27f]"></a>icvCopy_16s_CnC1CR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_16s_CnC1CR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[280]"></a>icvCopy_32f_CnC1CR(const int*, int, int*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_32f_CnC1CR(const int*, int, int*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[281]"></a>icvCopy_64f_CnC1CR(const long long*, int, long long*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_64f_CnC1CR(const long long*, int, long long*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>icvCopy_8u_P2C2R(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_P2C2R(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>icvCopy_8u_P3C3R(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_P3C3R(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>icvCopy_8u_P4C4R(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_8u_P4C4R(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>icvCopy_16s_P2C2R(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_P2C2R(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>icvCopy_16s_P3C3R(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_P3C3R(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>icvCopy_16s_P4C4R(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_16s_P4C4R(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>icvCopy_32f_P2C2R(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_P2C2R(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>icvCopy_32f_P3C3R(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_P3C3R(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>icvCopy_32f_P4C4R(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_32f_P4C4R(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>icvCopy_64f_P2C2R(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_P2C2R(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>icvCopy_64f_P3C3R(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_P3C3R(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>icvCopy_64f_P4C4R(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = icvCopy_64f_P4C4R(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[283]"></a>icvCopy_8u_C1CnCR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_C1CnCR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[284]"></a>icvCopy_16s_C1CnCR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_16s_C1CnCR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[285]"></a>icvCopy_32f_C1CnCR(const int*, int, int*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_32f_C1CnCR(const int*, int, int*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[286]"></a>icvCopy_64f_C1CnCR(const long long*, int, long long*, int, CvSize, int, int)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_64f_C1CnCR(const long long*, int, long long*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[217]"></a>cvSplit</STRONG> (Thumb, 654 bytes, Stack size 232 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitSplitRTable(CvBigFuncTable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
</UL>

<P><STRONG><a name="[218]"></a>cvMerge</STRONG> (Thumb, 612 bytes, Stack size 248 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitCvtPlaneToPixRTable(CvBigFuncTable*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
</UL>

<P><STRONG><a name="[287]"></a>cvMixChannels</STRONG> (Thumb, 1392 bytes, Stack size 168 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[28c]"></a>cvConvertScaleAbs</STRONG> (Thumb, 308 bytes, Stack size 112 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[295]"></a>cvConvertScale</STRONG> (Thumb, 1032 bytes, Stack size 904 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitCvtToC1RTable(CvFuncTable*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitCvtScaleToC1RTable(CvFuncTable*)
</UL>

<P><STRONG><a name="[2a7]"></a>icvCvt_32f64f(const float*, double*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[2a6]"></a>icvCvt_64f32f(const double*, float*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[296]"></a>icvScale_32f(const float*, float*, int, float, float)</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[297]"></a>icvScale_64f(const double*, double*, int, double, double)</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
</UL>

<P><STRONG><a name="[28b]"></a>icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_8s_C1R(const unsigned char*, int, char*, int, CvSize, const char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[28f]"></a>icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_16s_C1R(const unsigned char*, int, short*, int, CvSize, const short*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[290]"></a>icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_32f_C1R(const unsigned char*, int, float*, int, CvSize, const float*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[292]"></a>icvLUT_Transform8u_64f_C1R(const unsigned char*, int, double*, int, CvSize, const double*)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvLUT_Transform8u_64f_C1R(const unsigned char*, int, double*, int, CvSize, const double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>icvLUT_Transform8u_8u_C2R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvLUT_Transform8u_8u_C2R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[299]"></a>icvLUT_Transform8u_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvLUT_Transform8u_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[29a]"></a>icvLUT_Transform8u_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 84 bytes, Stack size 28 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvLUT_Transform8u_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[29b]"></a>cvLUT</STRONG> (Thumb, 808 bytes, Stack size 152 bytes, cxlut.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[29c]"></a>cvFastArctan</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cvFastArctan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
</UL>

<P><STRONG><a name="[2a5]"></a>icvFastArctan_32f(const float*, const float*, float*, int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[29f]"></a>cvCbrt</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cvCbrt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Luv_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Lab_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[f7]"></a>icvInvSqrt_32f(const float*, float*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>icvSqrt_32f(const float*, float*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>icvSqrt_64f(const double*, double*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>icvInvSqrt_64f(const double*, double*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>cvCartToPolar</STRONG> (Thumb, 1166 bytes, Stack size 216 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrt_64f(const double*, double*, int)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrt_32f(const float*, float*, int)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f(const float*, const float*, float*, int)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrMagnitude_32f(const float*, const float*, float*, int)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrMagnitude_64f(const double*, const double*, double*, int)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_32f(const float*, float*, int, float, float)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_64f32f(const double*, float*, int)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_32f64f(const float*, double*, int)
</UL>

<P><STRONG><a name="[2ab]"></a>cvPolarToCart</STRONG> (Thumb, 1216 bytes, Stack size 240 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2af]"></a>icvExp_32f(const float*, float*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
</UL>

<P><STRONG><a name="[2b0]"></a>icvExp_64f(const double*, double*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
</UL>

<P><STRONG><a name="[2ae]"></a>cvExp</STRONG> (Thumb, 520 bytes, Stack size 128 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f(const double*, double*, int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f(const float*, float*, int)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_32f64f(const float*, double*, int)
</UL>

<P><STRONG><a name="[2b2]"></a>icvLog_32f(const float*, float*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
</UL>

<P><STRONG><a name="[2b3]"></a>icvLog_64f(const double*, double*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
</UL>

<P><STRONG><a name="[2b1]"></a>cvLog</STRONG> (Thumb, 526 bytes, Stack size 128 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f(const double*, double*, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f(const float*, float*, int)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_64f32f(const double*, float*, int)
</UL>

<P><STRONG><a name="[2b4]"></a>cvPow</STRONG> (Thumb, 1156 bytes, Stack size 144 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvDiv
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f(const double*, double*, int)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f(const float*, float*, int)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f(const double*, double*, int)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f(const float*, float*, int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_64f(const double*, double*, int, double, double)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_32f(const float*, float*, int, float, float)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[2b8]"></a>icvCheckArray_32f_C1R(const float*, int, CvSize, int, double, double)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckArr
</UL>

<P><STRONG><a name="[2b9]"></a>icvCheckArray_64f_C1R(const double*, int, CvSize, int, double, double)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckArr
</UL>

<P><STRONG><a name="[2b7]"></a>cvCheckArr</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckArray_64f_C1R(const double*, int, CvSize, int, double, double)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckArray_32f_C1R(const float*, int, CvSize, int, double, double)
</UL>

<P><STRONG><a name="[125]"></a>icvAdd_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>icvAdd_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>icvAdd_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[128]"></a>icvAdd_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[129]"></a>icvAdd_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>icvAdd_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>icvSub_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>icvSub_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>icvSub_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>icvSub_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_32s_C1R(const int*, int, const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>icvSub_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_32f_C1R(const float*, int, const float*, int, float*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>icvSub_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_64f_C1R(const double*, int, const double*, int, double*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[2ba]"></a>cvSub</STRONG> (Thumb, 1816 bytes, Stack size 1272 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetCopyMaskFunc(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitSubC1RTable(CvFuncTable*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2bd]"></a>cvSubRS</STRONG> (Thumb, 1528 bytes, Stack size 1096 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetCopyMaskFunc(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2be]"></a>cvAdd</STRONG> (Thumb, 1756 bytes, Stack size 1272 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetCopyMaskFunc(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitAddC1RTable(CvFuncTable*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2c0]"></a>cvAddS</STRONG> (Thumb, 1504 bytes, Stack size 1096 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetCopyMaskFunc(int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2b6]"></a>cvMul</STRONG> (Thumb, 890 bytes, Stack size 1216 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
</UL>

<P><STRONG><a name="[2b5]"></a>cvDiv</STRONG> (Thumb, 986 bytes, Stack size 1216 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
</UL>

<P><STRONG><a name="[2c1]"></a>cvAddWeighted</STRONG> (Thumb, 594 bytes, Stack size 184 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>

<P><STRONG><a name="[169]"></a>cvCvtColor</STRONG> (Thumb, 1788 bytes, Stack size 128 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = cvCvtColor &rArr; cvGetMat &rArr; cvInitMatHeader &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorFromIppStatus
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_IplImage()
</UL>

<P><STRONG><a name="[351]"></a>fgetc</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>__backspace</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, retarget_io.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_io.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImage
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFreeSeqBlock(CvSeq*, int)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextNArraySlice
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDeleteNode(CvSparseMat*, const int*, unsigned*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Lab_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGray2BGR5x5_8u_C1C2R(const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGR5x52Gray_8u_C2C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGR5x52BGRx_8u_C2CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSub_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAdd_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitCvtToC1RTable(CvFuncTable*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInitCvtScaleToC1RTable(CvFuncTable*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemoveByPtr
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRemoveNodeFromTree
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInsertNodeIntoTree
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextGraphItem
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphVtxDegree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphVtxDegreeByPtr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdgeByPtr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddVtx
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsertSlice
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemoveSlice
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopFront
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushFront
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPop
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvEndWriteSeq
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlushSeqWriter
</UL>

<P><STRONG><a name="[2cb]"></a>__aeabi_assert</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, retarget_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[353]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAllocString
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRepeat
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSet_8u_C1R(unsigned char*, int, CvSize, const void*, int)
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCopy_8u_C1R_f(const unsigned char*, int, unsigned char*, int, CvSize)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLUT
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCvtSeqToArray
</UL>

<P><STRONG><a name="[1c4]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshape
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetDims
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMat(int, int, int, void*)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneGraph
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
</UL>

<P><STRONG><a name="[252]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
</UL>

<P><STRONG><a name="[354]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[356]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetZero_8u_C1R(unsigned char*, int, CvSize)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBayer2BGR_8u_C1C3R(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeq
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetZero
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCopy
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetND
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet3D
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet2D
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet1D
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPartition
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartAppendToSeq
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMakeSeqHeaderForArray
</UL>

<P><STRONG><a name="[358]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1f8]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
</UL>

<P><STRONG><a name="[23d]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAllocString
</UL>

<P><STRONG><a name="[230]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_64f_C1R(const double*, int, double, const double*, int, double, double, double*, int, CvSize)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddC_64f_C1R(const double*, int, double*, int, CvSize, const double*)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAdd_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f_f(const double*, double*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f_f(const double*, double*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrMagnitude_64f(const double*, const double*, double*, int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_64f(const double*, double*, int, double, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[2aa]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSubRC_64f_C1R(const double*, int, double*, int, CvSize, const double*)
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSub_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f_f(const double*, double*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2a9]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f_f(const double*, double*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_64f_C1R(const double*, int, double, const double*, int, double, double, double*, int, CvSize)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_64f_C1R(const double*, int, double*, int, CvSize, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvIPow_64f(const double*, double*, int, int)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvIPow_32f(const float*, float*, int, int)
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f_f(const double*, double*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f_f(const double*, double*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrMagnitude_64f(const double*, const double*, double*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_64f(const double*, double*, int, double, double)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_64f_C1R(const double*, int, double*, int, CvSize, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInvSqrt_64f_f(const double*, double*, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_64f_f(const double*, double*, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f_f(const double*, double*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckTermCriteria
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRawDataToScalar
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetReal(const void*, int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHSV2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvIPow_32f(const float*, float*, int, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_32f(const float*, float*, int, float, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_32f64f_f(const float*, double*, int)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, int)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, int)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[21e]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMul
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[205]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckTermCriteria
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCheckTermCriteria
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCheckArray_32f_C1R_f(const float*, int, CvSize, int, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvIPow_32f(const float*, float*, int, int)
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLog_32f_f(const float*, float*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvScale_32f(const float*, float*, int, float, float)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvt_64f32f_f(const double*, float*, int)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[2d5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2cf]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[359]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[35a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[35b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[35d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[2d1]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d6]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[15e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[35e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[35f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>cvAlignPtr(const void*, int)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cxarray.o(i._Z10cvAlignPtrPKvi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateData
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHSV2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Gray_8u_CnC1R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_32f_C3CnR(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvLog
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvExp
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
</UL>

<P><STRONG><a name="[28d]"></a>icvLUT_Transform8u_8s_C1R(const unsigned char*, int, char*, int, CvSize, const char*)</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxconvert.o(i._Z25icvLUT_Transform8u_8s_C1RPKhiPci6CvSizePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icvLUT_Transform8u_8s_C1R(const unsigned char*, int, char*, int, CvSize, const char*) &rArr; icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[28e]"></a>icvLUT_Transform8u_16s_C1R(const unsigned char*, int, short*, int, CvSize, const short*)</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxconvert.o(i._Z26icvLUT_Transform8u_16s_C1RPKhiPsi6CvSizePKs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icvLUT_Transform8u_16s_C1R(const unsigned char*, int, short*, int, CvSize, const short*) &rArr; icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[291]"></a>icvLUT_Transform8u_32f_C1R(const unsigned char*, int, float*, int, CvSize, const float*)</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxconvert.o(i._Z26icvLUT_Transform8u_32f_C1RPKhiPfi6CvSizePKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icvLUT_Transform8u_32f_C1R(const unsigned char*, int, float*, int, CvSize, const float*) &rArr; icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[2bc]"></a>cvMat(int, int, int, void*)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, cxarithm.o(i._Z5cvMatiiiPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
</UL>

<P><STRONG><a name="[1b2]"></a>cvAlign(int, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cxarray.o(i._Z7cvAlignii), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMemStorage
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetData
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSparseMat
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddS
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSubRS
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
</UL>

<P><STRONG><a name="[2ca]"></a>cvFloor(double)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, cvcolor.o(i._Z7cvFloord))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cvFloor(double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHSV2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[1d9]"></a>cvRound(double)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cxarray.o(i._Z7cvRoundd))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvScalarToRawData
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSetReal(double, const void*, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_64f_f(const double*, double*, int)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvExp_32f_f(const float*, float*, int)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSinCos_32f(const float*, float*, float*, int, int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, int)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, int)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, int)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[25b]"></a>icvMed3(char*, char*, char*, int(*)(const void*, const void*, void*), void*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, cxdatastructs.o(i._Z7icvMed3PcS_S_PFYiPKvS1_PvES2_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqSort
</UL>

<P><STRONG><a name="[29e]"></a>std::fabs(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cxmathfuncs.o(i._ZSt4fabsf))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvFastArctan_32f_f(const float*, const float*, float*, int)
</UL>

<P><STRONG><a name="[2a0]"></a>std::sqrt(float)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cxmathfuncs.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrt_32f_f(const float*, float*, int)
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInvSqrt_32f_f(const float*, float*, int)
</UL>

<P><STRONG><a name="[2da]"></a>__0fprintf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0fprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[361]"></a>__1fprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0fprintf$5), UNUSED)

<P><STRONG><a name="[229]"></a>__2fprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0fprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStdErrReport
</UL>

<P><STRONG><a name="[2dc]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[362]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[18c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[2dd]"></a>__0sprintf$5</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[363]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[227]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvErrorStr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMixChannels
</UL>

<P><STRONG><a name="[2e6]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[2ac]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
</UL>

<P><STRONG><a name="[289]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAddWeighted
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPow
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)
</UL>

<P><STRONG><a name="[2ad]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
</UL>

<P><STRONG><a name="[2a1]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvInvSqrt_64f_f(const double*, double*, int)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvSqrt_64f_f(const double*, double*, int)
</UL>

<P><STRONG><a name="[2d9]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[2e1]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2e3]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2e5]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2e2]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2e0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2df]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[2e7]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[364]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[365]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[366]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2de]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[1aa]"></a>cvDecRefData</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cxarray.o(i.cvDecRefData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cvDecRefData &rArr; cvFree_ &rArr; cvError &rArr; icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseData
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMat
</UL>

<P><STRONG><a name="[261]"></a>cvGetSetElem</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, cxdatastructs.o(i.cvGetSetElem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetSeqElem
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphVtxDegree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdge
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdge
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFindGraphEdge
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtx
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemove
</UL>

<P><STRONG><a name="[266]"></a>cvSetNew</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxdatastructs.o(i.cvSetNew), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddEdgeByPtr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphAddVtx
</UL>

<P><STRONG><a name="[262]"></a>cvSetRemoveByPtr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cxdatastructs.o(i.cvSetRemoveByPtr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtx
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveVtxByPtr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGraphRemoveEdgeByPtr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRemove
</UL>

<P><STRONG><a name="[2e4]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[2cc]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[207]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvPthreadDestructor(void*)
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDefaultFree(void*, void*)
</UL>

<P><STRONG><a name="[206]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateContext()
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvDefaultAlloc(unsigned, void*)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[15f]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1bd]"></a>cvGetMatND(const void*, CvMatND*, int*)</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReshapeMatND
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitNArrayIterator
</UL>

<P><STRONG><a name="[1ca]"></a>icvGetNodePtr(CvSparseMat*, const int*, int*, int, unsigned*)</STRONG> (Thumb, 516 bytes, Stack size 72 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitSparseMatIterator
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRealND
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal3D
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal2D
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal1D
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetND
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet3D
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet2D
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet1D
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRealND
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal3D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal2D
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal1D
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetND
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet3D
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet2D
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGet1D
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtrND
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr3D
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr1D
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPtr2D
</UL>

<P><STRONG><a name="[1cc]"></a>icvDeleteNode(CvSparseMat*, const int*, unsigned*)</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearND
</UL>

<P><STRONG><a name="[1de]"></a>icvGetReal(const void*, int)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetRealND
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal3D
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal2D
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetReal1D
</UL>

<P><STRONG><a name="[1df]"></a>icvSetReal(double, const void*, int)</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetRealND
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal3D
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal2D
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetReal1D
</UL>

<P><STRONG><a name="[1fa]"></a>icvCreateROI(int, int, int, int, int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cxarray.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCloneImage
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageCOI
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetImageROI
</UL>

<P><STRONG><a name="[1b3]"></a>icvCheckHuge(CvMat*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icvCheckHuge(CvMat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetData
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetMat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitMatHeader
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateMatHeader
</UL>

<P><STRONG><a name="[1f7]"></a>icvGetColorModel(int, char**, char**)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, cxarray.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = icvGetColorModel(int, char**, char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateImageHeader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvInitImageHeader
</UL>

<P><STRONG><a name="[1]"></a>icvDefaultAlloc(unsigned, void*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvDefaultAlloc(unsigned, void*) &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxalloc.o(.text)
<LI> cxalloc.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>icvDefaultFree(void*, void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cxalloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = icvDefaultFree(void*, void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxalloc.o(.text)
<LI> cxalloc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>icvCopy_8u_C1R_f(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCopy_8u_C1R_f(const unsigned char*, int, unsigned char*, int, CvSize) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[209]"></a>icvSet_8u_C1R(unsigned char*, int, CvSize, const void*, int)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSet
</UL>

<P><STRONG><a name="[4]"></a>icvSet_8u_C1MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvSet_8u_C1MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>icvSet_16s_C1MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvSet_16s_C1MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>icvSet_8u_C3MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvSet_8u_C3MR_f(unsigned char*, int, const unsigned char*, int, CvSize, const unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>icvSet_8u_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvSet_8u_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>icvSet_16s_C3MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvSet_16s_C3MR_f(unsigned short*, int, const unsigned char*, int, CvSize, const unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>icvSet_16s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 96 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvSet_16s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>icvSet_32f_C3MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvSet_32f_C3MR_f(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>icvSet_32f_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSet_32f_C4MR_f(int*, int, const unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>icvSet_64s_C3MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 80 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSet_64s_C3MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>icvSet_64s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)</STRONG> (Thumb, 88 bytes, Stack size 52 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvSet_64s_C4MR_f(long long*, int, const unsigned char*, int, CvSize, const long long*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>icvCopy_8u_C1MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_C1MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>icvCopy_16s_C1MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_C1MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>icvCopy_8u_C3MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 68 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_8u_C3MR_f(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>icvCopy_8u_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>icvCopy_16s_C3MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_16s_C3MR_f(const unsigned short*, int, unsigned short*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>icvCopy_16s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 124 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_16s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>icvCopy_32f_C3MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_32f_C3MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>icvCopy_32f_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 82 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_32f_C4MR_f(const int*, int, int*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>icvCopy_64s_C3MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 76 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_64s_C3MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>icvCopy_64s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 82 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_64s_C4MR_f(const long long*, int, long long*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>icvFlipHorz_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 64 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvFlipHorz_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>icvFlipHorz_8u_C2R(const unsigned short*, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 78 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvFlipHorz_8u_C2R(const unsigned short*, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[ba]"></a>icvFlipHorz_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 106 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvFlipHorz_8u_C3R(const unsigned char*, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>icvFlipHorz_16u_C2R(const int*, int, int*, int, CvSize)</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvFlipHorz_16u_C2R(const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>icvFlipHorz_16u_C3R(const unsigned short*, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvFlipHorz_16u_C3R(const unsigned short*, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>icvFlipHorz_32s_C2R(const long long*, int, long long*, int, CvSize)</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvFlipHorz_32s_C2R(const long long*, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[be]"></a>icvFlipHorz_32s_C3R(const int*, int, int*, int, CvSize)</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvFlipHorz_32s_C3R(const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[bf]"></a>icvFlipHorz_64s_C2R(const int*, int, int*, int, CvSize)</STRONG> (Thumb, 132 bytes, Stack size 36 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvFlipHorz_64s_C2R(const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>icvFlipHorz_64s_C3R(const long long*, int, long long*, int, CvSize)</STRONG> (Thumb, 138 bytes, Stack size 52 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvFlipHorz_64s_C3R(const long long*, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>icvFlipHorz_64s_C4R(const long long*, int, long long*, int, CvSize)</STRONG> (Thumb, 148 bytes, Stack size 52 bytes, cxcopy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvFlipHorz_64s_C4R(const long long*, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxcopy.o(.text)
</UL>
<P><STRONG><a name="[222]"></a>icvFlipVert_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 194 bytes, Stack size 60 bytes, cxcopy.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFlip
</UL>

<P><STRONG><a name="[225]"></a>icvGetContext()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvGetContext() &rArr; icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvCreateContext()
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetErrStatus
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetErrMode
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrInfo
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRedirectError
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrMode
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>

<P><STRONG><a name="[232]"></a>icvCreateContext()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cxerror.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvCreateContext() &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGetContext()
</UL>

<P><STRONG><a name="[235]"></a>icvGoNextMemBlock(CvMemStorage*)</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSaveMemStoragePos
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRestoreMemStoragePos
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGrowSeq(CvSeq*, int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
</UL>

<P><STRONG><a name="[238]"></a>icvGrowSeq(CvSeq*, int)</STRONG> (Thumb, 764 bytes, Stack size 40 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqBlockSize
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMemStorageAlloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvGoNextMemBlock(CvMemStorage*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlign(int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetAdd
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushMulti
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqInsert
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPushFront
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPush
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateSeqBlock
</UL>

<P><STRONG><a name="[23a]"></a>icvDestroyMemStorage(CvMemStorage*)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFree_
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvClearMemStorage
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvReleaseMemStorage
</UL>

<P><STRONG><a name="[245]"></a>icvFreeSeqBlock(CvSeq*, int)</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopMulti
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqRemove
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPopFront
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSeqPop
</UL>

<P><STRONG><a name="[271]"></a>icvSeqElemsClearFlags(CvSeq*, int, int)</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCreateGraphScanner
</UL>

<P><STRONG><a name="[272]"></a>icvSeqFindNextElem(CvSeq*, int, int, int, int*)</STRONG> (Thumb, 312 bytes, Stack size 72 bytes, cxdatastructs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvStartReadSeq
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSetSeqReaderPos
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvGetErrStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvError
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvChangeSeqBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvNextGraphItem
</UL>

<P><STRONG><a name="[18]"></a>icvCopy_8u_C2P2R_f(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_8u_C2P2R_f(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>icvCopy_8u_C3P3R_f(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_C3P3R_f(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>icvCopy_8u_C4P4R_f(const unsigned char*, int, unsigned char**, int, CvSize)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_C4P4R_f(const unsigned char*, int, unsigned char**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>icvCopy_16s_C2P2R_f(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_16s_C2P2R_f(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>icvCopy_16s_C3P3R_f(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_C3P3R_f(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>icvCopy_16s_C4P4R_f(const unsigned short*, int, unsigned short**, int, CvSize)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_C4P4R_f(const unsigned short*, int, unsigned short**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>icvCopy_32f_C2P2R_f(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_32f_C2P2R_f(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>icvCopy_32f_C3P3R_f(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_C3P3R_f(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>icvCopy_32f_C4P4R_f(const int*, int, int**, int, CvSize)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_C4P4R_f(const int*, int, int**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>icvCopy_64f_C2P2R_f(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 80 bytes, Stack size 36 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_64f_C2P2R_f(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>icvCopy_64f_C3P3R_f(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 112 bytes, Stack size 52 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvCopy_64f_C3P3R_f(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>icvCopy_64f_C4P4R_f(const long long*, int, long long**, int, CvSize)</STRONG> (Thumb, 126 bytes, Stack size 52 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvCopy_64f_C4P4R_f(const long long*, int, long long**, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>icvCopy_8u_CnC1CR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_CnC1CR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>icvCopy_16s_CnC1CR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_CnC1CR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>icvCopy_32f_CnC1CR_f(const int*, int, int*, int, CvSize, int, int)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_CnC1CR_f(const int*, int, int*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>icvCopy_64f_CnC1CR_f(const long long*, int, long long*, int, CvSize, int, int)</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_64f_CnC1CR_f(const long long*, int, long long*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>icvCopy_8u_P2C2R_f(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_8u_P2C2R_f(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>icvCopy_8u_P3C3R_f(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_P3C3R_f(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>icvCopy_8u_P4C4R_f(const unsigned char**, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_P4C4R_f(const unsigned char**, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>icvCopy_16s_P2C2R_f(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_16s_P2C2R_f(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>icvCopy_16s_P3C3R_f(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_P3C3R_f(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>icvCopy_16s_P4C4R_f(const unsigned short**, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_P4C4R_f(const unsigned short**, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>icvCopy_32f_P2C2R_f(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvCopy_32f_P2C2R_f(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>icvCopy_32f_P3C3R_f(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_P3C3R_f(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>icvCopy_32f_P4C4R_f(const int**, int, int*, int, CvSize)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_P4C4R_f(const int**, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>icvCopy_64f_P2C2R_f(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_64f_P2C2R_f(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>icvCopy_64f_P3C3R_f(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 108 bytes, Stack size 52 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvCopy_64f_P3C3R_f(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>icvCopy_64f_P4C4R_f(const long long**, int, long long*, int, CvSize)</STRONG> (Thumb, 120 bytes, Stack size 52 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvCopy_64f_P4C4R_f(const long long**, int, long long*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>icvCopy_8u_C1CnCR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_8u_C1CnCR_f(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>icvCopy_16s_C1CnCR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_16s_C1CnCR_f(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>icvCopy_32f_C1CnCR_f(const int*, int, int*, int, CvSize, int, int)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvCopy_32f_C1CnCR_f(const int*, int, int*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>icvCopy_64f_C1CnCR_f(const long long*, int, long long*, int, CvSize, int, int)</STRONG> (Thumb, 144 bytes, Stack size 36 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvCopy_64f_C1CnCR_f(const long long*, int, long long*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>icvMixChannels_8u(const unsigned char**, int*, int*, unsigned char**, int*, int*, int, CvSize)</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvMixChannels_8u(const unsigned char**, int*, int*, unsigned char**, int*, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>icvMixChannels_16u(const unsigned short**, int*, int*, unsigned short**, int*, int*, int, CvSize)</STRONG> (Thumb, 294 bytes, Stack size 56 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvMixChannels_16u(const unsigned short**, int*, int*, unsigned short**, int*, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>icvMixChannels_32s(const int**, int*, int*, int**, int*, int*, int, CvSize)</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvMixChannels_32s(const int**, int*, int*, int**, int*, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>icvMixChannels_64s(const long long**, int*, int*, long long**, int*, int*, int, CvSize)</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icvMixChannels_64s(const long long**, int*, int*, long long**, int*, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>icvCvtScaleAbsTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)</STRONG> (Thumb, 3096 bytes, Stack size 376 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScaleAbs
</UL>

<P><STRONG><a name="[c6]"></a>icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int)</STRONG> (Thumb, 3680 bytes, Stack size 392 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = icvCvtScaleTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double, double, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int)</STRONG> (Thumb, 3892 bytes, Stack size 392 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = icvCvtScaleTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, double, double, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_8s_C1R(const unsigned char*, int, char*, int, CvSize, const char*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int)</STRONG> (Thumb, 4130 bytes, Stack size 648 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = icvCvtScaleTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, double, double, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_16s_C1R(const unsigned char*, int, short*, int, CvSize, const short*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int)</STRONG> (Thumb, 3776 bytes, Stack size 648 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = icvCvtScaleTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, double, double, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int)</STRONG> (Thumb, 2834 bytes, Stack size 1160 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = icvCvtScaleTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, double, double, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_32s_C1R(const unsigned char*, int, int*, int, CvSize, const int*)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[cb]"></a>icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int)</STRONG> (Thumb, 1952 bytes, Stack size 1144 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = icvCvtScaleTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, double, double, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_32f_C1R(const unsigned char*, int, float*, int, CvSize, const float*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int)</STRONG> (Thumb, 1830 bytes, Stack size 2152 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2240<LI>Call Chain = icvCvtScaleTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, double, double, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLUT_Transform8u_64f_C1R(const unsigned char*, int, double*, int, CvSize, const double*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[293]"></a>icvInitCvtScaleToC1RTable(CvFuncTable*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[cd]"></a>icvCvtTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 1102 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icvCvtTo_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>icvCvtTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, int)</STRONG> (Thumb, 1182 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icvCvtTo_8s_C1R(const unsigned char*, int, char*, int, CvSize, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>icvCvtTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 1116 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icvCvtTo_16u_C1R(const unsigned char*, int, unsigned short*, int, CvSize, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>icvCvtTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, int)</STRONG> (Thumb, 1228 bytes, Stack size 72 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icvCvtTo_16s_C1R(const unsigned char*, int, short*, int, CvSize, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>icvCvtTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, int)</STRONG> (Thumb, 610 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icvCvtTo_32s_C1R(const unsigned char*, int, int*, int, CvSize, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>icvCvtTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, int)</STRONG> (Thumb, 760 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = icvCvtTo_32f_C1R(const unsigned char*, int, float*, int, CvSize, int) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int)</STRONG> (Thumb, 972 bytes, Stack size 64 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = icvCvtTo_64f_C1R(const unsigned char*, int, double*, int, CvSize, int) &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.text)
</UL>
<P><STRONG><a name="[294]"></a>icvInitCvtToC1RTable(CvFuncTable*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvConvertScale
</UL>

<P><STRONG><a name="[38]"></a>icvCvt_32f64f_f(const float*, double*, int)</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvCvt_32f64f_f(const float*, double*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>icvCvt_64f32f_f(const double*, float*, int)</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, cxconvert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icvCvt_64f32f_f(const double*, float*, int) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxconvert.o(.data)
</UL>
<P><STRONG><a name="[27d]"></a>icvInitSplitRTable(CvBigFuncTable*)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSplit
</UL>

<P><STRONG><a name="[282]"></a>icvInitCvtPlaneToPixRTable(CvBigFuncTable*)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cxconvert.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvMerge
</UL>

<P><STRONG><a name="[ec]"></a>icvLUT_Transform8u_8u_CnR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)</STRONG> (Thumb, 298 bytes, Stack size 1084 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = icvLUT_Transform8u_8u_CnR(const unsigned char*, int, unsigned char*, int, CvSize, const unsigned char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>icvLUT_Transform8u_16u_CnR(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*, int)</STRONG> (Thumb, 300 bytes, Stack size 2108 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2108<LI>Call Chain = icvLUT_Transform8u_16u_CnR(const unsigned char*, int, unsigned short*, int, CvSize, const unsigned short*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>icvLUT_Transform8u_32s_CnR(const unsigned char*, int, int*, int, CvSize, const int*, int)</STRONG> (Thumb, 312 bytes, Stack size 4212 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4212<LI>Call Chain = icvLUT_Transform8u_32s_CnR(const unsigned char*, int, int*, int, CvSize, const int*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>icvLUT_Transform8u_64f_CnR(const unsigned char*, int, double*, int, CvSize, const double*, int)</STRONG> (Thumb, 322 bytes, Stack size 8312 bytes, cxlut.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8312<LI>Call Chain = icvLUT_Transform8u_64f_CnR(const unsigned char*, int, double*, int, CvSize, const double*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxlut.o(.text)
</UL>
<P><STRONG><a name="[3a]"></a>icvFastArctan_32f_f(const float*, const float*, float*, int)</STRONG> (Thumb, 700 bytes, Stack size 152 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = icvFastArctan_32f_f(const float*, const float*, float*, int) &rArr; cvFastArctan &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fabs(float)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFastArctan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>icvInvSqrt_32f_f(const float*, float*, int)</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icvInvSqrt_32f_f(const float*, float*, int) &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>icvSqrt_32f_f(const float*, float*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSqrt_32f_f(const float*, float*, int) &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>icvSqrt_64f_f(const double*, double*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = icvSqrt_64f_f(const double*, double*, int) &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>icvInvSqrt_64f_f(const double*, double*, int)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = icvInvSqrt_64f_f(const double*, double*, int) &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[2a2]"></a>icvSqrMagnitude_64f(const double*, const double*, double*, int)</STRONG> (Thumb, 332 bytes, Stack size 88 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[2a8]"></a>icvSinCos_32f(const float*, float*, float*, int, int)</STRONG> (Thumb, 434 bytes, Stack size 80 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvPolarToCart
</UL>

<P><STRONG><a name="[3f]"></a>icvExp_32f_f(const float*, float*, int)</STRONG> (Thumb, 1452 bytes, Stack size 144 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icvExp_32f_f(const float*, float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>icvExp_64f_f(const double*, double*, int)</STRONG> (Thumb, 1508 bytes, Stack size 152 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icvExp_64f_f(const double*, double*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>icvLog_32f_f(const float*, float*, int)</STRONG> (Thumb, 1208 bytes, Stack size 136 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvLog_32f_f(const float*, float*, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>icvLog_64f_f(const double*, double*, int)</STRONG> (Thumb, 1644 bytes, Stack size 152 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icvLog_64f_f(const double*, double*, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>icvIPow_8u(const unsigned char*, unsigned char*, int, int)</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvIPow_8u(const unsigned char*, unsigned char*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>icvIPow_16u(const unsigned short*, unsigned short*, int, int)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvIPow_16u(const unsigned short*, unsigned short*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>icvIPow_16s(const short*, short*, int, int)</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvIPow_16s(const short*, short*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>icvIPow_32s(const int*, int*, int, int)</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvIPow_32s(const int*, int*, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>icvIPow_32f(const float*, float*, int, int)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icvIPow_32f(const float*, float*, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>icvIPow_64f(const double*, double*, int, int)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icvIPow_64f(const double*, double*, int, int) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.text)
</UL>
<P><STRONG><a name="[43]"></a>icvCheckArray_32f_C1R_f(const float*, int, CvSize, int, double, double)</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = icvCheckArray_32f_C1R_f(const float*, int, CvSize, int, double, double) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>icvCheckArray_64f_C1R_f(const double*, int, CvSize, int, double, double)</STRONG> (Thumb, 198 bytes, Stack size 56 bytes, cxmathfuncs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvCheckArray_64f_C1R_f(const double*, int, CvSize, int, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxmathfuncs.o(.data)
</UL>
<P><STRONG><a name="[2a4]"></a>icvSqrMagnitude_32f(const float*, const float*, float*, int)</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, cxmathfuncs.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCartToPolar
</UL>

<P><STRONG><a name="[45]"></a>icvAdd_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvAdd_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>icvAdd_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvAdd_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>icvAdd_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)</STRONG> (Thumb, 326 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvAdd_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>icvAdd_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvAdd_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>icvAdd_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)</STRONG> (Thumb, 208 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvAdd_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>icvAdd_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icvAdd_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>icvSub_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvSub_8u_C1R_f(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>icvSub_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvSub_16u_C1R_f(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>icvSub_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvSub_16s_C1R_f(const short*, int, const short*, int, short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>icvSub_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvSub_32s_C1R_f(const int*, int, const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>icvSub_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)</STRONG> (Thumb, 208 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSub_32f_C1R_f(const float*, int, const float*, int, float*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>icvSub_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize)</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icvSub_64f_C1R_f(const double*, int, const double*, int, double*, int, CvSize) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>icvAddC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 420 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvAddC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>icvAddC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)</STRONG> (Thumb, 442 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvAddC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>icvAddC_16s_C1R(const short*, int, short*, int, CvSize, const int*)</STRONG> (Thumb, 554 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvAddC_16s_C1R(const short*, int, short*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>icvAddC_32s_C1R(const int*, int, int*, int, CvSize, const int*)</STRONG> (Thumb, 238 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvAddC_32s_C1R(const int*, int, int*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>icvAddC_32f_C1R(const float*, int, float*, int, CvSize, const float*)</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvAddC_32f_C1R(const float*, int, float*, int, CvSize, const float*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>icvAddC_64f_C1R(const double*, int, double*, int, CvSize, const double*)</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icvAddC_64f_C1R(const double*, int, double*, int, CvSize, const double*) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>icvSubRC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)</STRONG> (Thumb, 434 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSubRC_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>icvSubRC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)</STRONG> (Thumb, 456 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSubRC_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>icvSubRC_16s_C1R(const short*, int, short*, int, CvSize, const int*)</STRONG> (Thumb, 580 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSubRC_16s_C1R(const short*, int, short*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>icvSubRC_32s_C1R(const int*, int, int*, int, CvSize, const int*)</STRONG> (Thumb, 264 bytes, Stack size 36 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvSubRC_32s_C1R(const int*, int, int*, int, CvSize, const int*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>icvSubRC_32f_C1R(const float*, int, float*, int, CvSize, const float*)</STRONG> (Thumb, 322 bytes, Stack size 32 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvSubRC_32f_C1R(const float*, int, float*, int, CvSize, const float*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>icvSubRC_64f_C1R(const double*, int, double*, int, CvSize, const double*)</STRONG> (Thumb, 494 bytes, Stack size 56 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = icvSubRC_64f_C1R(const double*, int, double*, int, CvSize, const double*) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)</STRONG> (Thumb, 816 bytes, Stack size 96 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icvMul_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)</STRONG> (Thumb, 732 bytes, Stack size 96 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icvMul_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)</STRONG> (Thumb, 794 bytes, Stack size 104 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvMul_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)</STRONG> (Thumb, 554 bytes, Stack size 96 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icvMul_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)</STRONG> (Thumb, 674 bytes, Stack size 96 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = icvMul_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)</STRONG> (Thumb, 592 bytes, Stack size 80 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = icvMul_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double)</STRONG> (Thumb, 1064 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvDiv_8u_C1R(const unsigned char*, int, const unsigned char*, int, unsigned char*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double)</STRONG> (Thumb, 894 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvDiv_16u_C1R(const unsigned short*, int, const unsigned short*, int, unsigned short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double)</STRONG> (Thumb, 880 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvDiv_16s_C1R(const short*, int, const short*, int, short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double)</STRONG> (Thumb, 756 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvDiv_32s_C1R(const int*, int, const int*, int, int*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double)</STRONG> (Thumb, 824 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvDiv_32f_C1R(const float*, int, const float*, int, float*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>icvDiv_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double)</STRONG> (Thumb, 790 bytes, Stack size 152 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = icvDiv_64f_C1R(const double*, int, const double*, int, double*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double)</STRONG> (Thumb, 772 bytes, Stack size 104 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvRecip_8u_C1R(const unsigned char*, int, unsigned char*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[113]"></a>icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double)</STRONG> (Thumb, 732 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvRecip_16u_C1R(const unsigned short*, int, unsigned short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[114]"></a>icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double)</STRONG> (Thumb, 770 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvRecip_16s_C1R(const short*, int, short*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double)</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvRecip_32s_C1R(const int*, int, int*, int, CvSize, double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double)</STRONG> (Thumb, 668 bytes, Stack size 112 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icvRecip_32f_C1R(const float*, int, float*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>icvRecip_64f_C1R(const double*, int, double*, int, CvSize, double)</STRONG> (Thumb, 596 bytes, Stack size 144 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = icvRecip_64f_C1R(const double*, int, double*, int, CvSize, double) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)</STRONG> (Thumb, 894 bytes, Stack size 2200 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = icvAddWeighted_8u_fast_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize)</STRONG> (Thumb, 634 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvAddWeighted_8u_C1R(const unsigned char*, int, double, const unsigned char*, int, double, double, unsigned char*, int, CvSize) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize)</STRONG> (Thumb, 554 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvAddWeighted_16u_C1R(const unsigned short*, int, double, const unsigned short*, int, double, double, unsigned short*, int, CvSize) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize)</STRONG> (Thumb, 578 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvAddWeighted_16s_C1R(const short*, int, double, const short*, int, double, double, short*, int, CvSize) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11b]"></a>icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize)</STRONG> (Thumb, 454 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvAddWeighted_32s_C1R(const int*, int, double, const int*, int, double, double, int*, int, CvSize) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize)</STRONG> (Thumb, 452 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvAddWeighted_32f_C1R(const float*, int, double, const float*, int, double, double, float*, int, CvSize) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>icvAddWeighted_64f_C1R(const double*, int, double, const double*, int, double, double, double*, int, CvSize)</STRONG> (Thumb, 438 bytes, Stack size 120 bytes, cxarithm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvAddWeighted_64f_C1R(const double*, int, double, const double*, int, double, double, double*, int, CvSize) &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxarithm.o(.text)
</UL>
<P><STRONG><a name="[2bb]"></a>icvInitSubC1RTable(CvFuncTable*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvSub
</UL>

<P><STRONG><a name="[2bf]"></a>icvInitAddC1RTable(CvFuncTable*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cxarithm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAdd
</UL>

<P><STRONG><a name="[134]"></a>icvBGRx2BGR_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 70 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2BGR_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>icvBGRx2BGR_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2BGR_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[136]"></a>icvBGRx2BGR_32f_CnC3R(const int*, int, int*, int, CvSize, int, int)</STRONG> (Thumb, 86 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2BGR_32f_CnC3R(const int*, int, int*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>icvBGR2BGRx_8u_C3C4R(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 76 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGR2BGRx_8u_C3C4R(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>icvBGR2BGRx_16u_C3C4R(const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGR2BGRx_16u_C3C4R(const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>icvBGR2BGRx_32f_C3C4R(const int*, int, int*, int, CvSize, int)</STRONG> (Thumb, 90 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGR2BGRx_32f_C3C4R(const int*, int, int*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>icvBGRA2RGBA_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize)</STRONG> (Thumb, 60 bytes, Stack size 28 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvBGRA2RGBA_8u_C4R(const unsigned char*, int, unsigned char*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>icvBGRA2RGBA_16u_C4R(const unsigned short*, int, unsigned short*, int, CvSize)</STRONG> (Thumb, 70 bytes, Stack size 28 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvBGRA2RGBA_16u_C4R(const unsigned short*, int, unsigned short*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>icvBGRA2RGBA_32f_C4R(const int*, int, int*, int, CvSize)</STRONG> (Thumb, 68 bytes, Stack size 28 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvBGRA2RGBA_32f_C4R(const int*, int, int*, int, CvSize)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>icvBGR5x52BGRx_8u_C2CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvBGR5x52BGRx_8u_C2CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>icvBGRx2BGR5x5_8u_CnC2R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)</STRONG> (Thumb, 142 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2BGR5x5_8u_CnC2R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[2c2]"></a>icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Luv_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2HLS_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2HSV_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c3]"></a>icvBGRx2ABC_IPP_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvBGRx2ABC_IPP_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c4]"></a>icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 262 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2HLS_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2XYZ_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c5]"></a>icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 254 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLuv2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLab2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c6]"></a>icvABC2BGRx_IPP_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvABC2BGRx_IPP_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c7]"></a>icvABC2BGRx_IPP_32f_C3CnR(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = icvABC2BGRx_IPP_32f_C3CnR(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvXYZ2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[140]"></a>icvGray2BGRx_8u_C1CnR(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvGray2BGRx_8u_C1CnR(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>icvGray2BGRx_16u_C1CnR(const unsigned short*, int, unsigned short*, int, CvSize, int)</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvGray2BGRx_16u_C1CnR(const unsigned short*, int, unsigned short*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[142]"></a>icvGray2BGRx_32f_C1CnR(const float*, int, float*, int, CvSize, int)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvGray2BGRx_32f_C1CnR(const float*, int, float*, int, CvSize, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13f]"></a>icvBGR5x52Gray_8u_C2C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = icvBGR5x52Gray_8u_C2C1R(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>icvGray2BGR5x5_8u_C1C2R(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = icvGray2BGR5x5_8u_C1C2R(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>icvBGRx2Gray_8u_CnC1R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icvBGRx2Gray_8u_CnC1R(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>icvBGRx2Gray_16u_CnC1R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 116 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2Gray_16u_CnC1R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>icvBGRx2Gray_32f_CnC1R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvBGRx2Gray_32f_CnC1R(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>icvBGRx2YCrCb_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 190 bytes, Stack size 36 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = icvBGRx2YCrCb_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>icvBGRx2YCrCb_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 216 bytes, Stack size 52 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvBGRx2YCrCb_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14c]"></a>icvBGRx2YCrCb_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvBGRx2YCrCb_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[150]"></a>icvYCrCb2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 188 bytes, Stack size 52 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvYCrCb2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[156]"></a>icvYCrCb2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 238 bytes, Stack size 52 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = icvYCrCb2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>icvYCrCb2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvYCrCb2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>icvBGRx2XYZ_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icvBGRx2XYZ_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14b]"></a>icvBGRx2XYZ_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icvBGRx2XYZ_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int) &rArr; icvBGRx2ABC_IPP_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_16u_CnC3R(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14d]"></a>icvBGRx2XYZ_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 270 bytes, Stack size 96 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icvBGRx2XYZ_32f_CnC3R(const float*, int, float*, int, CvSize, int, int) &rArr; icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[151]"></a>icvXYZ2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 312 bytes, Stack size 112 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icvXYZ2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[157]"></a>icvXYZ2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int)</STRONG> (Thumb, 306 bytes, Stack size 112 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icvXYZ2BGRx_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int) &rArr; icvABC2BGRx_IPP_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_16u_C3CnR(const unsigned short*, int, unsigned short*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>icvXYZ2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 284 bytes, Stack size 96 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = icvXYZ2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int) &rArr; icvABC2BGRx_IPP_32f_C3CnR(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_32f_C3CnR(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)</STRONG> (Thumb, 656 bytes, Stack size 96 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLuv2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvLab2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHLS2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvHSV2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[2c9]"></a>icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)</STRONG> (Thumb, 552 bytes, Stack size 88 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvRound(double)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2Luv_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2HLS_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>

<P><STRONG><a name="[146]"></a>icvBGRx2HSV_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = icvBGRx2HSV_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14e]"></a>icvBGRx2HSV_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 300 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvBGRx2HSV_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>icvHSV2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 340 bytes, Stack size 88 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = icvHSV2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int) &rArr; cvFloor(double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[152]"></a>icvHSV2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 322 bytes, Stack size 80 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = icvHSV2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>icvBGRx2HLS_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 506 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = icvBGRx2HLS_32f_CnC3R(const float*, int, float*, int, CvSize, int, int) &rArr; icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize)) &rArr; cvAlignPtr(const void*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_32f_CnC3R(const float*, int, float*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 676 bytes, Stack size 104 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvHLS2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int) &rArr; cvFloor(double) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvFloor(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[149]"></a>icvBGRx2HLS_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icvBGRx2HLS_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[153]"></a>icvHLS2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = icvHLS2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvAlignPtr(const void*, int)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>icvBGRx2Lab_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = icvBGRx2Lab_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[14f]"></a>icvBGRx2Lab_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 330 bytes, Stack size 80 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = icvBGRx2Lab_32f_CnC3R(const float*, int, float*, int, CvSize, int, int) &rArr; cvCbrt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>icvLab2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 390 bytes, Stack size 20 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = icvLab2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>icvLab2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icvLab2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>icvBGRx2Luv_32f_CnC3R(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = icvBGRx2Luv_32f_CnC3R(const float*, int, float*, int, CvSize, int, int) &rArr; cvCbrt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvCbrt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>icvLuv2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)</STRONG> (Thumb, 332 bytes, Stack size 28 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = icvLuv2BGRx_32f_C3CnR(const float*, int, float*, int, CvSize, int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>icvBGRx2Luv_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = icvBGRx2Luv_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), int, const float*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvBGRx2ABC_IPP_8u_CnC3R(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>icvLuv2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int)</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = icvLuv2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int) &rArr; icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int) &rArr; cvRound(double) &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize, int, int), const float*, int)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icvABC2BGRx_IPP_8u_C3CnR(const unsigned char*, int, unsigned char*, int, CvSize, int, int, CvStatus(*)(const void*, int, void*, int, CvSize))
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[15a]"></a>icvBayer2BGR_8u_C1C3R(const unsigned char*, int, unsigned char*, int, CvSize, int)</STRONG> (Thumb, 628 bytes, Stack size 64 bytes, cvcolor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = icvBayer2BGR_8u_C1C3R(const unsigned char*, int, unsigned char*, int, CvSize, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cvcolor.o(.text)
</UL>
<P><STRONG><a name="[2db]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0fprintf$5
</UL>

<P><STRONG><a name="[15c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
