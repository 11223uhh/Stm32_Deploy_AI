
asd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006284  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  00020a7c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d20  08006d20  00020a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a7c  20000000  08006d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a2c0  20000a7c  080077a4  00020a7c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad3c  080077a4  0002ad3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001626c  00000000  00000000  00020aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c72  00000000  00000000  00036d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00039990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  0003aa78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023166  00000000  00000000  0003ba58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140c3  00000000  00000000  0005ebbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d43f1  00000000  00000000  00072c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147072  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000506c  00000000  00000000  001470c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000a7c 	.word	0x20000a7c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800644c 	.word	0x0800644c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000a80 	.word	0x20000a80
 800021c:	0800644c 	.word	0x0800644c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96e 	b.w	8000b80 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	4604      	mov	r4, r0
 80008c4:	468c      	mov	ip, r1
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	f040 8083 	bne.w	80009d2 <__udivmoddi4+0x116>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d947      	bls.n	8000962 <__udivmoddi4+0xa6>
 80008d2:	fab2 f282 	clz	r2, r2
 80008d6:	b142      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d8:	f1c2 0020 	rsb	r0, r2, #32
 80008dc:	fa24 f000 	lsr.w	r0, r4, r0
 80008e0:	4091      	lsls	r1, r2
 80008e2:	4097      	lsls	r7, r2
 80008e4:	ea40 0c01 	orr.w	ip, r0, r1
 80008e8:	4094      	lsls	r4, r2
 80008ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008ee:	0c23      	lsrs	r3, r4, #16
 80008f0:	fbbc f6f8 	udiv	r6, ip, r8
 80008f4:	fa1f fe87 	uxth.w	lr, r7
 80008f8:	fb08 c116 	mls	r1, r8, r6, ip
 80008fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000900:	fb06 f10e 	mul.w	r1, r6, lr
 8000904:	4299      	cmp	r1, r3
 8000906:	d909      	bls.n	800091c <__udivmoddi4+0x60>
 8000908:	18fb      	adds	r3, r7, r3
 800090a:	f106 30ff 	add.w	r0, r6, #4294967295
 800090e:	f080 8119 	bcs.w	8000b44 <__udivmoddi4+0x288>
 8000912:	4299      	cmp	r1, r3
 8000914:	f240 8116 	bls.w	8000b44 <__udivmoddi4+0x288>
 8000918:	3e02      	subs	r6, #2
 800091a:	443b      	add	r3, r7
 800091c:	1a5b      	subs	r3, r3, r1
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb3 f0f8 	udiv	r0, r3, r8
 8000924:	fb08 3310 	mls	r3, r8, r0, r3
 8000928:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800092c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000930:	45a6      	cmp	lr, r4
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x8c>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 33ff 	add.w	r3, r0, #4294967295
 800093a:	f080 8105 	bcs.w	8000b48 <__udivmoddi4+0x28c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8102 	bls.w	8000b48 <__udivmoddi4+0x28c>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800094c:	eba4 040e 	sub.w	r4, r4, lr
 8000950:	2600      	movs	r6, #0
 8000952:	b11d      	cbz	r5, 800095c <__udivmoddi4+0xa0>
 8000954:	40d4      	lsrs	r4, r2
 8000956:	2300      	movs	r3, #0
 8000958:	e9c5 4300 	strd	r4, r3, [r5]
 800095c:	4631      	mov	r1, r6
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	b902      	cbnz	r2, 8000966 <__udivmoddi4+0xaa>
 8000964:	deff      	udf	#255	; 0xff
 8000966:	fab2 f282 	clz	r2, r2
 800096a:	2a00      	cmp	r2, #0
 800096c:	d150      	bne.n	8000a10 <__udivmoddi4+0x154>
 800096e:	1bcb      	subs	r3, r1, r7
 8000970:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000974:	fa1f f887 	uxth.w	r8, r7
 8000978:	2601      	movs	r6, #1
 800097a:	fbb3 fcfe 	udiv	ip, r3, lr
 800097e:	0c21      	lsrs	r1, r4, #16
 8000980:	fb0e 331c 	mls	r3, lr, ip, r3
 8000984:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000988:	fb08 f30c 	mul.w	r3, r8, ip
 800098c:	428b      	cmp	r3, r1
 800098e:	d907      	bls.n	80009a0 <__udivmoddi4+0xe4>
 8000990:	1879      	adds	r1, r7, r1
 8000992:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000996:	d202      	bcs.n	800099e <__udivmoddi4+0xe2>
 8000998:	428b      	cmp	r3, r1
 800099a:	f200 80e9 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 800099e:	4684      	mov	ip, r0
 80009a0:	1ac9      	subs	r1, r1, r3
 80009a2:	b2a3      	uxth	r3, r4
 80009a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009a8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009ac:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009b0:	fb08 f800 	mul.w	r8, r8, r0
 80009b4:	45a0      	cmp	r8, r4
 80009b6:	d907      	bls.n	80009c8 <__udivmoddi4+0x10c>
 80009b8:	193c      	adds	r4, r7, r4
 80009ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x10a>
 80009c0:	45a0      	cmp	r8, r4
 80009c2:	f200 80d9 	bhi.w	8000b78 <__udivmoddi4+0x2bc>
 80009c6:	4618      	mov	r0, r3
 80009c8:	eba4 0408 	sub.w	r4, r4, r8
 80009cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009d0:	e7bf      	b.n	8000952 <__udivmoddi4+0x96>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d909      	bls.n	80009ea <__udivmoddi4+0x12e>
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	f000 80b1 	beq.w	8000b3e <__udivmoddi4+0x282>
 80009dc:	2600      	movs	r6, #0
 80009de:	e9c5 0100 	strd	r0, r1, [r5]
 80009e2:	4630      	mov	r0, r6
 80009e4:	4631      	mov	r1, r6
 80009e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ea:	fab3 f683 	clz	r6, r3
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d14a      	bne.n	8000a88 <__udivmoddi4+0x1cc>
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d302      	bcc.n	80009fc <__udivmoddi4+0x140>
 80009f6:	4282      	cmp	r2, r0
 80009f8:	f200 80b8 	bhi.w	8000b6c <__udivmoddi4+0x2b0>
 80009fc:	1a84      	subs	r4, r0, r2
 80009fe:	eb61 0103 	sbc.w	r1, r1, r3
 8000a02:	2001      	movs	r0, #1
 8000a04:	468c      	mov	ip, r1
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d0a8      	beq.n	800095c <__udivmoddi4+0xa0>
 8000a0a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a0e:	e7a5      	b.n	800095c <__udivmoddi4+0xa0>
 8000a10:	f1c2 0320 	rsb	r3, r2, #32
 8000a14:	fa20 f603 	lsr.w	r6, r0, r3
 8000a18:	4097      	lsls	r7, r2
 8000a1a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a1e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	4330      	orrs	r0, r6
 8000a26:	0c03      	lsrs	r3, r0, #16
 8000a28:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a2c:	fa1f f887 	uxth.w	r8, r7
 8000a30:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a38:	fb06 f108 	mul.w	r1, r6, r8
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x19c>
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a4a:	f080 808d 	bcs.w	8000b68 <__udivmoddi4+0x2ac>
 8000a4e:	4299      	cmp	r1, r3
 8000a50:	f240 808a 	bls.w	8000b68 <__udivmoddi4+0x2ac>
 8000a54:	3e02      	subs	r6, #2
 8000a56:	443b      	add	r3, r7
 8000a58:	1a5b      	subs	r3, r3, r1
 8000a5a:	b281      	uxth	r1, r0
 8000a5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb00 f308 	mul.w	r3, r0, r8
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d907      	bls.n	8000a80 <__udivmoddi4+0x1c4>
 8000a70:	1879      	adds	r1, r7, r1
 8000a72:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a76:	d273      	bcs.n	8000b60 <__udivmoddi4+0x2a4>
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d971      	bls.n	8000b60 <__udivmoddi4+0x2a4>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4439      	add	r1, r7
 8000a80:	1acb      	subs	r3, r1, r3
 8000a82:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a86:	e778      	b.n	800097a <__udivmoddi4+0xbe>
 8000a88:	f1c6 0c20 	rsb	ip, r6, #32
 8000a8c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a90:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a94:	431c      	orrs	r4, r3
 8000a96:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a9e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000aa2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000aa6:	431f      	orrs	r7, r3
 8000aa8:	0c3b      	lsrs	r3, r7, #16
 8000aaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aae:	fa1f f884 	uxth.w	r8, r4
 8000ab2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ab6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aba:	fb09 fa08 	mul.w	sl, r9, r8
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ac4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ac8:	d908      	bls.n	8000adc <__udivmoddi4+0x220>
 8000aca:	1861      	adds	r1, r4, r1
 8000acc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ad0:	d248      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad2:	458a      	cmp	sl, r1
 8000ad4:	d946      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000ad6:	f1a9 0902 	sub.w	r9, r9, #2
 8000ada:	4421      	add	r1, r4
 8000adc:	eba1 010a 	sub.w	r1, r1, sl
 8000ae0:	b2bf      	uxth	r7, r7
 8000ae2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ae6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aea:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000aee:	fb00 f808 	mul.w	r8, r0, r8
 8000af2:	45b8      	cmp	r8, r7
 8000af4:	d907      	bls.n	8000b06 <__udivmoddi4+0x24a>
 8000af6:	19e7      	adds	r7, r4, r7
 8000af8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afc:	d22e      	bcs.n	8000b5c <__udivmoddi4+0x2a0>
 8000afe:	45b8      	cmp	r8, r7
 8000b00:	d92c      	bls.n	8000b5c <__udivmoddi4+0x2a0>
 8000b02:	3802      	subs	r0, #2
 8000b04:	4427      	add	r7, r4
 8000b06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b0a:	eba7 0708 	sub.w	r7, r7, r8
 8000b0e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b12:	454f      	cmp	r7, r9
 8000b14:	46c6      	mov	lr, r8
 8000b16:	4649      	mov	r1, r9
 8000b18:	d31a      	bcc.n	8000b50 <__udivmoddi4+0x294>
 8000b1a:	d017      	beq.n	8000b4c <__udivmoddi4+0x290>
 8000b1c:	b15d      	cbz	r5, 8000b36 <__udivmoddi4+0x27a>
 8000b1e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b22:	eb67 0701 	sbc.w	r7, r7, r1
 8000b26:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b2a:	40f2      	lsrs	r2, r6
 8000b2c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b30:	40f7      	lsrs	r7, r6
 8000b32:	e9c5 2700 	strd	r2, r7, [r5]
 8000b36:	2600      	movs	r6, #0
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e70b      	b.n	800095c <__udivmoddi4+0xa0>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e9      	b.n	800091c <__udivmoddi4+0x60>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6fd      	b.n	8000948 <__udivmoddi4+0x8c>
 8000b4c:	4543      	cmp	r3, r8
 8000b4e:	d2e5      	bcs.n	8000b1c <__udivmoddi4+0x260>
 8000b50:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b54:	eb69 0104 	sbc.w	r1, r9, r4
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7df      	b.n	8000b1c <__udivmoddi4+0x260>
 8000b5c:	4608      	mov	r0, r1
 8000b5e:	e7d2      	b.n	8000b06 <__udivmoddi4+0x24a>
 8000b60:	4660      	mov	r0, ip
 8000b62:	e78d      	b.n	8000a80 <__udivmoddi4+0x1c4>
 8000b64:	4681      	mov	r9, r0
 8000b66:	e7b9      	b.n	8000adc <__udivmoddi4+0x220>
 8000b68:	4666      	mov	r6, ip
 8000b6a:	e775      	b.n	8000a58 <__udivmoddi4+0x19c>
 8000b6c:	4630      	mov	r0, r6
 8000b6e:	e74a      	b.n	8000a06 <__udivmoddi4+0x14a>
 8000b70:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b74:	4439      	add	r1, r7
 8000b76:	e713      	b.n	80009a0 <__udivmoddi4+0xe4>
 8000b78:	3802      	subs	r0, #2
 8000b7a:	443c      	add	r4, r7
 8000b7c:	e724      	b.n	80009c8 <__udivmoddi4+0x10c>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_idiv0>:
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__USAT>:

#include "ai.h"


uint32_t __USAT(int32_t val, uint32_t sat)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  if (sat <= 31U)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	2b1f      	cmp	r3, #31
 8000b92:	d810      	bhi.n	8000bb6 <__USAT+0x32>
  {
    const uint32_t max = ((1U << sat) - 1U);
 8000b94:	2201      	movs	r2, #1
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
    if (val > (int32_t)max)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dd01      	ble.n	8000bac <__USAT+0x28>
    {
      return max;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	e005      	b.n	8000bb8 <__USAT+0x34>
    }
    else if (val < 0)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	da01      	bge.n	8000bb6 <__USAT+0x32>
    {
      return 0U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e000      	b.n	8000bb8 <__USAT+0x34>
    }
  }
  return (uint32_t)val;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <__SSAD>:
int32_t __SSAD(int32_t val, uint32_t sat)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  if ((sat >= 1U) && (sat <= 32U))
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d018      	beq.n	8000c06 <__SSAD+0x42>
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	2b20      	cmp	r3, #32
 8000bd8:	d815      	bhi.n	8000c06 <__SSAD+0x42>
  {
    const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2201      	movs	r2, #1
 8000be0:	fa02 f303 	lsl.w	r3, r2, r3
 8000be4:	3b01      	subs	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
    const int32_t min = -1 - max ;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	60bb      	str	r3, [r7, #8]
    if (val > max)
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dd01      	ble.n	8000bfa <__SSAD+0x36>
    {
      return max;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	e006      	b.n	8000c08 <__SSAD+0x44>
    }
    else if (val < min)
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	da01      	bge.n	8000c06 <__SSAD+0x42>
    {
      return min;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	e000      	b.n	8000c08 <__SSAD+0x44>
    }
  }
  return val;
 8000c06:	687b      	ldr	r3, [r7, #4]
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <arm_convolve_HWC_q7_basic>:
                                     const uint16_t out_shift,
                                     q7_t *Im_out,
                                     const uint16_t dim_im_out,
                                     q15_t *bufferA,
                                     q7_t *bufferB)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08e      	sub	sp, #56	; 0x38
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	817b      	strh	r3, [r7, #10]
 8000c22:	4613      	mov	r3, r2
 8000c24:	813b      	strh	r3, [r7, #8]

    int i, j, k, l, m, n;
    int conv_out;
    int in_row, in_col;

    for (i = 0; i < ch_im_out; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
 8000c2a:	e0c1      	b.n	8000db0 <arm_convolve_HWC_q7_basic+0x19c>
    {
        for (j = 0; j < dim_im_out; j++)
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c30:	e0b5      	b.n	8000d9e <arm_convolve_HWC_q7_basic+0x18a>
        {
            for (k = 0; k < dim_im_out; k++)
 8000c32:	2300      	movs	r3, #0
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c36:	e0a9      	b.n	8000d8c <arm_convolve_HWC_q7_basic+0x178>
            {
                conv_out = ((q31_t)bias[i] << bias_shift) + NN_ROUND(out_shift);
 8000c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f993 3000 	ldrsb.w	r3, [r3]
 8000c42:	461a      	mov	r2, r3
 8000c44:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000c52:	2201      	movs	r2, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	085b      	lsrs	r3, r3, #1
 8000c5a:	440b      	add	r3, r1
 8000c5c:	61fb      	str	r3, [r7, #28]
                for (m = 0; m < dim_kernel; m++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
 8000c62:	e06f      	b.n	8000d44 <arm_convolve_HWC_q7_basic+0x130>
                {
                    for (n = 0; n < dim_kernel; n++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
 8000c68:	e064      	b.n	8000d34 <arm_convolve_HWC_q7_basic+0x120>
                    {
                        // if-for implementation
                        in_row = stride * j + m - padding;
 8000c6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c70:	fb02 f203 	mul.w	r2, r2, r3
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	441a      	add	r2, r3
 8000c78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	61bb      	str	r3, [r7, #24]
                        in_col = stride * k + n - padding;
 8000c80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c86:	fb02 f203 	mul.w	r2, r2, r3
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	441a      	add	r2, r3
 8000c8e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8000c92:	1ad3      	subs	r3, r2, r3
 8000c94:	617b      	str	r3, [r7, #20]
                        if (in_row >= 0 && in_col >= 0 && in_row < dim_im_in && in_col < dim_im_in)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db48      	blt.n	8000d2e <arm_convolve_HWC_q7_basic+0x11a>
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db45      	blt.n	8000d2e <arm_convolve_HWC_q7_basic+0x11a>
 8000ca2:	897b      	ldrh	r3, [r7, #10]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	da41      	bge.n	8000d2e <arm_convolve_HWC_q7_basic+0x11a>
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	da3d      	bge.n	8000d2e <arm_convolve_HWC_q7_basic+0x11a>
                        {
                            for (l = 0; l < ch_im_in; l++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cb6:	e036      	b.n	8000d26 <arm_convolve_HWC_q7_basic+0x112>
                            {
                                conv_out += Im_in[(in_row * dim_im_in + in_col) * ch_im_in + l] *
 8000cb8:	897b      	ldrh	r3, [r7, #10]
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	fb02 f203 	mul.w	r2, r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	893a      	ldrh	r2, [r7, #8]
 8000cc6:	fb02 f203 	mul.w	r2, r2, r3
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	4413      	add	r3, r2
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8000cd8:	4618      	mov	r0, r3
                                    wt[i * ch_im_in * dim_kernel * dim_kernel + (m * dim_kernel + n) * ch_im_in + l];
 8000cda:	893b      	ldrh	r3, [r7, #8]
 8000cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cde:	fb02 f303 	mul.w	r3, r2, r3
 8000ce2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8000cee:	fb02 f203 	mul.w	r2, r2, r3
 8000cf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000cf8:	fb01 f103 	mul.w	r1, r1, r3
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	440b      	add	r3, r1
 8000d00:	8939      	ldrh	r1, [r7, #8]
 8000d02:	fb01 f303 	mul.w	r3, r1, r3
 8000d06:	441a      	add	r2, r3
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	4413      	add	r3, r2
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	f993 3000 	ldrsb.w	r3, [r3]
                                conv_out += Im_in[(in_row * dim_im_in + in_col) * ch_im_in + l] *
 8000d16:	fb03 f300 	mul.w	r3, r3, r0
 8000d1a:	69fa      	ldr	r2, [r7, #28]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	61fb      	str	r3, [r7, #28]
                            for (l = 0; l < ch_im_in; l++)
 8000d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d22:	3301      	adds	r3, #1
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d26:	893b      	ldrh	r3, [r7, #8]
 8000d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	dbc4      	blt.n	8000cb8 <arm_convolve_HWC_q7_basic+0xa4>
                    for (n = 0; n < dim_kernel; n++)
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	3301      	adds	r3, #1
 8000d32:	623b      	str	r3, [r7, #32]
 8000d34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d38:	6a3a      	ldr	r2, [r7, #32]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	db95      	blt.n	8000c6a <arm_convolve_HWC_q7_basic+0x56>
                for (m = 0; m < dim_kernel; m++)
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
 8000d44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	db8a      	blt.n	8000c64 <arm_convolve_HWC_q7_basic+0x50>
                            }
                        }
                    }
                }
                Im_out[i + (j * dim_im_out + k) * ch_im_out] = (q7_t)__SSAD((conv_out >> out_shift), 8);
 8000d4e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000d52:	69fa      	ldr	r2, [r7, #28]
 8000d54:	fa42 f303 	asr.w	r3, r2, r3
 8000d58:	2108      	movs	r1, #8
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff32 	bl	8000bc4 <__SSAD>
 8000d60:	4601      	mov	r1, r0
 8000d62:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d68:	fb02 f203 	mul.w	r2, r2, r3
 8000d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6e:	4413      	add	r3, r2
 8000d70:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000d74:	fb02 f203 	mul.w	r2, r2, r3
 8000d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7a:	4413      	add	r3, r2
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d80:	4413      	add	r3, r2
 8000d82:	b24a      	sxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
            for (k = 0; k < dim_im_out; k++)
 8000d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d88:	3301      	adds	r3, #1
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d8c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d92:	429a      	cmp	r2, r3
 8000d94:	f6ff af50 	blt.w	8000c38 <arm_convolve_HWC_q7_basic+0x24>
        for (j = 0; j < dim_im_out; j++)
 8000d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d9e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8000da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da4:	429a      	cmp	r2, r3
 8000da6:	f6ff af44 	blt.w	8000c32 <arm_convolve_HWC_q7_basic+0x1e>
    for (i = 0; i < ch_im_out; i++)
 8000daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dac:	3301      	adds	r3, #1
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
 8000db0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000db4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000db6:	429a      	cmp	r2, r3
 8000db8:	f6ff af38 	blt.w	8000c2c <arm_convolve_HWC_q7_basic+0x18>
        }
    }


    /* Return to application */
    return ARM_MATH_SUCCESS;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3738      	adds	r7, #56	; 0x38
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <arm_relu_q7>:

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
void arm_relu_q7(q7_t *data, uint16_t size)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b085      	sub	sp, #20
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
 8000dce:	460b      	mov	r3, r1
 8000dd0:	807b      	strh	r3, [r7, #2]

    uint16_t i;

    for (i = 0; i < size; i++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	81fb      	strh	r3, [r7, #14]
 8000dd6:	e00e      	b.n	8000df6 <arm_relu_q7+0x30>
    {
        if (data[i] < 0)
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	f993 3000 	ldrsb.w	r3, [r3]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	da04      	bge.n	8000df0 <arm_relu_q7+0x2a>
            data[i] = 0;
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	4413      	add	r3, r2
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	3301      	adds	r3, #1
 8000df4:	81fb      	strh	r3, [r7, #14]
 8000df6:	89fa      	ldrh	r2, [r7, #14]
 8000df8:	887b      	ldrh	r3, [r7, #2]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d3ec      	bcc.n	8000dd8 <arm_relu_q7+0x12>
    }


}
 8000dfe:	bf00      	nop
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <arm_maxpool_q7_HWC>:
                        const uint16_t padding,
                        const uint16_t stride,
                        const uint16_t dim_im_out,
                        q7_t *bufferA,
                        q7_t *Im_out)
{
 8000e0c:	b490      	push	{r4, r7}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	4608      	mov	r0, r1
 8000e16:	4611      	mov	r1, r2
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	817b      	strh	r3, [r7, #10]
 8000e1e:	460b      	mov	r3, r1
 8000e20:	813b      	strh	r3, [r7, #8]
 8000e22:	4613      	mov	r3, r2
 8000e24:	80fb      	strh	r3, [r7, #6]
    (void)bufferA;

    int16_t i_ch_in, i_x, i_y;
    int16_t k_x, k_y;

    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	83fb      	strh	r3, [r7, #30]
 8000e2a:	e0b1      	b.n	8000f90 <arm_maxpool_q7_HWC+0x184>
    {
        for (i_y = 0; i_y < dim_im_out; i_y++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	837b      	strh	r3, [r7, #26]
 8000e30:	e0a2      	b.n	8000f78 <arm_maxpool_q7_HWC+0x16c>
        {
            for (i_x = 0; i_x < dim_im_out; i_x++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	83bb      	strh	r3, [r7, #28]
 8000e36:	e093      	b.n	8000f60 <arm_maxpool_q7_HWC+0x154>
            {
                int max = -129;
 8000e38:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8000e3c:	613b      	str	r3, [r7, #16]
                for (k_y = i_y * stride - padding; k_y < i_y * stride - padding + dim_kernel; k_y++)
 8000e3e:	8b7b      	ldrh	r3, [r7, #26]
 8000e40:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e42:	fb12 f303 	smulbb	r3, r2, r3
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	82fb      	strh	r3, [r7, #22]
 8000e50:	e05f      	b.n	8000f12 <arm_maxpool_q7_HWC+0x106>
                {
                    for (k_x = i_x * stride - padding; k_x < i_x * stride - padding + dim_kernel; k_x++)
 8000e52:	8bbb      	ldrh	r3, [r7, #28]
 8000e54:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000e56:	fb12 f303 	smulbb	r3, r2, r3
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	833b      	strh	r3, [r7, #24]
 8000e64:	e042      	b.n	8000eec <arm_maxpool_q7_HWC+0xe0>
                    {
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in && k_x < dim_im_in)
 8000e66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db38      	blt.n	8000ee0 <arm_maxpool_q7_HWC+0xd4>
 8000e6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	db34      	blt.n	8000ee0 <arm_maxpool_q7_HWC+0xd4>
 8000e76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e7a:	897b      	ldrh	r3, [r7, #10]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	da2f      	bge.n	8000ee0 <arm_maxpool_q7_HWC+0xd4>
 8000e80:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e84:	897b      	ldrh	r3, [r7, #10]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	da2a      	bge.n	8000ee0 <arm_maxpool_q7_HWC+0xd4>
                        {
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in)] > max)
 8000e8a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000e8e:	893b      	ldrh	r3, [r7, #8]
 8000e90:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000e94:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8000e98:	897c      	ldrh	r4, [r7, #10]
 8000e9a:	fb04 f101 	mul.w	r1, r4, r1
 8000e9e:	4401      	add	r1, r0
 8000ea0:	fb01 f303 	mul.w	r3, r1, r3
 8000ea4:	4413      	add	r3, r2
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4413      	add	r3, r2
 8000eac:	f993 3000 	ldrsb.w	r3, [r3]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	da13      	bge.n	8000ee0 <arm_maxpool_q7_HWC+0xd4>
                            {
                                max = Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in)];
 8000eb8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000ebc:	893b      	ldrh	r3, [r7, #8]
 8000ebe:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8000ec2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8000ec6:	897c      	ldrh	r4, [r7, #10]
 8000ec8:	fb04 f101 	mul.w	r1, r4, r1
 8000ecc:	4401      	add	r1, r0
 8000ece:	fb01 f303 	mul.w	r3, r1, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	f993 3000 	ldrsb.w	r3, [r3]
 8000ede:	613b      	str	r3, [r7, #16]
                    for (k_x = i_x * stride - padding; k_x < i_x * stride - padding + dim_kernel; k_x++)
 8000ee0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	833b      	strh	r3, [r7, #24]
 8000eec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000ef0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000ef4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000ef6:	fb01 f103 	mul.w	r1, r1, r3
 8000efa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000efc:	1ac9      	subs	r1, r1, r3
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	440b      	add	r3, r1
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbaf      	blt.n	8000e66 <arm_maxpool_q7_HWC+0x5a>
                for (k_y = i_y * stride - padding; k_y < i_y * stride - padding + dim_kernel; k_y++)
 8000f06:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	82fb      	strh	r3, [r7, #22]
 8000f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000f16:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f1a:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8000f1c:	fb01 f103 	mul.w	r1, r1, r3
 8000f20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	440b      	add	r3, r1
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	db92      	blt.n	8000e52 <arm_maxpool_q7_HWC+0x46>
                            }
                        }
                    }
                }
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out)] = max;
 8000f2c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000f30:	893b      	ldrh	r3, [r7, #8]
 8000f32:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8000f36:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8000f3a:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8000f3c:	fb04 f101 	mul.w	r1, r4, r1
 8000f40:	4401      	add	r1, r0
 8000f42:	fb01 f303 	mul.w	r3, r1, r3
 8000f46:	4413      	add	r3, r2
 8000f48:	461a      	mov	r2, r3
 8000f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	b252      	sxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
            for (i_x = 0; i_x < dim_im_out; i_x++)
 8000f54:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	83bb      	strh	r3, [r7, #28]
 8000f60:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8000f64:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f66:	429a      	cmp	r2, r3
 8000f68:	f6ff af66 	blt.w	8000e38 <arm_maxpool_q7_HWC+0x2c>
        for (i_y = 0; i_y < dim_im_out; i_y++)
 8000f6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	3301      	adds	r3, #1
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	837b      	strh	r3, [r7, #26]
 8000f78:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8000f7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	f6ff af57 	blt.w	8000e32 <arm_maxpool_q7_HWC+0x26>
    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 8000f84:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	83fb      	strh	r3, [r7, #30]
 8000f90:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8000f94:	893b      	ldrh	r3, [r7, #8]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	f6ff af48 	blt.w	8000e2c <arm_maxpool_q7_HWC+0x20>
            }
        }
    }

}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc90      	pop	{r4, r7}
 8000fa6:	4770      	bx	lr

08000fa8 <arm_fully_connected_q7>:
                                  const uint16_t bias_shift,
                                  const uint16_t out_shift,
                                  const q7_t *bias,
                                  q7_t *pOut,
                                  q15_t *vec_buffer)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	80bb      	strh	r3, [r7, #4]
    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    (void)vec_buffer;
    int i, j;

    /* Run the following code as reference implementation for Cortex-M0 and Cortex-M3 */
    for (i = 0; i < num_of_rows; i++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	e041      	b.n	8001048 <arm_fully_connected_q7+0xa0>
    {
        int ip_out = ((q31_t)(bias[i]) << bias_shift) + NN_ROUND(out_shift);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fc8:	4413      	add	r3, r2
 8000fca:	f993 3000 	ldrsb.w	r3, [r3]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000fda:	2201      	movs	r2, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	440b      	add	r3, r1
 8000fe4:	617b      	str	r3, [r7, #20]
        for (j = 0; j < dim_vec; j++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	e018      	b.n	800101e <arm_fully_connected_q7+0x76>
        {
            ip_out += pV[j] * pM[i * dim_vec + j];
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	68fa      	ldr	r2, [r7, #12]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f993 3000 	ldrsb.w	r3, [r3]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	fb02 f203 	mul.w	r2, r2, r3
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	4413      	add	r3, r2
 8001004:	461a      	mov	r2, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	f993 3000 	ldrsb.w	r3, [r3]
 800100e:	fb03 f301 	mul.w	r3, r3, r1
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
        for (j = 0; j < dim_vec; j++)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	3301      	adds	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	429a      	cmp	r2, r3
 8001024:	dbe2      	blt.n	8000fec <arm_fully_connected_q7+0x44>
        }
        pOut[i] = (q7_t)__SSAD((ip_out >> out_shift), 8);
 8001026:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	fa42 f303 	asr.w	r3, r2, r3
 800102e:	2108      	movs	r1, #8
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fdc7 	bl	8000bc4 <__SSAD>
 8001036:	4601      	mov	r1, r0
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103c:	4413      	add	r3, r2
 800103e:	b24a      	sxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_of_rows; i++)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3301      	adds	r3, #1
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbb9      	blt.n	8000fc4 <arm_fully_connected_q7+0x1c>
    }

    /* Return to ARM_MATH_SUCCESS */
    return (ARM_MATH_SUCCESS);
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3720      	adds	r7, #32
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <arm_softmax_q7>:



void arm_softmax_q7(const q7_t *vec_in, const uint16_t dim_vec, q7_t *p_out)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b088      	sub	sp, #32
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	460b      	mov	r3, r1
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	817b      	strh	r3, [r7, #10]
    q31_t sum;
    int16_t i;
    uint8_t shift;
    q15_t base;
    base = -128;
 8001068:	f64f 7380 	movw	r3, #65408	; 0xff80
 800106c:	833b      	strh	r3, [r7, #24]

    /* We first search for the maximum */
    for (i = 0; i < dim_vec; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	837b      	strh	r3, [r7, #26]
 8001072:	e017      	b.n	80010a4 <arm_softmax_q7+0x4a>
    {
        if (vec_in[i] > base)
 8001074:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	4413      	add	r3, r2
 800107c:	f993 3000 	ldrsb.w	r3, [r3]
 8001080:	b21b      	sxth	r3, r3
 8001082:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	da06      	bge.n	8001098 <arm_softmax_q7+0x3e>
        {
            base = vec_in[i];
 800108a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	f993 3000 	ldrsb.w	r3, [r3]
 8001096:	833b      	strh	r3, [r7, #24]
    for (i = 0; i < dim_vec; i++)
 8001098:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800109c:	b29b      	uxth	r3, r3
 800109e:	3301      	adds	r3, #1
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	837b      	strh	r3, [r7, #26]
 80010a4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80010a8:	897b      	ldrh	r3, [r7, #10]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbe2      	blt.n	8001074 <arm_softmax_q7+0x1a>
    /*
     * So the base is set to max-8, meaning
     * that we ignore really small values.
     * anyway, they will be 0 after shrinking to q7_t.
     */
    base = base - (1 << 3);
 80010ae:	8b3b      	ldrh	r3, [r7, #24]
 80010b0:	3b08      	subs	r3, #8
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	833b      	strh	r3, [r7, #24]

    sum = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]

    for (i = 0; i < dim_vec; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	837b      	strh	r3, [r7, #26]
 80010be:	e01c      	b.n	80010fa <arm_softmax_q7+0xa0>
    {
        shift = (uint8_t)__USAT(vec_in[i] - base, 3);
 80010c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	f993 3000 	ldrsb.w	r3, [r3]
 80010cc:	461a      	mov	r2, r3
 80010ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2103      	movs	r1, #3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fd54 	bl	8000b84 <__USAT>
 80010dc:	4603      	mov	r3, r0
 80010de:	74fb      	strb	r3, [r7, #19]
        sum += 0x1 << shift;
 80010e0:	7cfb      	ldrb	r3, [r7, #19]
 80010e2:	2201      	movs	r2, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69fa      	ldr	r2, [r7, #28]
 80010ea:	4413      	add	r3, r2
 80010ec:	61fb      	str	r3, [r7, #28]
    for (i = 0; i < dim_vec; i++)
 80010ee:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	837b      	strh	r3, [r7, #26]
 80010fa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80010fe:	897b      	ldrh	r3, [r7, #10]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbdd      	blt.n	80010c0 <arm_softmax_q7+0x66>
    }

    /* This is effectively (0x1 << 20) / sum */
    int output_base = (1 << 20) / sum;
 8001104:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	fb92 f3f3 	sdiv	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]

    for (i = 0; i < dim_vec; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	837b      	strh	r3, [r7, #26]
 8001114:	e024      	b.n	8001160 <arm_softmax_q7+0x106>
    {

        /* Here minimum value of 13+base-vec_in[i] will be 5 */
        shift = (uint8_t)__USAT(13 + base - vec_in[i], 5);
 8001116:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800111a:	330d      	adds	r3, #13
 800111c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001120:	68f9      	ldr	r1, [r7, #12]
 8001122:	440a      	add	r2, r1
 8001124:	f992 2000 	ldrsb.w	r2, [r2]
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	2105      	movs	r1, #5
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fd29 	bl	8000b84 <__USAT>
 8001132:	4603      	mov	r3, r0
 8001134:	74fb      	strb	r3, [r7, #19]
        p_out[i] = (q7_t)__SSAD((output_base >> shift), 8);
 8001136:	7cfb      	ldrb	r3, [r7, #19]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	fa42 f303 	asr.w	r3, r2, r3
 800113e:	2108      	movs	r1, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fd3f 	bl	8000bc4 <__SSAD>
 8001146:	4601      	mov	r1, r0
 8001148:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	4413      	add	r3, r2
 8001150:	b24a      	sxtb	r2, r1
 8001152:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < dim_vec; i++)
 8001154:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001158:	b29b      	uxth	r3, r3
 800115a:	3301      	adds	r3, #1
 800115c:	b29b      	uxth	r3, r3
 800115e:	837b      	strh	r3, [r7, #26]
 8001160:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001164:	897b      	ldrh	r3, [r7, #10]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbd5      	blt.n	8001116 <arm_softmax_q7+0xbc>
    }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001178:	f000 fe70 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f822 	bl	80011c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f000 fba2 	bl	80018c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001184:	f000 fb46 	bl	8001814 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001188:	f000 fb6e 	bl	8001868 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800118c:	f000 faf6 	bl	800177c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001190:	4808      	ldr	r0, [pc, #32]	; (80011b4 <main+0x40>)
 8001192:	f002 faef 	bl	8003774 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);
 8001196:	2201      	movs	r2, #1
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <main+0x44>)
 800119a:	4808      	ldr	r0, [pc, #32]	; (80011bc <main+0x48>)
 800119c:	f002 fffb 	bl	8004196 <HAL_UART_Receive_IT>
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
     if(run_flag==1)
 80011a0:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <main+0x4c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d1fb      	bne.n	80011a0 <main+0x2c>
	    {
	 	   run_flag=0;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <main+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
	 	   AI_run();
 80011ae:	f000 f8af 	bl	8001310 <AI_run>
     if(run_flag==1)
 80011b2:	e7f5      	b.n	80011a0 <main+0x2c>
 80011b4:	2000acd4 	.word	0x2000acd4
 80011b8:	2000acd0 	.word	0x2000acd0
 80011bc:	200085c4 	.word	0x200085c4
 80011c0:	20000a9c 	.word	0x20000a9c

080011c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0aa      	sub	sp, #168	; 0xa8
 80011c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ca:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011ce:	2234      	movs	r2, #52	; 0x34
 80011d0:	2100      	movs	r1, #0
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 f9dc 	bl	8005590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f107 0308 	add.w	r3, r7, #8
 80011ec:	2258      	movs	r2, #88	; 0x58
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 f9cd 	bl	8005590 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b34      	ldr	r3, [pc, #208]	; (80012cc <SystemClock_Config+0x108>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a33      	ldr	r2, [pc, #204]	; (80012cc <SystemClock_Config+0x108>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <SystemClock_Config+0x108>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <SystemClock_Config+0x10c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a2d      	ldr	r2, [pc, #180]	; (80012d0 <SystemClock_Config+0x10c>)
 800121c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <SystemClock_Config+0x10c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122e:	2301      	movs	r3, #1
 8001230:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001232:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001236:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001238:	2302      	movs	r3, #2
 800123a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800123e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001246:	2308      	movs	r3, #8
 8001248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 384;
 800124c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001250:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001254:	2304      	movs	r3, #4
 8001256:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800125a:	2308      	movs	r3, #8
 800125c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001266:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800126a:	4618      	mov	r0, r3
 800126c:	f001 ffae 	bl	80031cc <HAL_RCC_OscConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001276:	f000 fbd5 	bl	8001a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127a:	230f      	movs	r3, #15
 800127c:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127e:	2302      	movs	r3, #2
 8001280:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001290:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001294:	2103      	movs	r1, #3
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fb10 	bl	80028bc <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80012a2:	f000 fbbf 	bl	8001a24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80012a6:	2320      	movs	r3, #32
 80012a8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80012aa:	2300      	movs	r3, #0
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 fcfe 	bl	8002cb4 <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80012be:	f000 fbb1 	bl	8001a24 <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	37a8      	adds	r7, #168	; 0xa8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40007000 	.word	0x40007000

080012d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	 
	  
	  tim_ms++;
 80012dc:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012e4:	6013      	str	r3, [r2, #0]
	  if(tim_ms>10000000)
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	dd02      	ble.n	80012f6 <HAL_TIM_PeriodElapsedCallback+0x22>
			tim_ms=0;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000aa0 	.word	0x20000aa0
 8001308:	00989680 	.word	0x00989680
 800130c:	00000000 	.word	0x00000000

08001310 <AI_run>:

void AI_run()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0a2      	sub	sp, #136	; 0x88
 8001314:	af0c      	add	r7, sp, #48	; 0x30
	 double time1;
	 double time2;
	 double time3;
	 double time4;

	q7_t     *img_buffer1 = scratch_buffer;
 8001316:	4ba4      	ldr	r3, [pc, #656]	; (80015a8 <AI_run+0x298>)
 8001318:	643b      	str	r3, [r7, #64]	; 0x40
  q7_t     *img_buffer2 = img_buffer1 + CONV_OUT_CH_0 * CONV_OUT_DIM_0 * CONV_OUT_DIM_0;//+ CONV1_OUT_CH * CONV1_OUT_DIM * CONV1_OUT_DIMΪ�����������������Ĳ���
 800131a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800131c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
  q7_t     *temp_po;
  for (int i=0;i<28*28*1; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	657b      	str	r3, [r7, #84]	; 0x54
 8001326:	e00b      	b.n	8001340 <AI_run+0x30>
	{
    img_buffer2[i] =(q7_t)Image_array[i];//��һ������� Ӧ���������������
 8001328:	4aa0      	ldr	r2, [pc, #640]	; (80015ac <AI_run+0x29c>)
 800132a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132c:	4413      	add	r3, r2
 800132e:	7819      	ldrb	r1, [r3, #0]
 8001330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001334:	4413      	add	r3, r2
 8001336:	b24a      	sxtb	r2, r1
 8001338:	701a      	strb	r2, [r3, #0]
  for (int i=0;i<28*28*1; i++)
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	3301      	adds	r3, #1
 800133e:	657b      	str	r3, [r7, #84]	; 0x54
 8001340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001342:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8001346:	dbef      	blt.n	8001328 <AI_run+0x18>
  }
   ALL_timecnt = tim_ms;
 8001348:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <AI_run+0x2a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38

	 	arm_convolve_HWC_q7_basic(img_buffer2,
 800134e:	2300      	movs	r3, #0
 8001350:	930a      	str	r3, [sp, #40]	; 0x28
 8001352:	4b98      	ldr	r3, [pc, #608]	; (80015b4 <AI_run+0x2a4>)
 8001354:	9309      	str	r3, [sp, #36]	; 0x24
 8001356:	2318      	movs	r3, #24
 8001358:	9308      	str	r3, [sp, #32]
 800135a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800135c:	9307      	str	r3, [sp, #28]
 800135e:	2308      	movs	r3, #8
 8001360:	9306      	str	r3, [sp, #24]
 8001362:	2307      	movs	r3, #7
 8001364:	9305      	str	r3, [sp, #20]
 8001366:	4b94      	ldr	r3, [pc, #592]	; (80015b8 <AI_run+0x2a8>)
 8001368:	9304      	str	r3, [sp, #16]
 800136a:	2301      	movs	r3, #1
 800136c:	9303      	str	r3, [sp, #12]
 800136e:	2300      	movs	r3, #0
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2305      	movs	r3, #5
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2308      	movs	r3, #8
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4b90      	ldr	r3, [pc, #576]	; (80015bc <AI_run+0x2ac>)
 800137c:	2201      	movs	r2, #1
 800137e:	211c      	movs	r1, #28
 8001380:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001382:	f7ff fc47 	bl	8000c14 <arm_convolve_HWC_q7_basic>
													CONV_BIAS_LSHIFT_0, CONV_OUT_RSHIFT_0,
													img_buffer1,
													CONV_OUT_DIM_0,
                          (q15_t *) col_buffer, NULL);

	 arm_relu_q7(img_buffer1, CONV_OUT_DIM_0 * CONV_OUT_DIM_0 * CONV_OUT_CH_0);
 8001386:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800138a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800138c:	f7ff fd1b 	bl	8000dc6 <arm_relu_q7>
	   timecnt1 = tim_ms;
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <AI_run+0x2a0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	637b      	str	r3, [r7, #52]	; 0x34

	 arm_maxpool_q7_HWC(img_buffer1, CONV_OUT_DIM_0, CONV_OUT_CH_0, POOL_KER_DIM_1,
 8001396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001398:	9304      	str	r3, [sp, #16]
 800139a:	2300      	movs	r3, #0
 800139c:	9303      	str	r3, [sp, #12]
 800139e:	230c      	movs	r3, #12
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2302      	movs	r3, #2
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	2300      	movs	r3, #0
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2302      	movs	r3, #2
 80013ac:	2208      	movs	r2, #8
 80013ae:	2118      	movs	r1, #24
 80013b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013b2:	f7ff fd2b 	bl	8000e0c <arm_maxpool_q7_HWC>
                     POOL_PADDING_1, POOL_STRIDE_1, POOL_OUT_DIM_1, NULL, img_buffer2);

   timecnt2 = tim_ms;
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <AI_run+0x2a0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	633b      	str	r3, [r7, #48]	; 0x30

	 arm_convolve_HWC_q7_basic(img_buffer2, CONV_IM_DIM_2, CONV_IM_CH_2, conv2_wt, CONV_OUT_CH_2, CONV_KER_DIM_2,
 80013bc:	2300      	movs	r3, #0
 80013be:	930a      	str	r3, [sp, #40]	; 0x28
 80013c0:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <AI_run+0x2a4>)
 80013c2:	9309      	str	r3, [sp, #36]	; 0x24
 80013c4:	2308      	movs	r3, #8
 80013c6:	9308      	str	r3, [sp, #32]
 80013c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ca:	9307      	str	r3, [sp, #28]
 80013cc:	2309      	movs	r3, #9
 80013ce:	9306      	str	r3, [sp, #24]
 80013d0:	2304      	movs	r3, #4
 80013d2:	9305      	str	r3, [sp, #20]
 80013d4:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <AI_run+0x2b0>)
 80013d6:	9304      	str	r3, [sp, #16]
 80013d8:	2301      	movs	r3, #1
 80013da:	9303      	str	r3, [sp, #12]
 80013dc:	2300      	movs	r3, #0
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2305      	movs	r3, #5
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	2308      	movs	r3, #8
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4b76      	ldr	r3, [pc, #472]	; (80015c4 <AI_run+0x2b4>)
 80013ea:	2208      	movs	r2, #8
 80013ec:	210c      	movs	r1, #12
 80013ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f0:	f7ff fc10 	bl	8000c14 <arm_convolve_HWC_q7_basic>
                           CONV_PADDING_2, CONV_STRIDE_2, conv2_bias, CONV_BIAS_LSHIFT_2 ,CONV_OUT_RSHIFT_2, img_buffer1,
                           CONV_OUT_DIM_2, (q15_t *) col_buffer, NULL);
													 
												 
	  arm_relu_q7(img_buffer1, CONV_OUT_DIM_2 * CONV_OUT_DIM_2 * CONV_OUT_CH_2);
 80013f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80013fa:	f7ff fce4 	bl	8000dc6 <arm_relu_q7>
	  timecnt3 = tim_ms;
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <AI_run+0x2a0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c

		arm_maxpool_q7_HWC(img_buffer1, CONV_OUT_DIM_2, CONV_OUT_CH_2, POOL_KER_DIM_3,
 8001404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001406:	9304      	str	r3, [sp, #16]
 8001408:	2300      	movs	r3, #0
 800140a:	9303      	str	r3, [sp, #12]
 800140c:	2304      	movs	r3, #4
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	2302      	movs	r3, #2
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2300      	movs	r3, #0
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2302      	movs	r3, #2
 800141a:	2208      	movs	r2, #8
 800141c:	2108      	movs	r1, #8
 800141e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001420:	f7ff fcf4 	bl	8000e0c <arm_maxpool_q7_HWC>
                     POOL_PADDING_3, POOL_STRIDE_3, POOL_OUT_DIM_3, NULL, img_buffer2);
timecnt4= tim_ms;
 8001424:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <AI_run+0x2a0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  arm_fully_connected_q7(img_buffer2, ip1_wt, IP1_DIM_4, IP1_OUT_4, Dense_BIAS_LSHIFT_4, Dense_OUT_RSHIFT_4, ip1_bias,
 800142a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800142c:	9304      	str	r3, [sp, #16]
 800142e:	4b66      	ldr	r3, [pc, #408]	; (80015c8 <AI_run+0x2b8>)
 8001430:	9303      	str	r3, [sp, #12]
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <AI_run+0x2bc>)
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2307      	movs	r3, #7
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2303      	movs	r3, #3
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	230a      	movs	r3, #10
 8001440:	2280      	movs	r2, #128	; 0x80
 8001442:	4963      	ldr	r1, [pc, #396]	; (80015d0 <AI_run+0x2c0>)
 8001444:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001446:	f7ff fdaf 	bl	8000fa8 <arm_fully_connected_q7>
                             output_data, (q15_t *) img_buffer1);

  arm_softmax_q7(output_data, 10, output_data);
 800144a:	4a5f      	ldr	r2, [pc, #380]	; (80015c8 <AI_run+0x2b8>)
 800144c:	210a      	movs	r1, #10
 800144e:	485e      	ldr	r0, [pc, #376]	; (80015c8 <AI_run+0x2b8>)
 8001450:	f7ff fe03 	bl	800105a <arm_softmax_q7>
  timecnt5= tim_ms;
 8001454:	4b56      	ldr	r3, [pc, #344]	; (80015b0 <AI_run+0x2a0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 0; i < 10; i++)
 800145a:	2300      	movs	r3, #0
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
 800145e:	e00c      	b.n	800147a <AI_run+0x16a>
		{
			printf("%d: %d\r\n", i, output_data[i]);
 8001460:	4a59      	ldr	r2, [pc, #356]	; (80015c8 <AI_run+0x2b8>)
 8001462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001464:	4413      	add	r3, r2
 8001466:	f993 3000 	ldrsb.w	r3, [r3]
 800146a:	461a      	mov	r2, r3
 800146c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800146e:	4859      	ldr	r0, [pc, #356]	; (80015d4 <AI_run+0x2c4>)
 8001470:	f004 f896 	bl	80055a0 <iprintf>
	for (int i = 0; i < 10; i++)
 8001474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001476:	3301      	adds	r3, #1
 8001478:	653b      	str	r3, [r7, #80]	; 0x50
 800147a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800147c:	2b09      	cmp	r3, #9
 800147e:	ddef      	ble.n	8001460 <AI_run+0x150>
		}
int max_temp=0;
 8001480:	2300      	movs	r3, #0
 8001482:	64fb      	str	r3, [r7, #76]	; 0x4c
  int lable=0;                             
 8001484:	2300      	movs	r3, #0
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < 10; i++)
 8001488:	2300      	movs	r3, #0
 800148a:	647b      	str	r3, [r7, #68]	; 0x44
 800148c:	e013      	b.n	80014b6 <AI_run+0x1a6>
    {
      if(output_data[i]>max_temp)
 800148e:	4a4e      	ldr	r2, [pc, #312]	; (80015c8 <AI_run+0x2b8>)
 8001490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001492:	4413      	add	r3, r2
 8001494:	f993 3000 	ldrsb.w	r3, [r3]
 8001498:	461a      	mov	r2, r3
 800149a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800149c:	4293      	cmp	r3, r2
 800149e:	da07      	bge.n	80014b0 <AI_run+0x1a0>
      {
        lable=i;
 80014a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a2:	64bb      	str	r3, [r7, #72]	; 0x48
        max_temp=output_data[i];
 80014a4:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <AI_run+0x2b8>)
 80014a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a8:	4413      	add	r3, r2
 80014aa:	f993 3000 	ldrsb.w	r3, [r3]
 80014ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  for (int i = 0; i < 10; i++)
 80014b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b2:	3301      	adds	r3, #1
 80014b4:	647b      	str	r3, [r7, #68]	; 0x44
 80014b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	dde8      	ble.n	800148e <AI_run+0x17e>
      }
    }
		time1=(timecnt1-ALL_timecnt)*0.01;
 80014bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f978 	bl	80007b8 <__aeabi_i2d>
 80014c8:	a331      	add	r3, pc, #196	; (adr r3, 8001590 <AI_run+0x280>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7fe fef7 	bl	80002c0 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		time2=(timecnt3-timecnt2)*0.01;
 80014da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f969 	bl	80007b8 <__aeabi_i2d>
 80014e6:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <AI_run+0x280>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	f7fe fee8 	bl	80002c0 <__aeabi_dmul>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
		time3=(timecnt5-timecnt4)*0.01;
 80014f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f95a 	bl	80007b8 <__aeabi_i2d>
 8001504:	a322      	add	r3, pc, #136	; (adr r3, 8001590 <AI_run+0x280>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe fed9 	bl	80002c0 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9c7 2302 	strd	r2, r3, [r7, #8]
		time4=(timecnt5-ALL_timecnt)*0.01;
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f94b 	bl	80007b8 <__aeabi_i2d>
 8001522:	a31b      	add	r3, pc, #108	; (adr r3, 8001590 <AI_run+0x280>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7fe feca 	bl	80002c0 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	e9c7 2300 	strd	r2, r3, [r7]

        printf("conv1_time  %.2f  theor_time %.2f ms\r\n",time1,      (230400/1800.00)); // @suppress("Float formatting support")
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <AI_run+0x2c8>)
 800153a:	e9cd 2300 	strd	r2, r3, [sp]
 800153e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001542:	4826      	ldr	r0, [pc, #152]	; (80015dc <AI_run+0x2cc>)
 8001544:	f004 f82c 	bl	80055a0 <iprintf>

		printf("conv2_time  %.2f   theor_time %.2f  ms\r\n",time2,    (204800/3900.00)); // @suppress("Float formatting support")
 8001548:	a313      	add	r3, pc, #76	; (adr r3, 8001598 <AI_run+0x288>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	e9cd 2300 	strd	r2, r3, [sp]
 8001552:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <AI_run+0x2d0>)
 8001558:	f004 f822 	bl	80055a0 <iprintf>
		printf("fully_time  %.2f    theor_time %.2f   ms\r\n",time3,  (2560/10800.00));// @suppress("Float formatting support")
 800155c:	a310      	add	r3, pc, #64	; (adr r3, 80015a0 <AI_run+0x290>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	e9cd 2300 	strd	r2, r3, [sp]
 8001566:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800156a:	481e      	ldr	r0, [pc, #120]	; (80015e4 <AI_run+0x2d4>)
 800156c:	f004 f818 	bl	80055a0 <iprintf>
		printf("all_time    %.2f                    ms\r\n",time4);// @suppress("Float formatting support")
 8001570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001574:	481c      	ldr	r0, [pc, #112]	; (80015e8 <AI_run+0x2d8>)
 8001576:	f004 f813 	bl	80055a0 <iprintf>

		printf("the numer in picture is %d",lable);
 800157a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <AI_run+0x2dc>)
 800157e:	f004 f80f 	bl	80055a0 <iprintf>

}
 8001582:	bf00      	nop
 8001584:	3758      	adds	r7, #88	; 0x58
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	47ae147b 	.word	0x47ae147b
 8001594:	3f847ae1 	.word	0x3f847ae1
 8001598:	1a41a41a 	.word	0x1a41a41a
 800159c:	404a41a4 	.word	0x404a41a4
 80015a0:	c901e574 	.word	0xc901e574
 80015a4:	3fce573a 	.word	0x3fce573a
 80015a8:	20008a10 	.word	0x20008a10
 80015ac:	200082b4 	.word	0x200082b4
 80015b0:	20000aa0 	.word	0x20000aa0
 80015b4:	20000ab4 	.word	0x20000ab4
 80015b8:	08006618 	.word	0x08006618
 80015bc:	08006550 	.word	0x08006550
 80015c0:	08006c60 	.word	0x08006c60
 80015c4:	08006620 	.word	0x08006620
 80015c8:	2000ad1c 	.word	0x2000ad1c
 80015cc:	20000a00 	.word	0x20000a00
 80015d0:	20000000 	.word	0x20000000
 80015d4:	08006464 	.word	0x08006464
 80015d8:	40600000 	.word	0x40600000
 80015dc:	08006470 	.word	0x08006470
 80015e0:	08006498 	.word	0x08006498
 80015e4:	080064c4 	.word	0x080064c4
 80015e8:	080064f0 	.word	0x080064f0
 80015ec:	0800651c 	.word	0x0800651c

080015f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */

	if(Uart1_Rx_Cnt >= 255)  //����ж�
 80015f8:	4b4f      	ldr	r3, [pc, #316]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2bff      	cmp	r3, #255	; 0xff
 80015fe:	d110      	bne.n	8001622 <HAL_UART_RxCpltCallback+0x32>
	{
		Uart1_Rx_Cnt = 0;
 8001600:	4b4d      	ldr	r3, [pc, #308]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
		memset(RxBuffer,0x00,sizeof(RxBuffer));
 8001606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160a:	2100      	movs	r1, #0
 800160c:	484b      	ldr	r0, [pc, #300]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 800160e:	f003 ffbf 	bl	8005590 <memset>
		HAL_UART_Transmit(&huart3, (uint8_t *)"�������", 10,0xFFFF);
 8001612:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001616:	220a      	movs	r2, #10
 8001618:	4949      	ldr	r1, [pc, #292]	; (8001740 <HAL_UART_RxCpltCallback+0x150>)
 800161a:	484a      	ldr	r0, [pc, #296]	; (8001744 <HAL_UART_RxCpltCallback+0x154>)
 800161c:	f002 fd29 	bl	8004072 <HAL_UART_Transmit>
 8001620:	e080      	b.n	8001724 <HAL_UART_RxCpltCallback+0x134>

	}
	else
	{
		RxBuffer[Uart1_Rx_Cnt++] = aRxBuffer;   //��������ת��
 8001622:	4b49      	ldr	r3, [pc, #292]	; (8001748 <HAL_UART_RxCpltCallback+0x158>)
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	4b44      	ldr	r3, [pc, #272]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	b2d0      	uxtb	r0, r2
 800162e:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001630:	7010      	strb	r0, [r2, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	b2c9      	uxtb	r1, r1
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001638:	5499      	strb	r1, [r3, r2]



		if((RxBuffer[Uart1_Rx_Cnt-1] == 0x0A)&&(RxBuffer[Uart1_Rx_Cnt-2] == 0x0D)) //�жϽ���λ
 800163a:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b01      	subs	r3, #1
 8001640:	4a3e      	ldr	r2, [pc, #248]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001642:	5cd3      	ldrb	r3, [r2, r3]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d16d      	bne.n	8001724 <HAL_UART_RxCpltCallback+0x134>
 8001648:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	3b02      	subs	r3, #2
 800164e:	4a3b      	ldr	r2, [pc, #236]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001650:	5cd3      	ldrb	r3, [r2, r3]
 8001652:	2b0d      	cmp	r3, #13
 8001654:	d166      	bne.n	8001724 <HAL_UART_RxCpltCallback+0x134>
		{


			switch(Uart1_Rx_Cnt){
 8001656:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b05      	cmp	r3, #5
 800165c:	d006      	beq.n	800166c <HAL_UART_RxCpltCallback+0x7c>
 800165e:	2b05      	cmp	r3, #5
 8001660:	dc40      	bgt.n	80016e4 <HAL_UART_RxCpltCallback+0xf4>
 8001662:	2b03      	cmp	r3, #3
 8001664:	d036      	beq.n	80016d4 <HAL_UART_RxCpltCallback+0xe4>
 8001666:	2b04      	cmp	r3, #4
 8001668:	d01f      	beq.n	80016aa <HAL_UART_RxCpltCallback+0xba>
 800166a:	e03b      	b.n	80016e4 <HAL_UART_RxCpltCallback+0xf4>
        case 5: data_actu=(RxBuffer[Uart1_Rx_Cnt-3]-48)+(RxBuffer[Uart1_Rx_Cnt-4]-48)*10+(RxBuffer[Uart1_Rx_Cnt-5]-48)*100; break;
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	3b03      	subs	r3, #3
 8001672:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800167a:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	3b04      	subs	r3, #4
 8001680:	4a2e      	ldr	r2, [pc, #184]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	18ca      	adds	r2, r1, r3
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3b05      	subs	r3, #5
 8001698:	4928      	ldr	r1, [pc, #160]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	3b30      	subs	r3, #48	; 0x30
 800169e:	2164      	movs	r1, #100	; 0x64
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e01c      	b.n	80016e4 <HAL_UART_RxCpltCallback+0xf4>
        case 4: data_actu=(RxBuffer[Uart1_Rx_Cnt-3]-48)+(RxBuffer[Uart1_Rx_Cnt-4]-48)*10; break;
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3b03      	subs	r3, #3
 80016b0:	4a22      	ldr	r2, [pc, #136]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	3b04      	subs	r3, #4
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	440b      	add	r3, r1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	e007      	b.n	80016e4 <HAL_UART_RxCpltCallback+0xf4>
        case 3: data_actu=(RxBuffer[Uart1_Rx_Cnt-3]-48); break;
 80016d4:	4b18      	ldr	r3, [pc, #96]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	3b03      	subs	r3, #3
 80016da:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 80016dc:	5cd3      	ldrb	r3, [r2, r3]
 80016de:	3b30      	subs	r3, #48	; 0x30
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	bf00      	nop

			}
			Image_array[count]=data_actu;
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_UART_RxCpltCallback+0x15c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	b2d1      	uxtb	r1, r2
 80016ec:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_UART_RxCpltCallback+0x160>)
 80016ee:	54d1      	strb	r1, [r2, r3]
			if(count==(28*28-1))
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <HAL_UART_RxCpltCallback+0x15c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f240 320f 	movw	r2, #783	; 0x30f
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d105      	bne.n	8001708 <HAL_UART_RxCpltCallback+0x118>
			{
				run_flag=1;
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <HAL_UART_RxCpltCallback+0x164>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
				count=0;
 8001702:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_UART_RxCpltCallback+0x15c>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
			}
			count++;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_UART_RxCpltCallback+0x15c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a0f      	ldr	r2, [pc, #60]	; (800174c <HAL_UART_RxCpltCallback+0x15c>)
 8001710:	6013      	str	r3, [r2, #0]
			Uart1_Rx_Cnt=0;
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_UART_RxCpltCallback+0x148>)
 8001714:	2200      	movs	r2, #0
 8001716:	701a      	strb	r2, [r3, #0]
			memset(RxBuffer,0x00,sizeof(RxBuffer)); //�������
 8001718:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171c:	2100      	movs	r1, #0
 800171e:	4807      	ldr	r0, [pc, #28]	; (800173c <HAL_UART_RxCpltCallback+0x14c>)
 8001720:	f003 ff36 	bl	8005590 <memset>
		}
	}

	HAL_UART_Receive_IT(&huart3, (uint8_t *)&aRxBuffer, 1);   //�ٿ��������ж�
 8001724:	2201      	movs	r2, #1
 8001726:	4908      	ldr	r1, [pc, #32]	; (8001748 <HAL_UART_RxCpltCallback+0x158>)
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <HAL_UART_RxCpltCallback+0x154>)
 800172a:	f002 fd34 	bl	8004196 <HAL_UART_Receive_IT>
}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000a98 	.word	0x20000a98
 800173c:	2000abd0 	.word	0x2000abd0
 8001740:	08006538 	.word	0x08006538
 8001744:	200085c4 	.word	0x200085c4
 8001748:	2000acd0 	.word	0x2000acd0
 800174c:	20000aa4 	.word	0x20000aa4
 8001750:	200082b4 	.word	0x200082b4
 8001754:	20000a9c 	.word	0x20000a9c

08001758 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001760:	1d39      	adds	r1, r7, #4
 8001762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001766:	2201      	movs	r2, #1
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <__io_putchar+0x20>)
 800176a:	f002 fc82 	bl	8004072 <HAL_UART_Transmit>

  return ch;
 800176e:	687b      	ldr	r3, [r7, #4]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200085c4 	.word	0x200085c4

0800177c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <MX_TIM2_Init+0x94>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_TIM2_Init+0x94>)
 80017a2:	225f      	movs	r2, #95	; 0x5f
 80017a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_TIM2_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_TIM2_Init+0x94>)
 80017ae:	2209      	movs	r2, #9
 80017b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_TIM2_Init+0x94>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_TIM2_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017be:	4814      	ldr	r0, [pc, #80]	; (8001810 <MX_TIM2_Init+0x94>)
 80017c0:	f001 ff88 	bl	80036d4 <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 f92b 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4619      	mov	r1, r3
 80017da:	480d      	ldr	r0, [pc, #52]	; (8001810 <MX_TIM2_Init+0x94>)
 80017dc:	f002 f942 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017e6:	f000 f91d 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <MX_TIM2_Init+0x94>)
 80017f8:	f002 fb5e 	bl	8003eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001802:	f000 f90f 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2000acd4 	.word	0x2000acd4

08001814 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001818:	4b11      	ldr	r3, [pc, #68]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <MX_USART3_UART_Init+0x50>)
 800181c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001820:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001824:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800183a:	220c      	movs	r2, #12
 800183c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183e:	4b08      	ldr	r3, [pc, #32]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_USART3_UART_Init+0x4c>)
 800184c:	f002 fbc4 	bl	8003fd8 <HAL_UART_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001856:	f000 f8e5 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200085c4 	.word	0x200085c4
 8001864:	40004800 	.word	0x40004800

08001868 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800186e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001872:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001876:	2206      	movs	r2, #6
 8001878:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800187c:	2202      	movs	r2, #2
 800187e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001886:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001888:	2202      	movs	r2, #2
 800188a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800188e:	2201      	movs	r2, #1
 8001890:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001894:	2200      	movs	r2, #0
 8001896:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80018b2:	f000 feba 	bl	800262a <HAL_PCD_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80018bc:	f000 f8b2 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20008608 	.word	0x20008608

080018c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	; 0x30
 80018cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	4b4c      	ldr	r3, [pc, #304]	; (8001a14 <MX_GPIO_Init+0x14c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <MX_GPIO_Init+0x14c>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b49      	ldr	r3, [pc, #292]	; (8001a14 <MX_GPIO_Init+0x14c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	61bb      	str	r3, [r7, #24]
 80018f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a44      	ldr	r2, [pc, #272]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b42      	ldr	r3, [pc, #264]	; (8001a14 <MX_GPIO_Init+0x14c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	4b3e      	ldr	r3, [pc, #248]	; (8001a14 <MX_GPIO_Init+0x14c>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a3d      	ldr	r2, [pc, #244]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b3b      	ldr	r3, [pc, #236]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b37      	ldr	r3, [pc, #220]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a36      	ldr	r2, [pc, #216]	; (8001a14 <MX_GPIO_Init+0x14c>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b34      	ldr	r3, [pc, #208]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	4b29      	ldr	r3, [pc, #164]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <MX_GPIO_Init+0x14c>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <MX_GPIO_Init+0x14c>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	607b      	str	r3, [r7, #4]
 8001984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f244 0181 	movw	r1, #16513	; 0x4081
 800198c:	4822      	ldr	r0, [pc, #136]	; (8001a18 <MX_GPIO_Init+0x150>)
 800198e:	f000 fe33 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2140      	movs	r1, #64	; 0x40
 8001996:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_GPIO_Init+0x154>)
 8001998:	f000 fe2e 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800199c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	481b      	ldr	r0, [pc, #108]	; (8001a20 <MX_GPIO_Init+0x158>)
 80019b4:	f000 fc8c 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <MX_GPIO_Init+0x150>)
 80019d2:	f000 fc7d 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80019d6:	2340      	movs	r3, #64	; 0x40
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <MX_GPIO_Init+0x154>)
 80019ee:	f000 fc6f 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_GPIO_Init+0x154>)
 8001a06:	f000 fc63 	bl	80022d0 <HAL_GPIO_Init>

}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40020800 	.word	0x40020800

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <Error_Handler+0x8>
	...

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	; 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a90:	d115      	bne.n	8001abe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_TIM_Base_MspInit+0x48>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	201c      	movs	r0, #28
 8001ab4:	f000 fb43 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ab8:	201c      	movs	r0, #28
 8001aba:	f000 fb5c 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a1d      	ldr	r2, [pc, #116]	; (8001b60 <HAL_UART_MspInit+0x94>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d134      	bne.n	8001b58 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_UART_MspInit+0x98>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b34:	2303      	movs	r3, #3
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	4619      	mov	r1, r3
 8001b42:	4809      	ldr	r0, [pc, #36]	; (8001b68 <HAL_UART_MspInit+0x9c>)
 8001b44:	f000 fbc4 	bl	80022d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	2027      	movs	r0, #39	; 0x27
 8001b4e:	f000 faf6 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b52:	2027      	movs	r0, #39	; 0x27
 8001b54:	f000 fb0f 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b58:	bf00      	nop
 8001b5a:	3728      	adds	r7, #40	; 0x28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40004800 	.word	0x40004800
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020c00 	.word	0x40020c00

08001b6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b8c:	d13f      	bne.n	8001c0e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a20      	ldr	r2, [pc, #128]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001baa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4815      	ldr	r0, [pc, #84]	; (8001c1c <HAL_PCD_MspInit+0xb0>)
 8001bc8:	f000 fb82 	bl	80022d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	480e      	ldr	r0, [pc, #56]	; (8001c1c <HAL_PCD_MspInit+0xb0>)
 8001be2:	f000 fb75 	bl	80022d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001bec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf0:	6353      	str	r3, [r2, #52]	; 0x34
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_PCD_MspInit+0xac>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40020000 	.word	0x40020000

08001c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <NMI_Handler+0x4>

08001c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <HardFault_Handler+0x4>

08001c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <MemManage_Handler+0x4>

08001c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <BusFault_Handler+0x4>

08001c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <UsageFault_Handler+0x4>

08001c3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 f948 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c78:	4802      	ldr	r0, [pc, #8]	; (8001c84 <TIM2_IRQHandler+0x10>)
 8001c7a:	f001 fdeb 	bl	8003854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	2000acd4 	.word	0x2000acd4

08001c88 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <USART3_IRQHandler+0x10>)
 8001c8e:	f002 fab3 	bl	80041f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200085c4 	.word	0x200085c4

08001c9c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e00a      	b.n	8001cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf0      	blt.n	8001cae <_read+0x12>
	}

return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e009      	b.n	8001cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fd31 	bl	8001758 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf1      	blt.n	8001ce8 <_write+0x12>
	}
	return len;
 8001d04:	687b      	ldr	r3, [r7, #4]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_close>:

int _close(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	return -1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d36:	605a      	str	r2, [r3, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_isatty>:

int _isatty(int file)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f003 fbc8 	bl	800553c <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20050000 	.word	0x20050000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	20000aa8 	.word	0x20000aa8
 8001de0:	2000ad40 	.word	0x2000ad40

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <SystemInit+0x20>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <SystemInit+0x20>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	; (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ffd7 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f003 fb87 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff f99b 	bl	8001174 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	20000a7c 	.word	0x20000a7c
  ldr r2, =_sidata
 8001e4c:	08006d28 	.word	0x08006d28
  ldr r2, =_sbss
 8001e50:	20000a7c 	.word	0x20000a7c
  ldr r4, =_ebss
 8001e54:	2000ad3c 	.word	0x2000ad3c

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f94f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fdce 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f967 	bl	8002192 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f92f 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000a0c 	.word	0x20000a0c
 8001ef8:	20000a14 	.word	0x20000a14
 8001efc:	20000a10 	.word	0x20000a10

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000a14 	.word	0x20000a14
 8001f24:	2000ad28 	.word	0x2000ad28

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	2000ad28 	.word	0x2000ad28

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000a14 	.word	0x20000a14

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feb6 	bl	8001f28 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e052      	b.n	8002282 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0216 	bic.w	r2, r2, #22
 80021ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <HAL_DMA_Abort+0x62>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0208 	bic.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222c:	e013      	b.n	8002256 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7ff fe7b 	bl	8001f28 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d90c      	bls.n	8002256 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e015      	b.n	8002282 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e4      	bne.n	800222e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	223f      	movs	r2, #63	; 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00c      	b.n	80022c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e165      	b.n	80025b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8154 	bne.w	80025b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d005      	beq.n	8002322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	2b02      	cmp	r3, #2
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80ae 	beq.w	80025b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_GPIO_Init+0x300>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_GPIO_Init+0x300>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b5a      	ldr	r3, [pc, #360]	; (80025d0 <HAL_GPIO_Init+0x300>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002472:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <HAL_GPIO_Init+0x308>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d025      	beq.n	80024ea <HAL_GPIO_Init+0x21a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4e      	ldr	r2, [pc, #312]	; (80025dc <HAL_GPIO_Init+0x30c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01f      	beq.n	80024e6 <HAL_GPIO_Init+0x216>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4d      	ldr	r2, [pc, #308]	; (80025e0 <HAL_GPIO_Init+0x310>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d019      	beq.n	80024e2 <HAL_GPIO_Init+0x212>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <HAL_GPIO_Init+0x314>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <HAL_GPIO_Init+0x20e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4b      	ldr	r2, [pc, #300]	; (80025e8 <HAL_GPIO_Init+0x318>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00d      	beq.n	80024da <HAL_GPIO_Init+0x20a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4a      	ldr	r2, [pc, #296]	; (80025ec <HAL_GPIO_Init+0x31c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d007      	beq.n	80024d6 <HAL_GPIO_Init+0x206>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a49      	ldr	r2, [pc, #292]	; (80025f0 <HAL_GPIO_Init+0x320>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d101      	bne.n	80024d2 <HAL_GPIO_Init+0x202>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e00c      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024d2:	2307      	movs	r3, #7
 80024d4:	e00a      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024d6:	2305      	movs	r3, #5
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024da:	2304      	movs	r3, #4
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x21c>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800250a:	4b3a      	ldr	r3, [pc, #232]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252e:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002534:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002582:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_GPIO_Init+0x324>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002588:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_GPIO_Init+0x324>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_GPIO_Init+0x324>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f ae96 	bls.w	80022ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40021400 	.word	0x40021400
 80025f0:	40021800 	.word	0x40021800
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800262a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262c:	b08f      	sub	sp, #60	; 0x3c
 800262e:	af0a      	add	r7, sp, #40	; 0x28
 8002630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e116      	b.n	800286a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fa88 	bl	8001b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2203      	movs	r2, #3
 8002660:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f002 fce5 	bl	800504a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	603b      	str	r3, [r7, #0]
 8002686:	687e      	ldr	r6, [r7, #4]
 8002688:	466d      	mov	r5, sp
 800268a:	f106 0410 	add.w	r4, r6, #16
 800268e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800269a:	e885 0003 	stmia.w	r5, {r0, r1}
 800269e:	1d33      	adds	r3, r6, #4
 80026a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a2:	6838      	ldr	r0, [r7, #0]
 80026a4:	f002 fc70 	bl	8004f88 <USB_CoreInit>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e0d7      	b.n	800286a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 fcd3 	bl	800506c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e04a      	b.n	8002762 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	333d      	adds	r3, #61	; 0x3d
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026e0:	7bfa      	ldrb	r2, [r7, #15]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	333c      	adds	r3, #60	; 0x3c
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026f4:	7bfa      	ldrb	r2, [r7, #15]
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	b298      	uxth	r0, r3
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	3342      	adds	r3, #66	; 0x42
 8002708:	4602      	mov	r2, r0
 800270a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	333f      	adds	r3, #63	; 0x3f
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3344      	adds	r3, #68	; 0x44
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002734:	7bfa      	ldrb	r2, [r7, #15]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3348      	adds	r3, #72	; 0x48
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3350      	adds	r3, #80	; 0x50
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	3301      	adds	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	429a      	cmp	r2, r3
 800276a:	d3af      	bcc.n	80026cc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e044      	b.n	80027fc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002772:	7bfa      	ldrb	r2, [r7, #15]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002784:	2200      	movs	r2, #0
 8002786:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002788:	7bfa      	ldrb	r2, [r7, #15]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	1a9b      	subs	r3, r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027c6:	2200      	movs	r2, #0
 80027c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	3301      	adds	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	429a      	cmp	r2, r3
 8002804:	d3b5      	bcc.n	8002772 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	687e      	ldr	r6, [r7, #4]
 800280e:	466d      	mov	r5, sp
 8002810:	f106 0410 	add.w	r4, r6, #16
 8002814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002820:	e885 0003 	stmia.w	r5, {r0, r1}
 8002824:	1d33      	adds	r3, r6, #4
 8002826:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002828:	6838      	ldr	r0, [r7, #0]
 800282a:	f002 fc6b 	bl	8005104 <USB_DevInit>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e014      	b.n	800286a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b01      	cmp	r3, #1
 8002856:	d102      	bne.n	800285e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f80a 	bl	8002872 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fe09 	bl	800547a <USB_DevDisconnect>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002872 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002872:	b480      	push	{r7}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	f043 0303 	orr.w	r3, r3, #3
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0cc      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d0:	4b68      	ldr	r3, [pc, #416]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d90c      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b63      	ldr	r3, [pc, #396]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0b8      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d020      	beq.n	8002946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002910:	4b59      	ldr	r3, [pc, #356]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002928:	4b53      	ldr	r3, [pc, #332]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a52      	ldr	r2, [pc, #328]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002934:	4b50      	ldr	r3, [pc, #320]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	494d      	ldr	r1, [pc, #308]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d044      	beq.n	80029dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d119      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e07f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	2b03      	cmp	r3, #3
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297a:	4b3f      	ldr	r3, [pc, #252]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d109      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e06f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298a:	4b3b      	ldr	r3, [pc, #236]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e067      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f023 0203 	bic.w	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4934      	ldr	r1, [pc, #208]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029ac:	f7ff fabc 	bl	8001f28 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b2:	e00a      	b.n	80029ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b4:	f7ff fab8 	bl	8001f28 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e04f      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 020c 	and.w	r2, r3, #12
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1eb      	bne.n	80029b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029dc:	4b25      	ldr	r3, [pc, #148]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d20c      	bcs.n	8002a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	4b20      	ldr	r3, [pc, #128]	; (8002a74 <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e032      	b.n	8002a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4916      	ldr	r1, [pc, #88]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0308 	and.w	r3, r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	490e      	ldr	r1, [pc, #56]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a42:	f000 f821 	bl	8002a88 <HAL_RCC_GetSysClockFreq>
 8002a46:	4602      	mov	r2, r0
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	490a      	ldr	r1, [pc, #40]	; (8002a7c <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	5ccb      	ldrb	r3, [r1, r3]
 8002a56:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5a:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fa1c 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08006c68 	.word	0x08006c68
 8002a80:	20000a0c 	.word	0x20000a0c
 8002a84:	20000a10 	.word	0x20000a10

08002a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa0:	4b67      	ldr	r3, [pc, #412]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 030c 	and.w	r3, r3, #12
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	f200 80bd 	bhi.w	8002c2c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0x34>
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d003      	beq.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aba:	e0b7      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002abc:	4b61      	ldr	r3, [pc, #388]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002abe:	60bb      	str	r3, [r7, #8]
       break;
 8002ac0:	e0b7      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac2:	4b61      	ldr	r3, [pc, #388]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002ac4:	60bb      	str	r3, [r7, #8]
      break;
 8002ac6:	e0b4      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ac8:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad2:	4b5b      	ldr	r3, [pc, #364]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04d      	beq.n	8002b7a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ade:	4b58      	ldr	r3, [pc, #352]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	ea02 0800 	and.w	r8, r2, r0
 8002af6:	ea03 0901 	and.w	r9, r3, r1
 8002afa:	4640      	mov	r0, r8
 8002afc:	4649      	mov	r1, r9
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	f04f 0300 	mov.w	r3, #0
 8002b06:	014b      	lsls	r3, r1, #5
 8002b08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b0c:	0142      	lsls	r2, r0, #5
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	ebb0 0008 	subs.w	r0, r0, r8
 8002b16:	eb61 0109 	sbc.w	r1, r1, r9
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	018b      	lsls	r3, r1, #6
 8002b24:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b28:	0182      	lsls	r2, r0, #6
 8002b2a:	1a12      	subs	r2, r2, r0
 8002b2c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b30:	f04f 0000 	mov.w	r0, #0
 8002b34:	f04f 0100 	mov.w	r1, #0
 8002b38:	00d9      	lsls	r1, r3, #3
 8002b3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b3e:	00d0      	lsls	r0, r2, #3
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	eb12 0208 	adds.w	r2, r2, r8
 8002b48:	eb43 0309 	adc.w	r3, r3, r9
 8002b4c:	f04f 0000 	mov.w	r0, #0
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	0259      	lsls	r1, r3, #9
 8002b56:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b5a:	0250      	lsls	r0, r2, #9
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	461a      	mov	r2, r3
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	f7fd fe8e 	bl	800088c <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e04a      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b31      	ldr	r3, [pc, #196]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	461a      	mov	r2, r3
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b8a:	f04f 0100 	mov.w	r1, #0
 8002b8e:	ea02 0400 	and.w	r4, r2, r0
 8002b92:	ea03 0501 	and.w	r5, r3, r1
 8002b96:	4620      	mov	r0, r4
 8002b98:	4629      	mov	r1, r5
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ba8:	0142      	lsls	r2, r0, #5
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	1b00      	subs	r0, r0, r4
 8002bb0:	eb61 0105 	sbc.w	r1, r1, r5
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bc2:	0182      	lsls	r2, r0, #6
 8002bc4:	1a12      	subs	r2, r2, r0
 8002bc6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bca:	f04f 0000 	mov.w	r0, #0
 8002bce:	f04f 0100 	mov.w	r1, #0
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bd8:	00d0      	lsls	r0, r2, #3
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	1912      	adds	r2, r2, r4
 8002be0:	eb45 0303 	adc.w	r3, r5, r3
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0299      	lsls	r1, r3, #10
 8002bee:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bf2:	0290      	lsls	r0, r2, #10
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f7fd fe42 	bl	800088c <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	0c1b      	lsrs	r3, r3, #16
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	60bb      	str	r3, [r7, #8]
      break;
 8002c2a:	e002      	b.n	8002c32 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c2e:	60bb      	str	r3, [r7, #8]
      break;
 8002c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c32:	68bb      	ldr	r3, [r7, #8]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023800 	.word	0x40023800
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200

08002c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000a0c 	.word	0x20000a0c

08002c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c68:	f7ff fff0 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0a9b      	lsrs	r3, r3, #10
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08006c78 	.word	0x08006c78

08002c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c90:	f7ff ffdc 	bl	8002c4c <HAL_RCC_GetHCLKFreq>
 8002c94:	4602      	mov	r2, r0
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	0b5b      	lsrs	r3, r3, #13
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	4903      	ldr	r1, [pc, #12]	; (8002cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08006c78 	.word	0x08006c78

08002cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b088      	sub	sp, #32
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002cd8:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cde:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	4977      	ldr	r1, [pc, #476]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d06:	4b6f      	ldr	r3, [pc, #444]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	496b      	ldr	r1, [pc, #428]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8002d24:	2301      	movs	r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8002d34:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d42:	4960      	ldr	r1, [pc, #384]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8002d52:	2301      	movs	r3, #1
 8002d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002d60:	4b58      	ldr	r3, [pc, #352]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d66:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4954      	ldr	r1, [pc, #336]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d022      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8002d86:	4b4f      	ldr	r3, [pc, #316]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d94:	494b      	ldr	r1, [pc, #300]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002da4:	2301      	movs	r3, #1
 8002da6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8002db2:	4b44      	ldr	r3, [pc, #272]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	021b      	lsls	r3, r3, #8
 8002dc4:	493f      	ldr	r1, [pc, #252]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808a 	beq.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	4b39      	ldr	r3, [pc, #228]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	4a38      	ldr	r2, [pc, #224]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002df6:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e02:	f7ff f891 	bl	8001f28 <HAL_GetTick>
 8002e06:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e0a:	f7ff f88d 	bl	8001f28 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1d1      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e30:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02f      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d028      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e46:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e56:	4b1d      	ldr	r3, [pc, #116]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d114      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7ff f85b 	bl	8001f28 <HAL_GetTick>
 8002e72:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	e00a      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e76:	f7ff f857 	bl	8001f28 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e199      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	f003 0302 	and.w	r3, r3, #2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0ee      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea4:	d114      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	4902      	ldr	r1, [pc, #8]	; (8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]
 8002ec0:	e00c      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002ec2:	bf00      	nop
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	40007000 	.word	0x40007000
 8002ecc:	42470e40 	.word	0x42470e40
 8002ed0:	4b89      	ldr	r3, [pc, #548]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a88      	ldr	r2, [pc, #544]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ed6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eda:	6093      	str	r3, [r2, #8]
 8002edc:	4b86      	ldr	r3, [pc, #536]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002ede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	4983      	ldr	r1, [pc, #524]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002f00:	4b7e      	ldr	r3, [pc, #504]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8002f02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f10:	4b79      	ldr	r3, [pc, #484]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1e:	4976      	ldr	r1, [pc, #472]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d011      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f32:	4b71      	ldr	r3, [pc, #452]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	496d      	ldr	r1, [pc, #436]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f50:	d101      	bne.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8002f52:	2301      	movs	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002f62:	4b65      	ldr	r3, [pc, #404]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f68:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	4961      	ldr	r1, [pc, #388]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d004      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b80      	cmp	r3, #128	; 0x80
 8002f84:	f040 80c6 	bne.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f88:	4b5d      	ldr	r3, [pc, #372]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe ffcb 	bl	8001f28 <HAL_GetTick>
 8002f92:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f96:	f7fe ffc7 	bl	8001f28 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e10b      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fa8:	4b53      	ldr	r3, [pc, #332]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002fb4:	4a53      	ldr	r2, [pc, #332]	; (8003104 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fba:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d023      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d019      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff8:	d00e      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d019      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d115      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x386>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003016:	d110      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	071b      	lsls	r3, r3, #28
 8003032:	4931      	ldr	r1, [pc, #196]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8003056:	2b00      	cmp	r3, #0
 8003058:	d026      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d122      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003062:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003068:	0e1b      	lsrs	r3, r3, #24
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	061b      	lsls	r3, r3, #24
 8003080:	431a      	orrs	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	071b      	lsls	r3, r3, #28
 8003088:	491b      	ldr	r1, [pc, #108]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8003090:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8003092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003096:	f023 021f 	bic.w	r2, r3, #31
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	3b01      	subs	r3, #1
 80030a0:	4915      	ldr	r1, [pc, #84]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	071b      	lsls	r3, r3, #28
 80030ce:	490a      	ldr	r1, [pc, #40]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fe ff24 	bl	8001f28 <HAL_GetTick>
 80030e0:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030e4:	f7fe ff20 	bl	8001f28 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d90a      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e064      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	424711e0 	.word	0x424711e0
 8003100:	42470068 	.word	0x42470068
 8003104:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003108:	4b2f      	ldr	r3, [pc, #188]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0e7      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003120:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003126:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312e:	4926      	ldr	r1, [pc, #152]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003142:	4b21      	ldr	r3, [pc, #132]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003150:	491d      	ldr	r1, [pc, #116]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800316a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	4915      	ldr	r1, [pc, #84]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00a      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4904      	ldr	r1, [pc, #16]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e270      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d075      	beq.n	80032d6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ea:	4ba3      	ldr	r3, [pc, #652]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d00c      	beq.n	8003210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4ba0      	ldr	r3, [pc, #640]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031fe:	2b08      	cmp	r3, #8
 8003200:	d112      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003202:	4b9d      	ldr	r3, [pc, #628]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320e:	d10b      	bne.n	8003228 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	4b99      	ldr	r3, [pc, #612]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d05b      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d157      	bne.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e24b      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d106      	bne.n	8003240 <HAL_RCC_OscConfig+0x74>
 8003232:	4b91      	ldr	r3, [pc, #580]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a90      	ldr	r2, [pc, #576]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	e01d      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x98>
 800324a:	4b8b      	ldr	r3, [pc, #556]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a8a      	ldr	r2, [pc, #552]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a87      	ldr	r2, [pc, #540]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e00b      	b.n	800327c <HAL_RCC_OscConfig+0xb0>
 8003264:	4b84      	ldr	r3, [pc, #528]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a83      	ldr	r2, [pc, #524]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800326a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a80      	ldr	r2, [pc, #512]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d013      	beq.n	80032ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fe50 	bl	8001f28 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fe4c 	bl	8001f28 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e210      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	4b76      	ldr	r3, [pc, #472]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCC_OscConfig+0xc0>
 80032aa:	e014      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fe3c 	bl	8001f28 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe fe38 	bl	8001f28 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	; 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e1fc      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e000      	b.n	80032d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d063      	beq.n	80033aa <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032e2:	4b65      	ldr	r3, [pc, #404]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00b      	beq.n	8003306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b62      	ldr	r3, [pc, #392]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d11c      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032fa:	4b5f      	ldr	r3, [pc, #380]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	4b5c      	ldr	r3, [pc, #368]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e1d0      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331e:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4952      	ldr	r1, [pc, #328]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003332:	e03a      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d020      	beq.n	800337e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800333c:	4b4f      	ldr	r3, [pc, #316]	; (800347c <HAL_RCC_OscConfig+0x2b0>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003342:	f7fe fdf1 	bl	8001f28 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe fded 	bl	8001f28 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1b1      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	4b46      	ldr	r3, [pc, #280]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003368:	4b43      	ldr	r3, [pc, #268]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4940      	ldr	r1, [pc, #256]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003378:	4313      	orrs	r3, r2
 800337a:	600b      	str	r3, [r1, #0]
 800337c:	e015      	b.n	80033aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800337e:	4b3f      	ldr	r3, [pc, #252]	; (800347c <HAL_RCC_OscConfig+0x2b0>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003384:	f7fe fdd0 	bl	8001f28 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800338c:	f7fe fdcc 	bl	8001f28 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e190      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	4b36      	ldr	r3, [pc, #216]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d030      	beq.n	8003418 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d016      	beq.n	80033ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_RCC_OscConfig+0x2b4>)
 80033c0:	2201      	movs	r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe fdb0 	bl	8001f28 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033cc:	f7fe fdac 	bl	8001f28 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e170      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0f0      	beq.n	80033cc <HAL_RCC_OscConfig+0x200>
 80033ea:	e015      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ec:	4b24      	ldr	r3, [pc, #144]	; (8003480 <HAL_RCC_OscConfig+0x2b4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f2:	f7fe fd99 	bl	8001f28 <HAL_GetTick>
 80033f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f8:	e008      	b.n	800340c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fa:	f7fe fd95 	bl	8001f28 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d901      	bls.n	800340c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e159      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1f0      	bne.n	80033fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a0 	beq.w	8003566 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	2300      	movs	r3, #0
 8003428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	4a0e      	ldr	r2, [pc, #56]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003444:	6413      	str	r3, [r2, #64]	; 0x40
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003452:	2301      	movs	r3, #1
 8003454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d121      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a07      	ldr	r2, [pc, #28]	; (8003484 <HAL_RCC_OscConfig+0x2b8>)
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346e:	f7fe fd5b 	bl	8001f28 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003474:	e011      	b.n	800349a <HAL_RCC_OscConfig+0x2ce>
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	42470000 	.word	0x42470000
 8003480:	42470e80 	.word	0x42470e80
 8003484:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe fd4e 	bl	8001f28 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e112      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b8b      	ldr	r3, [pc, #556]	; (80036c8 <HAL_RCC_OscConfig+0x4fc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x2f0>
 80034ae:	4b87      	ldr	r3, [pc, #540]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a86      	ldr	r2, [pc, #536]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	e01c      	b.n	80034f6 <HAL_RCC_OscConfig+0x32a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b05      	cmp	r3, #5
 80034c2:	d10c      	bne.n	80034de <HAL_RCC_OscConfig+0x312>
 80034c4:	4b81      	ldr	r3, [pc, #516]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a80      	ldr	r2, [pc, #512]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	4b7e      	ldr	r3, [pc, #504]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a7d      	ldr	r2, [pc, #500]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	e00b      	b.n	80034f6 <HAL_RCC_OscConfig+0x32a>
 80034de:	4b7b      	ldr	r3, [pc, #492]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a7a      	ldr	r2, [pc, #488]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ea:	4b78      	ldr	r3, [pc, #480]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a77      	ldr	r2, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80034f0:	f023 0304 	bic.w	r3, r3, #4
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034fe:	f7fe fd13 	bl	8001f28 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003504:	e00a      	b.n	800351c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003506:	f7fe fd0f 	bl	8001f28 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	f241 3288 	movw	r2, #5000	; 0x1388
 8003514:	4293      	cmp	r3, r2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e0d1      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351c:	4b6b      	ldr	r3, [pc, #428]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0ee      	beq.n	8003506 <HAL_RCC_OscConfig+0x33a>
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352a:	f7fe fcfd 	bl	8001f28 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003530:	e00a      	b.n	8003548 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe fcf9 	bl	8001f28 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e0bb      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003548:	4b60      	ldr	r3, [pc, #384]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ee      	bne.n	8003532 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003554:	7dfb      	ldrb	r3, [r7, #23]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d105      	bne.n	8003566 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355a:	4b5c      	ldr	r3, [pc, #368]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	4a5b      	ldr	r2, [pc, #364]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 8003560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003564:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a7 	beq.w	80036be <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003570:	4b56      	ldr	r3, [pc, #344]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b08      	cmp	r3, #8
 800357a:	d060      	beq.n	800363e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d145      	bne.n	8003610 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003584:	4b52      	ldr	r3, [pc, #328]	; (80036d0 <HAL_RCC_OscConfig+0x504>)
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358a:	f7fe fccd 	bl	8001f28 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003592:	f7fe fcc9 	bl	8001f28 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e08d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a4:	4b49      	ldr	r3, [pc, #292]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f0      	bne.n	8003592 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	019b      	lsls	r3, r3, #6
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	3b01      	subs	r3, #1
 80035ca:	041b      	lsls	r3, r3, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	071b      	lsls	r3, r3, #28
 80035dc:	493b      	ldr	r1, [pc, #236]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e2:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <HAL_RCC_OscConfig+0x504>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fc9e 	bl	8001f28 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f0:	f7fe fc9a 	bl	8001f28 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e05e      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003602:	4b32      	ldr	r3, [pc, #200]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x424>
 800360e:	e056      	b.n	80036be <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003610:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_RCC_OscConfig+0x504>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003616:	f7fe fc87 	bl	8001f28 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fc83 	bl	8001f28 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e047      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003630:	4b26      	ldr	r3, [pc, #152]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f0      	bne.n	800361e <HAL_RCC_OscConfig+0x452>
 800363c:	e03f      	b.n	80036be <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e03a      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <HAL_RCC_OscConfig+0x500>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d030      	beq.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	429a      	cmp	r2, r3
 8003664:	d129      	bne.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	429a      	cmp	r2, r3
 8003672:	d122      	bne.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800367a:	4013      	ands	r3, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003680:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003682:	4293      	cmp	r3, r2
 8003684:	d119      	bne.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	085b      	lsrs	r3, r3, #1
 8003692:	3b01      	subs	r3, #1
 8003694:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003696:	429a      	cmp	r2, r3
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d107      	bne.n	80036ba <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e000      	b.n	80036c0 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3718      	adds	r7, #24
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40007000 	.word	0x40007000
 80036cc:	40023800 	.word	0x40023800
 80036d0:	42470060 	.word	0x42470060

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e041      	b.n	800376a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f9c0 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fa96 	bl	8003c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e04e      	b.n	800382a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a23      	ldr	r2, [pc, #140]	; (8003838 <HAL_TIM_Base_Start_IT+0xc4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d01d      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_TIM_Base_Start_IT+0xc8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIM_Base_Start_IT+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_TIM_Base_Start_IT+0xd4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_TIM_Base_Start_IT+0xd8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_Base_Start_IT+0xdc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d010      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	e007      	b.n	8003828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40001800 	.word	0x40001800

08003854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b02      	cmp	r3, #2
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0202 	mvn.w	r2, #2
 8003880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9b5 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9a7 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9b8 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0204 	mvn.w	r2, #4
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2202      	movs	r2, #2
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f98b 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f97d 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f98e 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b08      	cmp	r3, #8
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0208 	mvn.w	r2, #8
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f961 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f953 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f964 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	2b10      	cmp	r3, #16
 8003964:	d122      	bne.n	80039ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d11b      	bne.n	80039ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0210 	mvn.w	r2, #16
 800397c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2208      	movs	r2, #8
 8003982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f937 	bl	8003c06 <HAL_TIM_IC_CaptureCallback>
 8003998:	e005      	b.n	80039a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f929 	bl	8003bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f93a 	bl	8003c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10e      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d107      	bne.n	80039d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0201 	mvn.w	r2, #1
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fd fc7e 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b80      	cmp	r3, #128	; 0x80
 80039e4:	d10e      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b80      	cmp	r3, #128	; 0x80
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fae0 	bl	8003fc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b40      	cmp	r3, #64	; 0x40
 8003a10:	d10e      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1c:	2b40      	cmp	r3, #64	; 0x40
 8003a1e:	d107      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f8ff 	bl	8003c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d10e      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d107      	bne.n	8003a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0220 	mvn.w	r2, #32
 8003a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 faaa 	bl	8003fb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0b4      	b.n	8003bea <HAL_TIM_ConfigClockSource+0x186>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ab8:	d03e      	beq.n	8003b38 <HAL_TIM_ConfigClockSource+0xd4>
 8003aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003abe:	f200 8087 	bhi.w	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ac6:	f000 8086 	beq.w	8003bd6 <HAL_TIM_ConfigClockSource+0x172>
 8003aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ace:	d87f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b70      	cmp	r3, #112	; 0x70
 8003ad2:	d01a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0xa6>
 8003ad4:	2b70      	cmp	r3, #112	; 0x70
 8003ad6:	d87b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b60      	cmp	r3, #96	; 0x60
 8003ada:	d050      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x11a>
 8003adc:	2b60      	cmp	r3, #96	; 0x60
 8003ade:	d877      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b50      	cmp	r3, #80	; 0x50
 8003ae2:	d03c      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0xfa>
 8003ae4:	2b50      	cmp	r3, #80	; 0x50
 8003ae6:	d873      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae8:	2b40      	cmp	r3, #64	; 0x40
 8003aea:	d058      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x13a>
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d86f      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af0:	2b30      	cmp	r3, #48	; 0x30
 8003af2:	d064      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003af4:	2b30      	cmp	r3, #48	; 0x30
 8003af6:	d86b      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	d060      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d867      	bhi.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d05c      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d05a      	beq.n	8003bbe <HAL_TIM_ConfigClockSource+0x15a>
 8003b08:	e062      	b.n	8003bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6899      	ldr	r1, [r3, #8]
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f000 f9ad 	bl	8003e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	609a      	str	r2, [r3, #8]
      break;
 8003b36:	e04f      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6899      	ldr	r1, [r3, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f000 f996 	bl	8003e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689a      	ldr	r2, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b5a:	609a      	str	r2, [r3, #8]
      break;
 8003b5c:	e03c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 f90a 	bl	8003d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2150      	movs	r1, #80	; 0x50
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f963 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e02c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 f929 	bl	8003de2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2160      	movs	r1, #96	; 0x60
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f953 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e01c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	6859      	ldr	r1, [r3, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f000 f8ea 	bl	8003d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2140      	movs	r1, #64	; 0x40
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f000 f943 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bbc:	e00c      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	4610      	mov	r0, r2
 8003bca:	f000 f93a 	bl	8003e42 <TIM_ITRx_SetConfig>
      break;
 8003bce:	e003      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd4:	e000      	b.n	8003bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a40      	ldr	r2, [pc, #256]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d013      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c62:	d00f      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <TIM_Base_SetConfig+0x118>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00b      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a3c      	ldr	r2, [pc, #240]	; (8003d60 <TIM_Base_SetConfig+0x11c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d007      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a3b      	ldr	r2, [pc, #236]	; (8003d64 <TIM_Base_SetConfig+0x120>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_Base_SetConfig+0x40>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a3a      	ldr	r2, [pc, #232]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d108      	bne.n	8003c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2f      	ldr	r2, [pc, #188]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d02b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca4:	d027      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <TIM_Base_SetConfig+0x118>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d023      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <TIM_Base_SetConfig+0x11c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d01f      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <TIM_Base_SetConfig+0x120>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a29      	ldr	r2, [pc, #164]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d017      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a28      	ldr	r2, [pc, #160]	; (8003d6c <TIM_Base_SetConfig+0x128>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <TIM_Base_SetConfig+0x12c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d00f      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <TIM_Base_SetConfig+0x130>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00b      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a25      	ldr	r2, [pc, #148]	; (8003d78 <TIM_Base_SetConfig+0x134>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <TIM_Base_SetConfig+0x138>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <TIM_Base_SetConfig+0x13c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a0a      	ldr	r2, [pc, #40]	; (8003d58 <TIM_Base_SetConfig+0x114>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_Base_SetConfig+0xf8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0c      	ldr	r2, [pc, #48]	; (8003d68 <TIM_Base_SetConfig+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40014400 	.word	0x40014400
 8003d74:	40014800 	.word	0x40014800
 8003d78:	40001800 	.word	0x40001800
 8003d7c:	40001c00 	.word	0x40001c00
 8003d80:	40002000 	.word	0x40002000

08003d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	f023 0201 	bic.w	r2, r3, #1
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	f023 030a 	bic.w	r3, r3, #10
 8003dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	621a      	str	r2, [r3, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	371c      	adds	r7, #28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b087      	sub	sp, #28
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0210 	bic.w	r2, r3, #16
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	621a      	str	r2, [r3, #32]
}
 8003e36:	bf00      	nop
 8003e38:	371c      	adds	r7, #28
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e42:	b480      	push	{r7}
 8003e44:	b085      	sub	sp, #20
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f043 0307 	orr.w	r3, r3, #7
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	021a      	lsls	r2, r3, #8
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e05a      	b.n	8003f86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a21      	ldr	r2, [pc, #132]	; (8003f94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1c:	d01d      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1d      	ldr	r2, [pc, #116]	; (8003f98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1b      	ldr	r2, [pc, #108]	; (8003f9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1a      	ldr	r2, [pc, #104]	; (8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a18      	ldr	r2, [pc, #96]	; (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a17      	ldr	r2, [pc, #92]	; (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a15      	ldr	r2, [pc, #84]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10c      	bne.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40001800 	.word	0x40001800

08003fb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e03f      	b.n	800406a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fd fd64 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2224      	movs	r2, #36	; 0x24
 8004008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800401a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 fddb 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004030:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695a      	ldr	r2, [r3, #20]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004040:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004050:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b08a      	sub	sp, #40	; 0x28
 8004076:	af02      	add	r7, sp, #8
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b20      	cmp	r3, #32
 8004090:	d17c      	bne.n	800418c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_Transmit+0x2c>
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e075      	b.n	800418e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_UART_Transmit+0x3e>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e06e      	b.n	800418e <HAL_UART_Transmit+0x11c>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2221      	movs	r2, #33	; 0x21
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c6:	f7fd ff2f 	bl	8001f28 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e0:	d108      	bne.n	80040f4 <HAL_UART_Transmit+0x82>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e003      	b.n	80040fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004104:	e02a      	b.n	800415c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2200      	movs	r2, #0
 800410e:	2180      	movs	r1, #128	; 0x80
 8004110:	68f8      	ldr	r0, [r7, #12]
 8004112:	f000 fb1f 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e036      	b.n	800418e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3302      	adds	r3, #2
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e007      	b.n	800414e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1cf      	bne.n	8004106 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2140      	movs	r1, #64	; 0x40
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 faef 	bl	8004754 <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e006      	b.n	800418e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	e000      	b.n	800418e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
  }
}
 800418e:	4618      	mov	r0, r3
 8004190:	3720      	adds	r7, #32
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	60f8      	str	r0, [r7, #12]
 800419e:	60b9      	str	r1, [r7, #8]
 80041a0:	4613      	mov	r3, r2
 80041a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d11d      	bne.n	80041ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <HAL_UART_Receive_IT+0x26>
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e016      	b.n	80041ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Receive_IT+0x38>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e00f      	b.n	80041ee <HAL_UART_Receive_IT+0x58>
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	461a      	mov	r2, r3
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fb24 	bl	8004830 <UART_Start_Receive_IT>
 80041e8:	4603      	mov	r3, r0
 80041ea:	e000      	b.n	80041ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b0ba      	sub	sp, #232	; 0xe8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004236:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d009      	beq.n	800425e <HAL_UART_IRQHandler+0x66>
 800424a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fc03 	bl	8004a62 <UART_Receive_IT>
      return;
 800425c:	e256      	b.n	800470c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800425e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80de 	beq.w	8004424 <HAL_UART_IRQHandler+0x22c>
 8004268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d106      	bne.n	8004282 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004278:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 80d1 	beq.w	8004424 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00b      	beq.n	80042a6 <HAL_UART_IRQHandler+0xae>
 800428e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f043 0201 	orr.w	r2, r3, #1
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_UART_IRQHandler+0xd2>
 80042b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_UART_IRQHandler+0xf6>
 80042d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f043 0204 	orr.w	r2, r3, #4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <HAL_UART_IRQHandler+0x126>
 80042fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042fe:	f003 0320 	and.w	r3, r3, #32
 8004302:	2b00      	cmp	r3, #0
 8004304:	d105      	bne.n	8004312 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	f043 0208 	orr.w	r2, r3, #8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 81ed 	beq.w	8004702 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_UART_IRQHandler+0x14e>
 8004334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fb8e 	bl	8004a62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d103      	bne.n	8004372 <HAL_UART_IRQHandler+0x17a>
 800436a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04f      	beq.n	8004412 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fa96 	bl	80048a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004382:	2b40      	cmp	r3, #64	; 0x40
 8004384:	d141      	bne.n	800440a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3314      	adds	r3, #20
 800438c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800439c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3314      	adds	r3, #20
 80043ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043c2:	e841 2300 	strex	r3, r2, [r1]
 80043c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1d9      	bne.n	8004386 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d013      	beq.n	8004402 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	4a7d      	ldr	r2, [pc, #500]	; (80045d4 <HAL_UART_IRQHandler+0x3dc>)
 80043e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fd ff4f 	bl	800228a <HAL_DMA_Abort_IT>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043fc:	4610      	mov	r0, r2
 80043fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004400:	e00e      	b.n	8004420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 f990 	bl	8004728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004408:	e00a      	b.n	8004420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f98c 	bl	8004728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004410:	e006      	b.n	8004420 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f988 	bl	8004728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800441e:	e170      	b.n	8004702 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	bf00      	nop
    return;
 8004422:	e16e      	b.n	8004702 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004428:	2b01      	cmp	r3, #1
 800442a:	f040 814a 	bne.w	80046c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800442e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 8143 	beq.w	80046c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 813c 	beq.w	80046c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60bb      	str	r3, [r7, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	f040 80b4 	bne.w	80045d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800447c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 8140 	beq.w	8004706 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800448a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800448e:	429a      	cmp	r2, r3
 8004490:	f080 8139 	bcs.w	8004706 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800449a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	f000 8088 	beq.w	80045ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	330c      	adds	r3, #12
 80044d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1d9      	bne.n	80044aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3314      	adds	r3, #20
 80044fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3314      	adds	r3, #20
 8004516:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800451a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800451e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004522:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800452c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e1      	bne.n	80044f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3314      	adds	r3, #20
 8004538:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004548:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3314      	adds	r3, #20
 8004552:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004556:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004558:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800455c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800455e:	e841 2300 	strex	r3, r2, [r1]
 8004562:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004564:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1e3      	bne.n	8004532 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2220      	movs	r2, #32
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	f023 0310 	bic.w	r3, r3, #16
 800458e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	330c      	adds	r3, #12
 8004598:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800459c:	65ba      	str	r2, [r7, #88]	; 0x58
 800459e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e3      	bne.n	8004578 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd fdf8 	bl	80021aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	4619      	mov	r1, r3
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f8b6 	bl	800473c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045d0:	e099      	b.n	8004706 <HAL_UART_IRQHandler+0x50e>
 80045d2:	bf00      	nop
 80045d4:	0800496b 	.word	0x0800496b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 808b 	beq.w	800470a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80045f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8086 	beq.w	800470a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	330c      	adds	r3, #12
 8004604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004608:	e853 3f00 	ldrex	r3, [r3]
 800460c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004614:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004622:	647a      	str	r2, [r7, #68]	; 0x44
 8004624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e3      	bne.n	80045fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3314      	adds	r3, #20
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	e853 3f00 	ldrex	r3, [r3]
 8004644:	623b      	str	r3, [r7, #32]
   return(result);
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f023 0301 	bic.w	r3, r3, #1
 800464c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	3314      	adds	r3, #20
 8004656:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800465a:	633a      	str	r2, [r7, #48]	; 0x30
 800465c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e3      	bne.n	8004636 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	330c      	adds	r3, #12
 8004682:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	60fb      	str	r3, [r7, #12]
   return(result);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0310 	bic.w	r3, r3, #16
 8004692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	69b9      	ldr	r1, [r7, #24]
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	617b      	str	r3, [r7, #20]
   return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e3      	bne.n	800467c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f83e 	bl	800473c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046c0:	e023      	b.n	800470a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <HAL_UART_IRQHandler+0x4ea>
 80046ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f959 	bl	8004992 <UART_Transmit_IT>
    return;
 80046e0:	e014      	b.n	800470c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <HAL_UART_IRQHandler+0x514>
 80046ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f999 	bl	8004a32 <UART_EndTransmit_IT>
    return;
 8004700:	e004      	b.n	800470c <HAL_UART_IRQHandler+0x514>
    return;
 8004702:	bf00      	nop
 8004704:	e002      	b.n	800470c <HAL_UART_IRQHandler+0x514>
      return;
 8004706:	bf00      	nop
 8004708:	e000      	b.n	800470c <HAL_UART_IRQHandler+0x514>
      return;
 800470a:	bf00      	nop
  }
}
 800470c:	37e8      	adds	r7, #232	; 0xe8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop

08004714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b090      	sub	sp, #64	; 0x40
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	4613      	mov	r3, r2
 8004762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004764:	e050      	b.n	8004808 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476c:	d04c      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800476e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004770:	2b00      	cmp	r3, #0
 8004772:	d007      	beq.n	8004784 <UART_WaitOnFlagUntilTimeout+0x30>
 8004774:	f7fd fbd8 	bl	8001f28 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004780:	429a      	cmp	r2, r3
 8004782:	d241      	bcs.n	8004808 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	330c      	adds	r3, #12
 800478a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	330c      	adds	r3, #12
 80047a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047a4:	637a      	str	r2, [r7, #52]	; 0x34
 80047a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e5      	bne.n	8004784 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3314      	adds	r3, #20
 80047be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	613b      	str	r3, [r7, #16]
   return(result);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3314      	adds	r3, #20
 80047d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047d8:	623a      	str	r2, [r7, #32]
 80047da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	6a3a      	ldr	r2, [r7, #32]
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e00f      	b.n	8004828 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	4013      	ands	r3, r2
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	429a      	cmp	r2, r3
 8004816:	bf0c      	ite	eq
 8004818:	2301      	moveq	r3, #1
 800481a:	2300      	movne	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	79fb      	ldrb	r3, [r7, #7]
 8004822:	429a      	cmp	r2, r3
 8004824:	d09f      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3740      	adds	r7, #64	; 0x40
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2222      	movs	r2, #34	; 0x22
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004874:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f042 0220 	orr.w	r2, r2, #32
 8004894:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b095      	sub	sp, #84	; 0x54
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	330c      	adds	r3, #12
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330c      	adds	r3, #12
 80048ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048cc:	643a      	str	r2, [r7, #64]	; 0x40
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004900:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b01      	cmp	r3, #1
 800491a:	d119      	bne.n	8004950 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	60bb      	str	r3, [r7, #8]
   return(result);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	647b      	str	r3, [r7, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800493c:	61ba      	str	r2, [r7, #24]
 800493e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6979      	ldr	r1, [r7, #20]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	613b      	str	r3, [r7, #16]
   return(result);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e5      	bne.n	800491c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800495e:	bf00      	nop
 8004960:	3754      	adds	r7, #84	; 0x54
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fecf 	bl	8004728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b21      	cmp	r3, #33	; 0x21
 80049a4:	d13e      	bne.n	8004a24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ae:	d114      	bne.n	80049da <UART_Transmit_IT+0x48>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d110      	bne.n	80049da <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	621a      	str	r2, [r3, #32]
 80049d8:	e008      	b.n	80049ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6211      	str	r1, [r2, #32]
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4619      	mov	r1, r3
 80049fa:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fe5e 	bl	8004714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08c      	sub	sp, #48	; 0x30
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b22      	cmp	r3, #34	; 0x22
 8004a74:	f040 80ab 	bne.w	8004bce <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a80:	d117      	bne.n	8004ab2 <UART_Receive_IT+0x50>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d113      	bne.n	8004ab2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab0:	e026      	b.n	8004b00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac4:	d007      	beq.n	8004ad6 <UART_Receive_IT+0x74>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <UART_Receive_IT+0x82>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d106      	bne.n	8004ae4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e008      	b.n	8004af6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	3b01      	subs	r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d15a      	bne.n	8004bca <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0220 	bic.w	r2, r2, #32
 8004b22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d135      	bne.n	8004bc0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	e853 3f00 	ldrex	r3, [r3]
 8004b68:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f023 0310 	bic.w	r3, r3, #16
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	330c      	adds	r3, #12
 8004b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7a:	623a      	str	r2, [r7, #32]
 8004b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	69f9      	ldr	r1, [r7, #28]
 8004b80:	6a3a      	ldr	r2, [r7, #32]
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e5      	bne.n	8004b5a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d10a      	bne.n	8004bb2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fdbf 	bl	800473c <HAL_UARTEx_RxEventCallback>
 8004bbe:	e002      	b.n	8004bc6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fc fd15 	bl	80015f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e002      	b.n	8004bd0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3730      	adds	r7, #48	; 0x30
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	b09f      	sub	sp, #124	; 0x7c
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	68d9      	ldr	r1, [r3, #12]
 8004bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	ea40 0301 	orr.w	r3, r0, r1
 8004bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	431a      	orrs	r2, r3
 8004c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c26:	430b      	orrs	r3, r1
 8004c28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	6999      	ldr	r1, [r3, #24]
 8004c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	ea40 0301 	orr.w	r3, r0, r1
 8004c40:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8004c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <UART_SetConfig+0x218>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d00e      	beq.n	8004c6a <UART_SetConfig+0x92>
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	4b68      	ldr	r3, [pc, #416]	; (8004df4 <UART_SetConfig+0x21c>)
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d009      	beq.n	8004c6a <UART_SetConfig+0x92>
 8004c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b67      	ldr	r3, [pc, #412]	; (8004df8 <UART_SetConfig+0x220>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d004      	beq.n	8004c6a <UART_SetConfig+0x92>
 8004c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b65      	ldr	r3, [pc, #404]	; (8004dfc <UART_SetConfig+0x224>)
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d103      	bne.n	8004c72 <UART_SetConfig+0x9a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c6a:	f7fe f80f 	bl	8002c8c <HAL_RCC_GetPCLK2Freq>
 8004c6e:	6778      	str	r0, [r7, #116]	; 0x74
 8004c70:	e002      	b.n	8004c78 <UART_SetConfig+0xa0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c72:	f7fd fff7 	bl	8002c64 <HAL_RCC_GetPCLK1Freq>
 8004c76:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c80:	f040 80c0 	bne.w	8004e04 <UART_SetConfig+0x22c>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c86:	461c      	mov	r4, r3
 8004c88:	f04f 0500 	mov.w	r5, #0
 8004c8c:	4622      	mov	r2, r4
 8004c8e:	462b      	mov	r3, r5
 8004c90:	1891      	adds	r1, r2, r2
 8004c92:	6439      	str	r1, [r7, #64]	; 0x40
 8004c94:	415b      	adcs	r3, r3
 8004c96:	647b      	str	r3, [r7, #68]	; 0x44
 8004c98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c9c:	1912      	adds	r2, r2, r4
 8004c9e:	eb45 0303 	adc.w	r3, r5, r3
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f04f 0100 	mov.w	r1, #0
 8004caa:	00d9      	lsls	r1, r3, #3
 8004cac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cb0:	00d0      	lsls	r0, r2, #3
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	1911      	adds	r1, r2, r4
 8004cb8:	6639      	str	r1, [r7, #96]	; 0x60
 8004cba:	416b      	adcs	r3, r5
 8004cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f04f 0300 	mov.w	r3, #0
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cd4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004cd8:	f7fb fdd8 	bl	800088c <__aeabi_uldivmod>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4b47      	ldr	r3, [pc, #284]	; (8004e00 <UART_SetConfig+0x228>)
 8004ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	011e      	lsls	r6, r3, #4
 8004cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cec:	461c      	mov	r4, r3
 8004cee:	f04f 0500 	mov.w	r5, #0
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	1891      	adds	r1, r2, r2
 8004cf8:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfa:	415b      	adcs	r3, r3
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004d02:	1912      	adds	r2, r2, r4
 8004d04:	eb45 0303 	adc.w	r3, r5, r3
 8004d08:	f04f 0000 	mov.w	r0, #0
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	00d9      	lsls	r1, r3, #3
 8004d12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d16:	00d0      	lsls	r0, r2, #3
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	1911      	adds	r1, r2, r4
 8004d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d20:	416b      	adcs	r3, r5
 8004d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d32:	415b      	adcs	r3, r3
 8004d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004d3e:	f7fb fda5 	bl	800088c <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4b2e      	ldr	r3, [pc, #184]	; (8004e00 <UART_SetConfig+0x228>)
 8004d48:	fba3 1302 	umull	r1, r3, r3, r2
 8004d4c:	095b      	lsrs	r3, r3, #5
 8004d4e:	2164      	movs	r1, #100	; 0x64
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	3332      	adds	r3, #50	; 0x32
 8004d5a:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <UART_SetConfig+0x228>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d68:	441e      	add	r6, r3
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f04f 0100 	mov.w	r1, #0
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	1894      	adds	r4, r2, r2
 8004d78:	623c      	str	r4, [r7, #32]
 8004d7a:	415b      	adcs	r3, r3
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d82:	1812      	adds	r2, r2, r0
 8004d84:	eb41 0303 	adc.w	r3, r1, r3
 8004d88:	f04f 0400 	mov.w	r4, #0
 8004d8c:	f04f 0500 	mov.w	r5, #0
 8004d90:	00dd      	lsls	r5, r3, #3
 8004d92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004d96:	00d4      	lsls	r4, r2, #3
 8004d98:	4622      	mov	r2, r4
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	1814      	adds	r4, r2, r0
 8004d9e:	653c      	str	r4, [r7, #80]	; 0x50
 8004da0:	414b      	adcs	r3, r1
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
 8004da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	461a      	mov	r2, r3
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	1891      	adds	r1, r2, r2
 8004db0:	61b9      	str	r1, [r7, #24]
 8004db2:	415b      	adcs	r3, r3
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004dbe:	f7fb fd65 	bl	800088c <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <UART_SetConfig+0x228>)
 8004dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	2164      	movs	r1, #100	; 0x64
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	3332      	adds	r3, #50	; 0x32
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <UART_SetConfig+0x228>)
 8004ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8004de0:	095b      	lsrs	r3, r3, #5
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4432      	add	r2, r6
 8004dec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dee:	e0c3      	b.n	8004f78 <UART_SetConfig+0x3a0>
 8004df0:	40011000 	.word	0x40011000
 8004df4:	40011400 	.word	0x40011400
 8004df8:	40011800 	.word	0x40011800
 8004dfc:	40011c00 	.word	0x40011c00
 8004e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e06:	461c      	mov	r4, r3
 8004e08:	f04f 0500 	mov.w	r5, #0
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	462b      	mov	r3, r5
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	6139      	str	r1, [r7, #16]
 8004e14:	415b      	adcs	r3, r3
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004e1c:	1912      	adds	r2, r2, r4
 8004e1e:	eb45 0303 	adc.w	r3, r5, r3
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f04f 0100 	mov.w	r1, #0
 8004e2a:	00d9      	lsls	r1, r3, #3
 8004e2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e30:	00d0      	lsls	r0, r2, #3
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	eb12 0804 	adds.w	r8, r2, r4
 8004e3a:	eb43 0905 	adc.w	r9, r3, r5
 8004e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f04f 0100 	mov.w	r1, #0
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	008b      	lsls	r3, r1, #2
 8004e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e56:	0082      	lsls	r2, r0, #2
 8004e58:	4640      	mov	r0, r8
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	f7fb fd16 	bl	800088c <__aeabi_uldivmod>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4b47      	ldr	r3, [pc, #284]	; (8004f84 <UART_SetConfig+0x3ac>)
 8004e66:	fba3 2302 	umull	r2, r3, r3, r2
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	011e      	lsls	r6, r3, #4
 8004e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e70:	4618      	mov	r0, r3
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	1894      	adds	r4, r2, r2
 8004e7c:	60bc      	str	r4, [r7, #8]
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e86:	1812      	adds	r2, r2, r0
 8004e88:	eb41 0303 	adc.w	r3, r1, r3
 8004e8c:	f04f 0400 	mov.w	r4, #0
 8004e90:	f04f 0500 	mov.w	r5, #0
 8004e94:	00dd      	lsls	r5, r3, #3
 8004e96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e9a:	00d4      	lsls	r4, r2, #3
 8004e9c:	4622      	mov	r2, r4
 8004e9e:	462b      	mov	r3, r5
 8004ea0:	1814      	adds	r4, r2, r0
 8004ea2:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ea4:	414b      	adcs	r3, r1
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f04f 0100 	mov.w	r1, #0
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	008b      	lsls	r3, r1, #2
 8004ebc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ec0:	0082      	lsls	r2, r0, #2
 8004ec2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ec6:	f7fb fce1 	bl	800088c <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4b2d      	ldr	r3, [pc, #180]	; (8004f84 <UART_SetConfig+0x3ac>)
 8004ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	2164      	movs	r1, #100	; 0x64
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	3332      	adds	r3, #50	; 0x32
 8004ee2:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <UART_SetConfig+0x3ac>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eee:	441e      	add	r6, r3
 8004ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	1894      	adds	r4, r2, r2
 8004efe:	603c      	str	r4, [r7, #0]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	607b      	str	r3, [r7, #4]
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	1812      	adds	r2, r2, r0
 8004f0a:	eb41 0303 	adc.w	r3, r1, r3
 8004f0e:	f04f 0400 	mov.w	r4, #0
 8004f12:	f04f 0500 	mov.w	r5, #0
 8004f16:	00dd      	lsls	r5, r3, #3
 8004f18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f1c:	00d4      	lsls	r4, r2, #3
 8004f1e:	4622      	mov	r2, r4
 8004f20:	462b      	mov	r3, r5
 8004f22:	eb12 0a00 	adds.w	sl, r2, r0
 8004f26:	eb43 0b01 	adc.w	fp, r3, r1
 8004f2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	008b      	lsls	r3, r1, #2
 8004f3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f42:	0082      	lsls	r2, r0, #2
 8004f44:	4650      	mov	r0, sl
 8004f46:	4659      	mov	r1, fp
 8004f48:	f7fb fca0 	bl	800088c <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <UART_SetConfig+0x3ac>)
 8004f52:	fba3 1302 	umull	r1, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2164      	movs	r1, #100	; 0x64
 8004f5a:	fb01 f303 	mul.w	r3, r1, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	3332      	adds	r3, #50	; 0x32
 8004f64:	4a07      	ldr	r2, [pc, #28]	; (8004f84 <UART_SetConfig+0x3ac>)
 8004f66:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4432      	add	r2, r6
 8004f76:	609a      	str	r2, [r3, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	377c      	adds	r7, #124	; 0x7c
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f82:	bf00      	nop
 8004f84:	51eb851f 	.word	0x51eb851f

08004f88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f88:	b084      	sub	sp, #16
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
 8004f92:	f107 001c 	add.w	r0, r7, #28
 8004f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d122      	bne.n	8004fe6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d105      	bne.n	8004fda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fa7c 	bl	80054d8 <USB_CoreReset>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e01a      	b.n	800501c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa70 	bl	80054d8 <USB_CoreReset>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
 800500e:	e005      	b.n	800501c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800501e:	2b01      	cmp	r3, #1
 8005020:	d10b      	bne.n	800503a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f043 0206 	orr.w	r2, r3, #6
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005046:	b004      	add	sp, #16
 8005048:	4770      	bx	lr

0800504a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 0201 	bic.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d115      	bne.n	80050ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800509a:	2001      	movs	r0, #1
 800509c:	f7fc ff50 	bl	8001f40 <HAL_Delay>
      ms++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3301      	adds	r3, #1
 80050a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa08 	bl	80054bc <USB_GetMode>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d01e      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b31      	cmp	r3, #49	; 0x31
 80050b6:	d9f0      	bls.n	800509a <USB_SetCurrentMode+0x2e>
 80050b8:	e01a      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d115      	bne.n	80050ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050cc:	2001      	movs	r0, #1
 80050ce:	f7fc ff37 	bl	8001f40 <HAL_Delay>
      ms++;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3301      	adds	r3, #1
 80050d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 f9ef 	bl	80054bc <USB_GetMode>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <USB_SetCurrentMode+0x84>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b31      	cmp	r3, #49	; 0x31
 80050e8:	d9f0      	bls.n	80050cc <USB_SetCurrentMode+0x60>
 80050ea:	e001      	b.n	80050f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e005      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b32      	cmp	r3, #50	; 0x32
 80050f4:	d101      	bne.n	80050fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005104:	b084      	sub	sp, #16
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800511e:	2300      	movs	r3, #0
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	e009      	b.n	8005138 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	2200      	movs	r2, #0
 8005130:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3301      	adds	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0e      	cmp	r3, #14
 800513c:	d9f2      	bls.n	8005124 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11c      	bne.n	800517e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e005      	b.n	800518a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519c:	4619      	mov	r1, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a4:	461a      	mov	r2, r3
 80051a6:	680b      	ldr	r3, [r1, #0]
 80051a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10c      	bne.n	80051ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d104      	bne.n	80051c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051b6:	2100      	movs	r1, #0
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f945 	bl	8005448 <USB_SetDevSpeed>
 80051be:	e008      	b.n	80051d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051c0:	2101      	movs	r1, #1
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f940 	bl	8005448 <USB_SetDevSpeed>
 80051c8:	e003      	b.n	80051d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051ca:	2103      	movs	r1, #3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f93b 	bl	8005448 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d2:	2110      	movs	r1, #16
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f8f3 	bl	80053c0 <USB_FlushTxFifo>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f90f 	bl	8005408 <USB_FlushRxFifo>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051fa:	461a      	mov	r2, r3
 80051fc:	2300      	movs	r3, #0
 80051fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	461a      	mov	r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005218:	2300      	movs	r3, #0
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	e043      	b.n	80052a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	015a      	lsls	r2, r3, #5
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005234:	d118      	bne.n	8005268 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	461a      	mov	r2, r3
 800524a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e013      	b.n	800527a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525e:	461a      	mov	r2, r3
 8005260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e008      	b.n	800527a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005274:	461a      	mov	r2, r3
 8005276:	2300      	movs	r3, #0
 8005278:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4413      	add	r3, r2
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	461a      	mov	r2, r3
 8005288:	2300      	movs	r3, #0
 800528a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	461a      	mov	r2, r3
 800529a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800529e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	3301      	adds	r3, #1
 80052a4:	613b      	str	r3, [r7, #16]
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3b7      	bcc.n	800521e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	e043      	b.n	800533c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052ca:	d118      	bne.n	80052fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10a      	bne.n	80052e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	461a      	mov	r2, r3
 80052e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e013      	b.n	8005310 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	e008      	b.n	8005310 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	461a      	mov	r2, r3
 800530c:	2300      	movs	r3, #0
 800530e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532e:	461a      	mov	r2, r3
 8005330:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005334:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	3301      	adds	r3, #1
 800533a:	613b      	str	r3, [r7, #16]
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	429a      	cmp	r2, r3
 8005342:	d3b7      	bcc.n	80052b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005352:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005356:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005364:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	2b00      	cmp	r3, #0
 800536a:	d105      	bne.n	8005378 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f043 0210 	orr.w	r2, r3, #16
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	4b0f      	ldr	r3, [pc, #60]	; (80053bc <USB_DevInit+0x2b8>)
 800537e:	4313      	orrs	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f043 0208 	orr.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005398:	2b01      	cmp	r3, #1
 800539a:	d107      	bne.n	80053ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	f043 0304 	orr.w	r3, r3, #4
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053b8:	b004      	add	sp, #16
 80053ba:	4770      	bx	lr
 80053bc:	803c3800 	.word	0x803c3800

080053c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
 80053e0:	4a08      	ldr	r2, [pc, #32]	; (8005404 <USB_FlushTxFifo+0x44>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e006      	b.n	80053f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b20      	cmp	r3, #32
 80053f4:	d0f1      	beq.n	80053da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	00030d40 	.word	0x00030d40

08005408 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2210      	movs	r2, #16
 8005418:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]
 8005420:	4a08      	ldr	r2, [pc, #32]	; (8005444 <USB_FlushRxFifo+0x3c>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d901      	bls.n	800542a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e006      	b.n	8005438 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0310 	and.w	r3, r3, #16
 8005432:	2b10      	cmp	r3, #16
 8005434:	d0f1      	beq.n	800541a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	00030d40 	.word	0x00030d40

08005448 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	68f9      	ldr	r1, [r7, #12]
 8005464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005468:	4313      	orrs	r3, r2
 800546a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800547a:	b480      	push	{r7}
 800547c:	b085      	sub	sp, #20
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005494:	f023 0303 	bic.w	r3, r3, #3
 8005498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a8:	f043 0302 	orr.w	r3, r3, #2
 80054ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	f003 0301 	and.w	r3, r3, #1
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	4a13      	ldr	r2, [pc, #76]	; (8005538 <USB_CoreReset+0x60>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e01a      	b.n	800552a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	daf3      	bge.n	80054e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80054fc:	2300      	movs	r3, #0
 80054fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f043 0201 	orr.w	r2, r3, #1
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	4a09      	ldr	r2, [pc, #36]	; (8005538 <USB_CoreReset+0x60>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e006      	b.n	800552a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b01      	cmp	r3, #1
 8005526:	d0f1      	beq.n	800550c <USB_CoreReset+0x34>

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	00030d40 	.word	0x00030d40

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000a18 	.word	0x20000a18

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4d0d      	ldr	r5, [pc, #52]	; (8005580 <__libc_init_array+0x38>)
 800554c:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 800554e:	1b64      	subs	r4, r4, r5
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	2600      	movs	r6, #0
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	4d0b      	ldr	r5, [pc, #44]	; (8005588 <__libc_init_array+0x40>)
 800555a:	4c0c      	ldr	r4, [pc, #48]	; (800558c <__libc_init_array+0x44>)
 800555c:	f000 ff76 	bl	800644c <_init>
 8005560:	1b64      	subs	r4, r4, r5
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	2600      	movs	r6, #0
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f855 3b04 	ldr.w	r3, [r5], #4
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08006d20 	.word	0x08006d20
 8005584:	08006d20 	.word	0x08006d20
 8005588:	08006d20 	.word	0x08006d20
 800558c:	08006d24 	.word	0x08006d24

08005590 <memset>:
 8005590:	4402      	add	r2, r0
 8005592:	4603      	mov	r3, r0
 8005594:	4293      	cmp	r3, r2
 8005596:	d100      	bne.n	800559a <memset+0xa>
 8005598:	4770      	bx	lr
 800559a:	f803 1b01 	strb.w	r1, [r3], #1
 800559e:	e7f9      	b.n	8005594 <memset+0x4>

080055a0 <iprintf>:
 80055a0:	b40f      	push	{r0, r1, r2, r3}
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <iprintf+0x2c>)
 80055a4:	b513      	push	{r0, r1, r4, lr}
 80055a6:	681c      	ldr	r4, [r3, #0]
 80055a8:	b124      	cbz	r4, 80055b4 <iprintf+0x14>
 80055aa:	69a3      	ldr	r3, [r4, #24]
 80055ac:	b913      	cbnz	r3, 80055b4 <iprintf+0x14>
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 f866 	bl	8005680 <__sinit>
 80055b4:	ab05      	add	r3, sp, #20
 80055b6:	9a04      	ldr	r2, [sp, #16]
 80055b8:	68a1      	ldr	r1, [r4, #8]
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 f983 	bl	80058c8 <_vfiprintf_r>
 80055c2:	b002      	add	sp, #8
 80055c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055c8:	b004      	add	sp, #16
 80055ca:	4770      	bx	lr
 80055cc:	20000a18 	.word	0x20000a18

080055d0 <std>:
 80055d0:	2300      	movs	r3, #0
 80055d2:	b510      	push	{r4, lr}
 80055d4:	4604      	mov	r4, r0
 80055d6:	e9c0 3300 	strd	r3, r3, [r0]
 80055da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055de:	6083      	str	r3, [r0, #8]
 80055e0:	8181      	strh	r1, [r0, #12]
 80055e2:	6643      	str	r3, [r0, #100]	; 0x64
 80055e4:	81c2      	strh	r2, [r0, #14]
 80055e6:	6183      	str	r3, [r0, #24]
 80055e8:	4619      	mov	r1, r3
 80055ea:	2208      	movs	r2, #8
 80055ec:	305c      	adds	r0, #92	; 0x5c
 80055ee:	f7ff ffcf 	bl	8005590 <memset>
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <std+0x38>)
 80055f4:	6263      	str	r3, [r4, #36]	; 0x24
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <std+0x3c>)
 80055f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <std+0x40>)
 80055fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std+0x44>)
 8005600:	6224      	str	r4, [r4, #32]
 8005602:	6323      	str	r3, [r4, #48]	; 0x30
 8005604:	bd10      	pop	{r4, pc}
 8005606:	bf00      	nop
 8005608:	08005e71 	.word	0x08005e71
 800560c:	08005e93 	.word	0x08005e93
 8005610:	08005ecb 	.word	0x08005ecb
 8005614:	08005eef 	.word	0x08005eef

08005618 <_cleanup_r>:
 8005618:	4901      	ldr	r1, [pc, #4]	; (8005620 <_cleanup_r+0x8>)
 800561a:	f000 b8af 	b.w	800577c <_fwalk_reent>
 800561e:	bf00      	nop
 8005620:	080061c9 	.word	0x080061c9

08005624 <__sfmoreglue>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	1e4a      	subs	r2, r1, #1
 8005628:	2568      	movs	r5, #104	; 0x68
 800562a:	4355      	muls	r5, r2
 800562c:	460e      	mov	r6, r1
 800562e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005632:	f000 f8c5 	bl	80057c0 <_malloc_r>
 8005636:	4604      	mov	r4, r0
 8005638:	b140      	cbz	r0, 800564c <__sfmoreglue+0x28>
 800563a:	2100      	movs	r1, #0
 800563c:	e9c0 1600 	strd	r1, r6, [r0]
 8005640:	300c      	adds	r0, #12
 8005642:	60a0      	str	r0, [r4, #8]
 8005644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005648:	f7ff ffa2 	bl	8005590 <memset>
 800564c:	4620      	mov	r0, r4
 800564e:	bd70      	pop	{r4, r5, r6, pc}

08005650 <__sfp_lock_acquire>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__sfp_lock_acquire+0x8>)
 8005652:	f000 b8b3 	b.w	80057bc <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	2000ad34 	.word	0x2000ad34

0800565c <__sfp_lock_release>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__sfp_lock_release+0x8>)
 800565e:	f000 b8ae 	b.w	80057be <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	2000ad34 	.word	0x2000ad34

08005668 <__sinit_lock_acquire>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sinit_lock_acquire+0x8>)
 800566a:	f000 b8a7 	b.w	80057bc <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	2000ad2f 	.word	0x2000ad2f

08005674 <__sinit_lock_release>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sinit_lock_release+0x8>)
 8005676:	f000 b8a2 	b.w	80057be <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	2000ad2f 	.word	0x2000ad2f

08005680 <__sinit>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	f7ff fff0 	bl	8005668 <__sinit_lock_acquire>
 8005688:	69a3      	ldr	r3, [r4, #24]
 800568a:	b11b      	cbz	r3, 8005694 <__sinit+0x14>
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f7ff bff0 	b.w	8005674 <__sinit_lock_release>
 8005694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005698:	6523      	str	r3, [r4, #80]	; 0x50
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <__sinit+0x68>)
 800569c:	4a13      	ldr	r2, [pc, #76]	; (80056ec <__sinit+0x6c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	bf04      	itt	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	61a3      	streq	r3, [r4, #24]
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 f820 	bl	80056f0 <__sfp>
 80056b0:	6060      	str	r0, [r4, #4]
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f81c 	bl	80056f0 <__sfp>
 80056b8:	60a0      	str	r0, [r4, #8]
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f818 	bl	80056f0 <__sfp>
 80056c0:	2200      	movs	r2, #0
 80056c2:	60e0      	str	r0, [r4, #12]
 80056c4:	2104      	movs	r1, #4
 80056c6:	6860      	ldr	r0, [r4, #4]
 80056c8:	f7ff ff82 	bl	80055d0 <std>
 80056cc:	68a0      	ldr	r0, [r4, #8]
 80056ce:	2201      	movs	r2, #1
 80056d0:	2109      	movs	r1, #9
 80056d2:	f7ff ff7d 	bl	80055d0 <std>
 80056d6:	68e0      	ldr	r0, [r4, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	2112      	movs	r1, #18
 80056dc:	f7ff ff78 	bl	80055d0 <std>
 80056e0:	2301      	movs	r3, #1
 80056e2:	61a3      	str	r3, [r4, #24]
 80056e4:	e7d2      	b.n	800568c <__sinit+0xc>
 80056e6:	bf00      	nop
 80056e8:	08006c80 	.word	0x08006c80
 80056ec:	08005619 	.word	0x08005619

080056f0 <__sfp>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	4607      	mov	r7, r0
 80056f4:	f7ff ffac 	bl	8005650 <__sfp_lock_acquire>
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <__sfp+0x84>)
 80056fa:	681e      	ldr	r6, [r3, #0]
 80056fc:	69b3      	ldr	r3, [r6, #24]
 80056fe:	b913      	cbnz	r3, 8005706 <__sfp+0x16>
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ffbd 	bl	8005680 <__sinit>
 8005706:	3648      	adds	r6, #72	; 0x48
 8005708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800570c:	3b01      	subs	r3, #1
 800570e:	d503      	bpl.n	8005718 <__sfp+0x28>
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	b30b      	cbz	r3, 8005758 <__sfp+0x68>
 8005714:	6836      	ldr	r6, [r6, #0]
 8005716:	e7f7      	b.n	8005708 <__sfp+0x18>
 8005718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800571c:	b9d5      	cbnz	r5, 8005754 <__sfp+0x64>
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <__sfp+0x88>)
 8005720:	60e3      	str	r3, [r4, #12]
 8005722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005726:	6665      	str	r5, [r4, #100]	; 0x64
 8005728:	f000 f847 	bl	80057ba <__retarget_lock_init_recursive>
 800572c:	f7ff ff96 	bl	800565c <__sfp_lock_release>
 8005730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	61a5      	str	r5, [r4, #24]
 800573c:	2208      	movs	r2, #8
 800573e:	4629      	mov	r1, r5
 8005740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005744:	f7ff ff24 	bl	8005590 <memset>
 8005748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800574c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005750:	4620      	mov	r0, r4
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	3468      	adds	r4, #104	; 0x68
 8005756:	e7d9      	b.n	800570c <__sfp+0x1c>
 8005758:	2104      	movs	r1, #4
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff ff62 	bl	8005624 <__sfmoreglue>
 8005760:	4604      	mov	r4, r0
 8005762:	6030      	str	r0, [r6, #0]
 8005764:	2800      	cmp	r0, #0
 8005766:	d1d5      	bne.n	8005714 <__sfp+0x24>
 8005768:	f7ff ff78 	bl	800565c <__sfp_lock_release>
 800576c:	230c      	movs	r3, #12
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	e7ee      	b.n	8005750 <__sfp+0x60>
 8005772:	bf00      	nop
 8005774:	08006c80 	.word	0x08006c80
 8005778:	ffff0001 	.word	0xffff0001

0800577c <_fwalk_reent>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	4606      	mov	r6, r0
 8005782:	4688      	mov	r8, r1
 8005784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005788:	2700      	movs	r7, #0
 800578a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800578e:	f1b9 0901 	subs.w	r9, r9, #1
 8005792:	d505      	bpl.n	80057a0 <_fwalk_reent+0x24>
 8005794:	6824      	ldr	r4, [r4, #0]
 8005796:	2c00      	cmp	r4, #0
 8005798:	d1f7      	bne.n	800578a <_fwalk_reent+0xe>
 800579a:	4638      	mov	r0, r7
 800579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a0:	89ab      	ldrh	r3, [r5, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d907      	bls.n	80057b6 <_fwalk_reent+0x3a>
 80057a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057aa:	3301      	adds	r3, #1
 80057ac:	d003      	beq.n	80057b6 <_fwalk_reent+0x3a>
 80057ae:	4629      	mov	r1, r5
 80057b0:	4630      	mov	r0, r6
 80057b2:	47c0      	blx	r8
 80057b4:	4307      	orrs	r7, r0
 80057b6:	3568      	adds	r5, #104	; 0x68
 80057b8:	e7e9      	b.n	800578e <_fwalk_reent+0x12>

080057ba <__retarget_lock_init_recursive>:
 80057ba:	4770      	bx	lr

080057bc <__retarget_lock_acquire_recursive>:
 80057bc:	4770      	bx	lr

080057be <__retarget_lock_release_recursive>:
 80057be:	4770      	bx	lr

080057c0 <_malloc_r>:
 80057c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c2:	1ccd      	adds	r5, r1, #3
 80057c4:	f025 0503 	bic.w	r5, r5, #3
 80057c8:	3508      	adds	r5, #8
 80057ca:	2d0c      	cmp	r5, #12
 80057cc:	bf38      	it	cc
 80057ce:	250c      	movcc	r5, #12
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	4606      	mov	r6, r0
 80057d4:	db01      	blt.n	80057da <_malloc_r+0x1a>
 80057d6:	42a9      	cmp	r1, r5
 80057d8:	d903      	bls.n	80057e2 <_malloc_r+0x22>
 80057da:	230c      	movs	r3, #12
 80057dc:	6033      	str	r3, [r6, #0]
 80057de:	2000      	movs	r0, #0
 80057e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057e2:	f000 fda3 	bl	800632c <__malloc_lock>
 80057e6:	4921      	ldr	r1, [pc, #132]	; (800586c <_malloc_r+0xac>)
 80057e8:	680a      	ldr	r2, [r1, #0]
 80057ea:	4614      	mov	r4, r2
 80057ec:	b99c      	cbnz	r4, 8005816 <_malloc_r+0x56>
 80057ee:	4f20      	ldr	r7, [pc, #128]	; (8005870 <_malloc_r+0xb0>)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	b923      	cbnz	r3, 80057fe <_malloc_r+0x3e>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4630      	mov	r0, r6
 80057f8:	f000 fb2a 	bl	8005e50 <_sbrk_r>
 80057fc:	6038      	str	r0, [r7, #0]
 80057fe:	4629      	mov	r1, r5
 8005800:	4630      	mov	r0, r6
 8005802:	f000 fb25 	bl	8005e50 <_sbrk_r>
 8005806:	1c43      	adds	r3, r0, #1
 8005808:	d123      	bne.n	8005852 <_malloc_r+0x92>
 800580a:	230c      	movs	r3, #12
 800580c:	6033      	str	r3, [r6, #0]
 800580e:	4630      	mov	r0, r6
 8005810:	f000 fd92 	bl	8006338 <__malloc_unlock>
 8005814:	e7e3      	b.n	80057de <_malloc_r+0x1e>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	1b5b      	subs	r3, r3, r5
 800581a:	d417      	bmi.n	800584c <_malloc_r+0x8c>
 800581c:	2b0b      	cmp	r3, #11
 800581e:	d903      	bls.n	8005828 <_malloc_r+0x68>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	441c      	add	r4, r3
 8005824:	6025      	str	r5, [r4, #0]
 8005826:	e004      	b.n	8005832 <_malloc_r+0x72>
 8005828:	6863      	ldr	r3, [r4, #4]
 800582a:	42a2      	cmp	r2, r4
 800582c:	bf0c      	ite	eq
 800582e:	600b      	streq	r3, [r1, #0]
 8005830:	6053      	strne	r3, [r2, #4]
 8005832:	4630      	mov	r0, r6
 8005834:	f000 fd80 	bl	8006338 <__malloc_unlock>
 8005838:	f104 000b 	add.w	r0, r4, #11
 800583c:	1d23      	adds	r3, r4, #4
 800583e:	f020 0007 	bic.w	r0, r0, #7
 8005842:	1ac2      	subs	r2, r0, r3
 8005844:	d0cc      	beq.n	80057e0 <_malloc_r+0x20>
 8005846:	1a1b      	subs	r3, r3, r0
 8005848:	50a3      	str	r3, [r4, r2]
 800584a:	e7c9      	b.n	80057e0 <_malloc_r+0x20>
 800584c:	4622      	mov	r2, r4
 800584e:	6864      	ldr	r4, [r4, #4]
 8005850:	e7cc      	b.n	80057ec <_malloc_r+0x2c>
 8005852:	1cc4      	adds	r4, r0, #3
 8005854:	f024 0403 	bic.w	r4, r4, #3
 8005858:	42a0      	cmp	r0, r4
 800585a:	d0e3      	beq.n	8005824 <_malloc_r+0x64>
 800585c:	1a21      	subs	r1, r4, r0
 800585e:	4630      	mov	r0, r6
 8005860:	f000 faf6 	bl	8005e50 <_sbrk_r>
 8005864:	3001      	adds	r0, #1
 8005866:	d1dd      	bne.n	8005824 <_malloc_r+0x64>
 8005868:	e7cf      	b.n	800580a <_malloc_r+0x4a>
 800586a:	bf00      	nop
 800586c:	20000aac 	.word	0x20000aac
 8005870:	20000ab0 	.word	0x20000ab0

08005874 <__sfputc_r>:
 8005874:	6893      	ldr	r3, [r2, #8]
 8005876:	3b01      	subs	r3, #1
 8005878:	2b00      	cmp	r3, #0
 800587a:	b410      	push	{r4}
 800587c:	6093      	str	r3, [r2, #8]
 800587e:	da08      	bge.n	8005892 <__sfputc_r+0x1e>
 8005880:	6994      	ldr	r4, [r2, #24]
 8005882:	42a3      	cmp	r3, r4
 8005884:	db01      	blt.n	800588a <__sfputc_r+0x16>
 8005886:	290a      	cmp	r1, #10
 8005888:	d103      	bne.n	8005892 <__sfputc_r+0x1e>
 800588a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800588e:	f000 bb33 	b.w	8005ef8 <__swbuf_r>
 8005892:	6813      	ldr	r3, [r2, #0]
 8005894:	1c58      	adds	r0, r3, #1
 8005896:	6010      	str	r0, [r2, #0]
 8005898:	7019      	strb	r1, [r3, #0]
 800589a:	4608      	mov	r0, r1
 800589c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <__sfputs_r>:
 80058a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a4:	4606      	mov	r6, r0
 80058a6:	460f      	mov	r7, r1
 80058a8:	4614      	mov	r4, r2
 80058aa:	18d5      	adds	r5, r2, r3
 80058ac:	42ac      	cmp	r4, r5
 80058ae:	d101      	bne.n	80058b4 <__sfputs_r+0x12>
 80058b0:	2000      	movs	r0, #0
 80058b2:	e007      	b.n	80058c4 <__sfputs_r+0x22>
 80058b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b8:	463a      	mov	r2, r7
 80058ba:	4630      	mov	r0, r6
 80058bc:	f7ff ffda 	bl	8005874 <__sfputc_r>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d1f3      	bne.n	80058ac <__sfputs_r+0xa>
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c8 <_vfiprintf_r>:
 80058c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	b09d      	sub	sp, #116	; 0x74
 80058d0:	4614      	mov	r4, r2
 80058d2:	4698      	mov	r8, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	b118      	cbz	r0, 80058e0 <_vfiprintf_r+0x18>
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b90b      	cbnz	r3, 80058e0 <_vfiprintf_r+0x18>
 80058dc:	f7ff fed0 	bl	8005680 <__sinit>
 80058e0:	4b89      	ldr	r3, [pc, #548]	; (8005b08 <_vfiprintf_r+0x240>)
 80058e2:	429d      	cmp	r5, r3
 80058e4:	d11b      	bne.n	800591e <_vfiprintf_r+0x56>
 80058e6:	6875      	ldr	r5, [r6, #4]
 80058e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058ea:	07d9      	lsls	r1, r3, #31
 80058ec:	d405      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	059a      	lsls	r2, r3, #22
 80058f2:	d402      	bmi.n	80058fa <_vfiprintf_r+0x32>
 80058f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058f6:	f7ff ff61 	bl	80057bc <__retarget_lock_acquire_recursive>
 80058fa:	89ab      	ldrh	r3, [r5, #12]
 80058fc:	071b      	lsls	r3, r3, #28
 80058fe:	d501      	bpl.n	8005904 <_vfiprintf_r+0x3c>
 8005900:	692b      	ldr	r3, [r5, #16]
 8005902:	b9eb      	cbnz	r3, 8005940 <_vfiprintf_r+0x78>
 8005904:	4629      	mov	r1, r5
 8005906:	4630      	mov	r0, r6
 8005908:	f000 fb5a 	bl	8005fc0 <__swsetup_r>
 800590c:	b1c0      	cbz	r0, 8005940 <_vfiprintf_r+0x78>
 800590e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005910:	07dc      	lsls	r4, r3, #31
 8005912:	d50e      	bpl.n	8005932 <_vfiprintf_r+0x6a>
 8005914:	f04f 30ff 	mov.w	r0, #4294967295
 8005918:	b01d      	add	sp, #116	; 0x74
 800591a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800591e:	4b7b      	ldr	r3, [pc, #492]	; (8005b0c <_vfiprintf_r+0x244>)
 8005920:	429d      	cmp	r5, r3
 8005922:	d101      	bne.n	8005928 <_vfiprintf_r+0x60>
 8005924:	68b5      	ldr	r5, [r6, #8]
 8005926:	e7df      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005928:	4b79      	ldr	r3, [pc, #484]	; (8005b10 <_vfiprintf_r+0x248>)
 800592a:	429d      	cmp	r5, r3
 800592c:	bf08      	it	eq
 800592e:	68f5      	ldreq	r5, [r6, #12]
 8005930:	e7da      	b.n	80058e8 <_vfiprintf_r+0x20>
 8005932:	89ab      	ldrh	r3, [r5, #12]
 8005934:	0598      	lsls	r0, r3, #22
 8005936:	d4ed      	bmi.n	8005914 <_vfiprintf_r+0x4c>
 8005938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800593a:	f7ff ff40 	bl	80057be <__retarget_lock_release_recursive>
 800593e:	e7e9      	b.n	8005914 <_vfiprintf_r+0x4c>
 8005940:	2300      	movs	r3, #0
 8005942:	9309      	str	r3, [sp, #36]	; 0x24
 8005944:	2320      	movs	r3, #32
 8005946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800594a:	f8cd 800c 	str.w	r8, [sp, #12]
 800594e:	2330      	movs	r3, #48	; 0x30
 8005950:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b14 <_vfiprintf_r+0x24c>
 8005954:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005958:	f04f 0901 	mov.w	r9, #1
 800595c:	4623      	mov	r3, r4
 800595e:	469a      	mov	sl, r3
 8005960:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005964:	b10a      	cbz	r2, 800596a <_vfiprintf_r+0xa2>
 8005966:	2a25      	cmp	r2, #37	; 0x25
 8005968:	d1f9      	bne.n	800595e <_vfiprintf_r+0x96>
 800596a:	ebba 0b04 	subs.w	fp, sl, r4
 800596e:	d00b      	beq.n	8005988 <_vfiprintf_r+0xc0>
 8005970:	465b      	mov	r3, fp
 8005972:	4622      	mov	r2, r4
 8005974:	4629      	mov	r1, r5
 8005976:	4630      	mov	r0, r6
 8005978:	f7ff ff93 	bl	80058a2 <__sfputs_r>
 800597c:	3001      	adds	r0, #1
 800597e:	f000 80aa 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005984:	445a      	add	r2, fp
 8005986:	9209      	str	r2, [sp, #36]	; 0x24
 8005988:	f89a 3000 	ldrb.w	r3, [sl]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80a2 	beq.w	8005ad6 <_vfiprintf_r+0x20e>
 8005992:	2300      	movs	r3, #0
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800599c:	f10a 0a01 	add.w	sl, sl, #1
 80059a0:	9304      	str	r3, [sp, #16]
 80059a2:	9307      	str	r3, [sp, #28]
 80059a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a8:	931a      	str	r3, [sp, #104]	; 0x68
 80059aa:	4654      	mov	r4, sl
 80059ac:	2205      	movs	r2, #5
 80059ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b2:	4858      	ldr	r0, [pc, #352]	; (8005b14 <_vfiprintf_r+0x24c>)
 80059b4:	f7fa fc34 	bl	8000220 <memchr>
 80059b8:	9a04      	ldr	r2, [sp, #16]
 80059ba:	b9d8      	cbnz	r0, 80059f4 <_vfiprintf_r+0x12c>
 80059bc:	06d1      	lsls	r1, r2, #27
 80059be:	bf44      	itt	mi
 80059c0:	2320      	movmi	r3, #32
 80059c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c6:	0713      	lsls	r3, r2, #28
 80059c8:	bf44      	itt	mi
 80059ca:	232b      	movmi	r3, #43	; 0x2b
 80059cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d0:	f89a 3000 	ldrb.w	r3, [sl]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d015      	beq.n	8005a04 <_vfiprintf_r+0x13c>
 80059d8:	9a07      	ldr	r2, [sp, #28]
 80059da:	4654      	mov	r4, sl
 80059dc:	2000      	movs	r0, #0
 80059de:	f04f 0c0a 	mov.w	ip, #10
 80059e2:	4621      	mov	r1, r4
 80059e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e8:	3b30      	subs	r3, #48	; 0x30
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d94e      	bls.n	8005a8c <_vfiprintf_r+0x1c4>
 80059ee:	b1b0      	cbz	r0, 8005a1e <_vfiprintf_r+0x156>
 80059f0:	9207      	str	r2, [sp, #28]
 80059f2:	e014      	b.n	8005a1e <_vfiprintf_r+0x156>
 80059f4:	eba0 0308 	sub.w	r3, r0, r8
 80059f8:	fa09 f303 	lsl.w	r3, r9, r3
 80059fc:	4313      	orrs	r3, r2
 80059fe:	9304      	str	r3, [sp, #16]
 8005a00:	46a2      	mov	sl, r4
 8005a02:	e7d2      	b.n	80059aa <_vfiprintf_r+0xe2>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1d19      	adds	r1, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	9103      	str	r1, [sp, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bfbb      	ittet	lt
 8005a10:	425b      	neglt	r3, r3
 8005a12:	f042 0202 	orrlt.w	r2, r2, #2
 8005a16:	9307      	strge	r3, [sp, #28]
 8005a18:	9307      	strlt	r3, [sp, #28]
 8005a1a:	bfb8      	it	lt
 8005a1c:	9204      	strlt	r2, [sp, #16]
 8005a1e:	7823      	ldrb	r3, [r4, #0]
 8005a20:	2b2e      	cmp	r3, #46	; 0x2e
 8005a22:	d10c      	bne.n	8005a3e <_vfiprintf_r+0x176>
 8005a24:	7863      	ldrb	r3, [r4, #1]
 8005a26:	2b2a      	cmp	r3, #42	; 0x2a
 8005a28:	d135      	bne.n	8005a96 <_vfiprintf_r+0x1ce>
 8005a2a:	9b03      	ldr	r3, [sp, #12]
 8005a2c:	1d1a      	adds	r2, r3, #4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	9203      	str	r2, [sp, #12]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	bfb8      	it	lt
 8005a36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a3a:	3402      	adds	r4, #2
 8005a3c:	9305      	str	r3, [sp, #20]
 8005a3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b24 <_vfiprintf_r+0x25c>
 8005a42:	7821      	ldrb	r1, [r4, #0]
 8005a44:	2203      	movs	r2, #3
 8005a46:	4650      	mov	r0, sl
 8005a48:	f7fa fbea 	bl	8000220 <memchr>
 8005a4c:	b140      	cbz	r0, 8005a60 <_vfiprintf_r+0x198>
 8005a4e:	2340      	movs	r3, #64	; 0x40
 8005a50:	eba0 000a 	sub.w	r0, r0, sl
 8005a54:	fa03 f000 	lsl.w	r0, r3, r0
 8005a58:	9b04      	ldr	r3, [sp, #16]
 8005a5a:	4303      	orrs	r3, r0
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	9304      	str	r3, [sp, #16]
 8005a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a64:	482c      	ldr	r0, [pc, #176]	; (8005b18 <_vfiprintf_r+0x250>)
 8005a66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a6a:	2206      	movs	r2, #6
 8005a6c:	f7fa fbd8 	bl	8000220 <memchr>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	d03f      	beq.n	8005af4 <_vfiprintf_r+0x22c>
 8005a74:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <_vfiprintf_r+0x254>)
 8005a76:	bb1b      	cbnz	r3, 8005ac0 <_vfiprintf_r+0x1f8>
 8005a78:	9b03      	ldr	r3, [sp, #12]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	3308      	adds	r3, #8
 8005a82:	9303      	str	r3, [sp, #12]
 8005a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a86:	443b      	add	r3, r7
 8005a88:	9309      	str	r3, [sp, #36]	; 0x24
 8005a8a:	e767      	b.n	800595c <_vfiprintf_r+0x94>
 8005a8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a90:	460c      	mov	r4, r1
 8005a92:	2001      	movs	r0, #1
 8005a94:	e7a5      	b.n	80059e2 <_vfiprintf_r+0x11a>
 8005a96:	2300      	movs	r3, #0
 8005a98:	3401      	adds	r4, #1
 8005a9a:	9305      	str	r3, [sp, #20]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 0c0a 	mov.w	ip, #10
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa8:	3a30      	subs	r2, #48	; 0x30
 8005aaa:	2a09      	cmp	r2, #9
 8005aac:	d903      	bls.n	8005ab6 <_vfiprintf_r+0x1ee>
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0c5      	beq.n	8005a3e <_vfiprintf_r+0x176>
 8005ab2:	9105      	str	r1, [sp, #20]
 8005ab4:	e7c3      	b.n	8005a3e <_vfiprintf_r+0x176>
 8005ab6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aba:	4604      	mov	r4, r0
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7f0      	b.n	8005aa2 <_vfiprintf_r+0x1da>
 8005ac0:	ab03      	add	r3, sp, #12
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <_vfiprintf_r+0x258>)
 8005ac8:	a904      	add	r1, sp, #16
 8005aca:	4630      	mov	r0, r6
 8005acc:	f3af 8000 	nop.w
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	1c78      	adds	r0, r7, #1
 8005ad4:	d1d6      	bne.n	8005a84 <_vfiprintf_r+0x1bc>
 8005ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad8:	07d9      	lsls	r1, r3, #31
 8005ada:	d405      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005adc:	89ab      	ldrh	r3, [r5, #12]
 8005ade:	059a      	lsls	r2, r3, #22
 8005ae0:	d402      	bmi.n	8005ae8 <_vfiprintf_r+0x220>
 8005ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae4:	f7ff fe6b 	bl	80057be <__retarget_lock_release_recursive>
 8005ae8:	89ab      	ldrh	r3, [r5, #12]
 8005aea:	065b      	lsls	r3, r3, #25
 8005aec:	f53f af12 	bmi.w	8005914 <_vfiprintf_r+0x4c>
 8005af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005af2:	e711      	b.n	8005918 <_vfiprintf_r+0x50>
 8005af4:	ab03      	add	r3, sp, #12
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	462a      	mov	r2, r5
 8005afa:	4b09      	ldr	r3, [pc, #36]	; (8005b20 <_vfiprintf_r+0x258>)
 8005afc:	a904      	add	r1, sp, #16
 8005afe:	4630      	mov	r0, r6
 8005b00:	f000 f880 	bl	8005c04 <_printf_i>
 8005b04:	e7e4      	b.n	8005ad0 <_vfiprintf_r+0x208>
 8005b06:	bf00      	nop
 8005b08:	08006ca4 	.word	0x08006ca4
 8005b0c:	08006cc4 	.word	0x08006cc4
 8005b10:	08006c84 	.word	0x08006c84
 8005b14:	08006ce4 	.word	0x08006ce4
 8005b18:	08006cee 	.word	0x08006cee
 8005b1c:	00000000 	.word	0x00000000
 8005b20:	080058a3 	.word	0x080058a3
 8005b24:	08006cea 	.word	0x08006cea

08005b28 <_printf_common>:
 8005b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	4616      	mov	r6, r2
 8005b2e:	4699      	mov	r9, r3
 8005b30:	688a      	ldr	r2, [r1, #8]
 8005b32:	690b      	ldr	r3, [r1, #16]
 8005b34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	bfb8      	it	lt
 8005b3c:	4613      	movlt	r3, r2
 8005b3e:	6033      	str	r3, [r6, #0]
 8005b40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b44:	4607      	mov	r7, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	b10a      	cbz	r2, 8005b4e <_printf_common+0x26>
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	6033      	str	r3, [r6, #0]
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	0699      	lsls	r1, r3, #26
 8005b52:	bf42      	ittt	mi
 8005b54:	6833      	ldrmi	r3, [r6, #0]
 8005b56:	3302      	addmi	r3, #2
 8005b58:	6033      	strmi	r3, [r6, #0]
 8005b5a:	6825      	ldr	r5, [r4, #0]
 8005b5c:	f015 0506 	ands.w	r5, r5, #6
 8005b60:	d106      	bne.n	8005b70 <_printf_common+0x48>
 8005b62:	f104 0a19 	add.w	sl, r4, #25
 8005b66:	68e3      	ldr	r3, [r4, #12]
 8005b68:	6832      	ldr	r2, [r6, #0]
 8005b6a:	1a9b      	subs	r3, r3, r2
 8005b6c:	42ab      	cmp	r3, r5
 8005b6e:	dc26      	bgt.n	8005bbe <_printf_common+0x96>
 8005b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b74:	1e13      	subs	r3, r2, #0
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	bf18      	it	ne
 8005b7a:	2301      	movne	r3, #1
 8005b7c:	0692      	lsls	r2, r2, #26
 8005b7e:	d42b      	bmi.n	8005bd8 <_printf_common+0xb0>
 8005b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b84:	4649      	mov	r1, r9
 8005b86:	4638      	mov	r0, r7
 8005b88:	47c0      	blx	r8
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d01e      	beq.n	8005bcc <_printf_common+0xa4>
 8005b8e:	6823      	ldr	r3, [r4, #0]
 8005b90:	68e5      	ldr	r5, [r4, #12]
 8005b92:	6832      	ldr	r2, [r6, #0]
 8005b94:	f003 0306 	and.w	r3, r3, #6
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	bf08      	it	eq
 8005b9c:	1aad      	subeq	r5, r5, r2
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	bf0c      	ite	eq
 8005ba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ba8:	2500      	movne	r5, #0
 8005baa:	4293      	cmp	r3, r2
 8005bac:	bfc4      	itt	gt
 8005bae:	1a9b      	subgt	r3, r3, r2
 8005bb0:	18ed      	addgt	r5, r5, r3
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	341a      	adds	r4, #26
 8005bb6:	42b5      	cmp	r5, r6
 8005bb8:	d11a      	bne.n	8005bf0 <_printf_common+0xc8>
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e008      	b.n	8005bd0 <_printf_common+0xa8>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4652      	mov	r2, sl
 8005bc2:	4649      	mov	r1, r9
 8005bc4:	4638      	mov	r0, r7
 8005bc6:	47c0      	blx	r8
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d103      	bne.n	8005bd4 <_printf_common+0xac>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	e7c6      	b.n	8005b66 <_printf_common+0x3e>
 8005bd8:	18e1      	adds	r1, r4, r3
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	2030      	movs	r0, #48	; 0x30
 8005bde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005be2:	4422      	add	r2, r4
 8005be4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bec:	3302      	adds	r3, #2
 8005bee:	e7c7      	b.n	8005b80 <_printf_common+0x58>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	4622      	mov	r2, r4
 8005bf4:	4649      	mov	r1, r9
 8005bf6:	4638      	mov	r0, r7
 8005bf8:	47c0      	blx	r8
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d0e6      	beq.n	8005bcc <_printf_common+0xa4>
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7d9      	b.n	8005bb6 <_printf_common+0x8e>
	...

08005c04 <_printf_i>:
 8005c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	460c      	mov	r4, r1
 8005c0a:	4691      	mov	r9, r2
 8005c0c:	7e27      	ldrb	r7, [r4, #24]
 8005c0e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c10:	2f78      	cmp	r7, #120	; 0x78
 8005c12:	4680      	mov	r8, r0
 8005c14:	469a      	mov	sl, r3
 8005c16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c1a:	d807      	bhi.n	8005c2c <_printf_i+0x28>
 8005c1c:	2f62      	cmp	r7, #98	; 0x62
 8005c1e:	d80a      	bhi.n	8005c36 <_printf_i+0x32>
 8005c20:	2f00      	cmp	r7, #0
 8005c22:	f000 80d8 	beq.w	8005dd6 <_printf_i+0x1d2>
 8005c26:	2f58      	cmp	r7, #88	; 0x58
 8005c28:	f000 80a3 	beq.w	8005d72 <_printf_i+0x16e>
 8005c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c34:	e03a      	b.n	8005cac <_printf_i+0xa8>
 8005c36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c3a:	2b15      	cmp	r3, #21
 8005c3c:	d8f6      	bhi.n	8005c2c <_printf_i+0x28>
 8005c3e:	a001      	add	r0, pc, #4	; (adr r0, 8005c44 <_printf_i+0x40>)
 8005c40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c44:	08005c9d 	.word	0x08005c9d
 8005c48:	08005cb1 	.word	0x08005cb1
 8005c4c:	08005c2d 	.word	0x08005c2d
 8005c50:	08005c2d 	.word	0x08005c2d
 8005c54:	08005c2d 	.word	0x08005c2d
 8005c58:	08005c2d 	.word	0x08005c2d
 8005c5c:	08005cb1 	.word	0x08005cb1
 8005c60:	08005c2d 	.word	0x08005c2d
 8005c64:	08005c2d 	.word	0x08005c2d
 8005c68:	08005c2d 	.word	0x08005c2d
 8005c6c:	08005c2d 	.word	0x08005c2d
 8005c70:	08005dbd 	.word	0x08005dbd
 8005c74:	08005ce1 	.word	0x08005ce1
 8005c78:	08005d9f 	.word	0x08005d9f
 8005c7c:	08005c2d 	.word	0x08005c2d
 8005c80:	08005c2d 	.word	0x08005c2d
 8005c84:	08005ddf 	.word	0x08005ddf
 8005c88:	08005c2d 	.word	0x08005c2d
 8005c8c:	08005ce1 	.word	0x08005ce1
 8005c90:	08005c2d 	.word	0x08005c2d
 8005c94:	08005c2d 	.word	0x08005c2d
 8005c98:	08005da7 	.word	0x08005da7
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	1d1a      	adds	r2, r3, #4
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	600a      	str	r2, [r1, #0]
 8005ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ca8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005cac:	2301      	movs	r3, #1
 8005cae:	e0a3      	b.n	8005df8 <_printf_i+0x1f4>
 8005cb0:	6825      	ldr	r5, [r4, #0]
 8005cb2:	6808      	ldr	r0, [r1, #0]
 8005cb4:	062e      	lsls	r6, r5, #24
 8005cb6:	f100 0304 	add.w	r3, r0, #4
 8005cba:	d50a      	bpl.n	8005cd2 <_printf_i+0xce>
 8005cbc:	6805      	ldr	r5, [r0, #0]
 8005cbe:	600b      	str	r3, [r1, #0]
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	da03      	bge.n	8005ccc <_printf_i+0xc8>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	426d      	negs	r5, r5
 8005cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ccc:	485e      	ldr	r0, [pc, #376]	; (8005e48 <_printf_i+0x244>)
 8005cce:	230a      	movs	r3, #10
 8005cd0:	e019      	b.n	8005d06 <_printf_i+0x102>
 8005cd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005cd6:	6805      	ldr	r5, [r0, #0]
 8005cd8:	600b      	str	r3, [r1, #0]
 8005cda:	bf18      	it	ne
 8005cdc:	b22d      	sxthne	r5, r5
 8005cde:	e7ef      	b.n	8005cc0 <_printf_i+0xbc>
 8005ce0:	680b      	ldr	r3, [r1, #0]
 8005ce2:	6825      	ldr	r5, [r4, #0]
 8005ce4:	1d18      	adds	r0, r3, #4
 8005ce6:	6008      	str	r0, [r1, #0]
 8005ce8:	0628      	lsls	r0, r5, #24
 8005cea:	d501      	bpl.n	8005cf0 <_printf_i+0xec>
 8005cec:	681d      	ldr	r5, [r3, #0]
 8005cee:	e002      	b.n	8005cf6 <_printf_i+0xf2>
 8005cf0:	0669      	lsls	r1, r5, #25
 8005cf2:	d5fb      	bpl.n	8005cec <_printf_i+0xe8>
 8005cf4:	881d      	ldrh	r5, [r3, #0]
 8005cf6:	4854      	ldr	r0, [pc, #336]	; (8005e48 <_printf_i+0x244>)
 8005cf8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2308      	moveq	r3, #8
 8005cfe:	230a      	movne	r3, #10
 8005d00:	2100      	movs	r1, #0
 8005d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d06:	6866      	ldr	r6, [r4, #4]
 8005d08:	60a6      	str	r6, [r4, #8]
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	bfa2      	ittt	ge
 8005d0e:	6821      	ldrge	r1, [r4, #0]
 8005d10:	f021 0104 	bicge.w	r1, r1, #4
 8005d14:	6021      	strge	r1, [r4, #0]
 8005d16:	b90d      	cbnz	r5, 8005d1c <_printf_i+0x118>
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	d04d      	beq.n	8005db8 <_printf_i+0x1b4>
 8005d1c:	4616      	mov	r6, r2
 8005d1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d22:	fb03 5711 	mls	r7, r3, r1, r5
 8005d26:	5dc7      	ldrb	r7, [r0, r7]
 8005d28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d2c:	462f      	mov	r7, r5
 8005d2e:	42bb      	cmp	r3, r7
 8005d30:	460d      	mov	r5, r1
 8005d32:	d9f4      	bls.n	8005d1e <_printf_i+0x11a>
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d10b      	bne.n	8005d50 <_printf_i+0x14c>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	07df      	lsls	r7, r3, #31
 8005d3c:	d508      	bpl.n	8005d50 <_printf_i+0x14c>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	6861      	ldr	r1, [r4, #4]
 8005d42:	4299      	cmp	r1, r3
 8005d44:	bfde      	ittt	le
 8005d46:	2330      	movle	r3, #48	; 0x30
 8005d48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d50:	1b92      	subs	r2, r2, r6
 8005d52:	6122      	str	r2, [r4, #16]
 8005d54:	f8cd a000 	str.w	sl, [sp]
 8005d58:	464b      	mov	r3, r9
 8005d5a:	aa03      	add	r2, sp, #12
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4640      	mov	r0, r8
 8005d60:	f7ff fee2 	bl	8005b28 <_printf_common>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d14c      	bne.n	8005e02 <_printf_i+0x1fe>
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	b004      	add	sp, #16
 8005d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d72:	4835      	ldr	r0, [pc, #212]	; (8005e48 <_printf_i+0x244>)
 8005d74:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	680e      	ldr	r6, [r1, #0]
 8005d7c:	061f      	lsls	r7, r3, #24
 8005d7e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d82:	600e      	str	r6, [r1, #0]
 8005d84:	d514      	bpl.n	8005db0 <_printf_i+0x1ac>
 8005d86:	07d9      	lsls	r1, r3, #31
 8005d88:	bf44      	itt	mi
 8005d8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d8e:	6023      	strmi	r3, [r4, #0]
 8005d90:	b91d      	cbnz	r5, 8005d9a <_printf_i+0x196>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	f023 0320 	bic.w	r3, r3, #32
 8005d98:	6023      	str	r3, [r4, #0]
 8005d9a:	2310      	movs	r3, #16
 8005d9c:	e7b0      	b.n	8005d00 <_printf_i+0xfc>
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	f043 0320 	orr.w	r3, r3, #32
 8005da4:	6023      	str	r3, [r4, #0]
 8005da6:	2378      	movs	r3, #120	; 0x78
 8005da8:	4828      	ldr	r0, [pc, #160]	; (8005e4c <_printf_i+0x248>)
 8005daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dae:	e7e3      	b.n	8005d78 <_printf_i+0x174>
 8005db0:	065e      	lsls	r6, r3, #25
 8005db2:	bf48      	it	mi
 8005db4:	b2ad      	uxthmi	r5, r5
 8005db6:	e7e6      	b.n	8005d86 <_printf_i+0x182>
 8005db8:	4616      	mov	r6, r2
 8005dba:	e7bb      	b.n	8005d34 <_printf_i+0x130>
 8005dbc:	680b      	ldr	r3, [r1, #0]
 8005dbe:	6826      	ldr	r6, [r4, #0]
 8005dc0:	6960      	ldr	r0, [r4, #20]
 8005dc2:	1d1d      	adds	r5, r3, #4
 8005dc4:	600d      	str	r5, [r1, #0]
 8005dc6:	0635      	lsls	r5, r6, #24
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0x1cc>
 8005dcc:	6018      	str	r0, [r3, #0]
 8005dce:	e002      	b.n	8005dd6 <_printf_i+0x1d2>
 8005dd0:	0671      	lsls	r1, r6, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0x1c8>
 8005dd4:	8018      	strh	r0, [r3, #0]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	4616      	mov	r6, r2
 8005ddc:	e7ba      	b.n	8005d54 <_printf_i+0x150>
 8005dde:	680b      	ldr	r3, [r1, #0]
 8005de0:	1d1a      	adds	r2, r3, #4
 8005de2:	600a      	str	r2, [r1, #0]
 8005de4:	681e      	ldr	r6, [r3, #0]
 8005de6:	6862      	ldr	r2, [r4, #4]
 8005de8:	2100      	movs	r1, #0
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7fa fa18 	bl	8000220 <memchr>
 8005df0:	b108      	cbz	r0, 8005df6 <_printf_i+0x1f2>
 8005df2:	1b80      	subs	r0, r0, r6
 8005df4:	6060      	str	r0, [r4, #4]
 8005df6:	6863      	ldr	r3, [r4, #4]
 8005df8:	6123      	str	r3, [r4, #16]
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e00:	e7a8      	b.n	8005d54 <_printf_i+0x150>
 8005e02:	6923      	ldr	r3, [r4, #16]
 8005e04:	4632      	mov	r2, r6
 8005e06:	4649      	mov	r1, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	47d0      	blx	sl
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d0ab      	beq.n	8005d68 <_printf_i+0x164>
 8005e10:	6823      	ldr	r3, [r4, #0]
 8005e12:	079b      	lsls	r3, r3, #30
 8005e14:	d413      	bmi.n	8005e3e <_printf_i+0x23a>
 8005e16:	68e0      	ldr	r0, [r4, #12]
 8005e18:	9b03      	ldr	r3, [sp, #12]
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	bfb8      	it	lt
 8005e1e:	4618      	movlt	r0, r3
 8005e20:	e7a4      	b.n	8005d6c <_printf_i+0x168>
 8005e22:	2301      	movs	r3, #1
 8005e24:	4632      	mov	r2, r6
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	47d0      	blx	sl
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d09b      	beq.n	8005d68 <_printf_i+0x164>
 8005e30:	3501      	adds	r5, #1
 8005e32:	68e3      	ldr	r3, [r4, #12]
 8005e34:	9903      	ldr	r1, [sp, #12]
 8005e36:	1a5b      	subs	r3, r3, r1
 8005e38:	42ab      	cmp	r3, r5
 8005e3a:	dcf2      	bgt.n	8005e22 <_printf_i+0x21e>
 8005e3c:	e7eb      	b.n	8005e16 <_printf_i+0x212>
 8005e3e:	2500      	movs	r5, #0
 8005e40:	f104 0619 	add.w	r6, r4, #25
 8005e44:	e7f5      	b.n	8005e32 <_printf_i+0x22e>
 8005e46:	bf00      	nop
 8005e48:	08006cf5 	.word	0x08006cf5
 8005e4c:	08006d06 	.word	0x08006d06

08005e50 <_sbrk_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d06      	ldr	r5, [pc, #24]	; (8005e6c <_sbrk_r+0x1c>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	f7fb ff8c 	bl	8001d78 <_sbrk>
 8005e60:	1c43      	adds	r3, r0, #1
 8005e62:	d102      	bne.n	8005e6a <_sbrk_r+0x1a>
 8005e64:	682b      	ldr	r3, [r5, #0]
 8005e66:	b103      	cbz	r3, 8005e6a <_sbrk_r+0x1a>
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	bd38      	pop	{r3, r4, r5, pc}
 8005e6c:	2000ad38 	.word	0x2000ad38

08005e70 <__sread>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	460c      	mov	r4, r1
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	f000 fab4 	bl	80063e4 <_read_r>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	bfab      	itete	ge
 8005e80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e82:	89a3      	ldrhlt	r3, [r4, #12]
 8005e84:	181b      	addge	r3, r3, r0
 8005e86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e8a:	bfac      	ite	ge
 8005e8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e8e:	81a3      	strhlt	r3, [r4, #12]
 8005e90:	bd10      	pop	{r4, pc}

08005e92 <__swrite>:
 8005e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	461f      	mov	r7, r3
 8005e98:	898b      	ldrh	r3, [r1, #12]
 8005e9a:	05db      	lsls	r3, r3, #23
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	460c      	mov	r4, r1
 8005ea0:	4616      	mov	r6, r2
 8005ea2:	d505      	bpl.n	8005eb0 <__swrite+0x1e>
 8005ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f000 f9c8 	bl	8006240 <_lseek_r>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	4632      	mov	r2, r6
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec6:	f000 b869 	b.w	8005f9c <_write_r>

08005eca <__sseek>:
 8005eca:	b510      	push	{r4, lr}
 8005ecc:	460c      	mov	r4, r1
 8005ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed2:	f000 f9b5 	bl	8006240 <_lseek_r>
 8005ed6:	1c43      	adds	r3, r0, #1
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	bf15      	itete	ne
 8005edc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ede:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ee2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ee6:	81a3      	strheq	r3, [r4, #12]
 8005ee8:	bf18      	it	ne
 8005eea:	81a3      	strhne	r3, [r4, #12]
 8005eec:	bd10      	pop	{r4, pc}

08005eee <__sclose>:
 8005eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef2:	f000 b8d3 	b.w	800609c <_close_r>
	...

08005ef8 <__swbuf_r>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	460e      	mov	r6, r1
 8005efc:	4614      	mov	r4, r2
 8005efe:	4605      	mov	r5, r0
 8005f00:	b118      	cbz	r0, 8005f0a <__swbuf_r+0x12>
 8005f02:	6983      	ldr	r3, [r0, #24]
 8005f04:	b90b      	cbnz	r3, 8005f0a <__swbuf_r+0x12>
 8005f06:	f7ff fbbb 	bl	8005680 <__sinit>
 8005f0a:	4b21      	ldr	r3, [pc, #132]	; (8005f90 <__swbuf_r+0x98>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d12b      	bne.n	8005f68 <__swbuf_r+0x70>
 8005f10:	686c      	ldr	r4, [r5, #4]
 8005f12:	69a3      	ldr	r3, [r4, #24]
 8005f14:	60a3      	str	r3, [r4, #8]
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	071a      	lsls	r2, r3, #28
 8005f1a:	d52f      	bpl.n	8005f7c <__swbuf_r+0x84>
 8005f1c:	6923      	ldr	r3, [r4, #16]
 8005f1e:	b36b      	cbz	r3, 8005f7c <__swbuf_r+0x84>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	1ac0      	subs	r0, r0, r3
 8005f26:	6963      	ldr	r3, [r4, #20]
 8005f28:	b2f6      	uxtb	r6, r6
 8005f2a:	4283      	cmp	r3, r0
 8005f2c:	4637      	mov	r7, r6
 8005f2e:	dc04      	bgt.n	8005f3a <__swbuf_r+0x42>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f948 	bl	80061c8 <_fflush_r>
 8005f38:	bb30      	cbnz	r0, 8005f88 <__swbuf_r+0x90>
 8005f3a:	68a3      	ldr	r3, [r4, #8]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	1c5a      	adds	r2, r3, #1
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	701e      	strb	r6, [r3, #0]
 8005f48:	6963      	ldr	r3, [r4, #20]
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	4283      	cmp	r3, r0
 8005f4e:	d004      	beq.n	8005f5a <__swbuf_r+0x62>
 8005f50:	89a3      	ldrh	r3, [r4, #12]
 8005f52:	07db      	lsls	r3, r3, #31
 8005f54:	d506      	bpl.n	8005f64 <__swbuf_r+0x6c>
 8005f56:	2e0a      	cmp	r6, #10
 8005f58:	d104      	bne.n	8005f64 <__swbuf_r+0x6c>
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f000 f933 	bl	80061c8 <_fflush_r>
 8005f62:	b988      	cbnz	r0, 8005f88 <__swbuf_r+0x90>
 8005f64:	4638      	mov	r0, r7
 8005f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <__swbuf_r+0x9c>)
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	d101      	bne.n	8005f72 <__swbuf_r+0x7a>
 8005f6e:	68ac      	ldr	r4, [r5, #8]
 8005f70:	e7cf      	b.n	8005f12 <__swbuf_r+0x1a>
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <__swbuf_r+0xa0>)
 8005f74:	429c      	cmp	r4, r3
 8005f76:	bf08      	it	eq
 8005f78:	68ec      	ldreq	r4, [r5, #12]
 8005f7a:	e7ca      	b.n	8005f12 <__swbuf_r+0x1a>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4628      	mov	r0, r5
 8005f80:	f000 f81e 	bl	8005fc0 <__swsetup_r>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d0cb      	beq.n	8005f20 <__swbuf_r+0x28>
 8005f88:	f04f 37ff 	mov.w	r7, #4294967295
 8005f8c:	e7ea      	b.n	8005f64 <__swbuf_r+0x6c>
 8005f8e:	bf00      	nop
 8005f90:	08006ca4 	.word	0x08006ca4
 8005f94:	08006cc4 	.word	0x08006cc4
 8005f98:	08006c84 	.word	0x08006c84

08005f9c <_write_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	4d07      	ldr	r5, [pc, #28]	; (8005fbc <_write_r+0x20>)
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	602a      	str	r2, [r5, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f7fb fe93 	bl	8001cd6 <_write>
 8005fb0:	1c43      	adds	r3, r0, #1
 8005fb2:	d102      	bne.n	8005fba <_write_r+0x1e>
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	b103      	cbz	r3, 8005fba <_write_r+0x1e>
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	bd38      	pop	{r3, r4, r5, pc}
 8005fbc:	2000ad38 	.word	0x2000ad38

08005fc0 <__swsetup_r>:
 8005fc0:	4b32      	ldr	r3, [pc, #200]	; (800608c <__swsetup_r+0xcc>)
 8005fc2:	b570      	push	{r4, r5, r6, lr}
 8005fc4:	681d      	ldr	r5, [r3, #0]
 8005fc6:	4606      	mov	r6, r0
 8005fc8:	460c      	mov	r4, r1
 8005fca:	b125      	cbz	r5, 8005fd6 <__swsetup_r+0x16>
 8005fcc:	69ab      	ldr	r3, [r5, #24]
 8005fce:	b913      	cbnz	r3, 8005fd6 <__swsetup_r+0x16>
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	f7ff fb55 	bl	8005680 <__sinit>
 8005fd6:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <__swsetup_r+0xd0>)
 8005fd8:	429c      	cmp	r4, r3
 8005fda:	d10f      	bne.n	8005ffc <__swsetup_r+0x3c>
 8005fdc:	686c      	ldr	r4, [r5, #4]
 8005fde:	89a3      	ldrh	r3, [r4, #12]
 8005fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe4:	0719      	lsls	r1, r3, #28
 8005fe6:	d42c      	bmi.n	8006042 <__swsetup_r+0x82>
 8005fe8:	06dd      	lsls	r5, r3, #27
 8005fea:	d411      	bmi.n	8006010 <__swsetup_r+0x50>
 8005fec:	2309      	movs	r3, #9
 8005fee:	6033      	str	r3, [r6, #0]
 8005ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ff4:	81a3      	strh	r3, [r4, #12]
 8005ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffa:	e03e      	b.n	800607a <__swsetup_r+0xba>
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <__swsetup_r+0xd4>)
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d101      	bne.n	8006006 <__swsetup_r+0x46>
 8006002:	68ac      	ldr	r4, [r5, #8]
 8006004:	e7eb      	b.n	8005fde <__swsetup_r+0x1e>
 8006006:	4b24      	ldr	r3, [pc, #144]	; (8006098 <__swsetup_r+0xd8>)
 8006008:	429c      	cmp	r4, r3
 800600a:	bf08      	it	eq
 800600c:	68ec      	ldreq	r4, [r5, #12]
 800600e:	e7e6      	b.n	8005fde <__swsetup_r+0x1e>
 8006010:	0758      	lsls	r0, r3, #29
 8006012:	d512      	bpl.n	800603a <__swsetup_r+0x7a>
 8006014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006016:	b141      	cbz	r1, 800602a <__swsetup_r+0x6a>
 8006018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800601c:	4299      	cmp	r1, r3
 800601e:	d002      	beq.n	8006026 <__swsetup_r+0x66>
 8006020:	4630      	mov	r0, r6
 8006022:	f000 f98f 	bl	8006344 <_free_r>
 8006026:	2300      	movs	r3, #0
 8006028:	6363      	str	r3, [r4, #52]	; 0x34
 800602a:	89a3      	ldrh	r3, [r4, #12]
 800602c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006030:	81a3      	strh	r3, [r4, #12]
 8006032:	2300      	movs	r3, #0
 8006034:	6063      	str	r3, [r4, #4]
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	f043 0308 	orr.w	r3, r3, #8
 8006040:	81a3      	strh	r3, [r4, #12]
 8006042:	6923      	ldr	r3, [r4, #16]
 8006044:	b94b      	cbnz	r3, 800605a <__swsetup_r+0x9a>
 8006046:	89a3      	ldrh	r3, [r4, #12]
 8006048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800604c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006050:	d003      	beq.n	800605a <__swsetup_r+0x9a>
 8006052:	4621      	mov	r1, r4
 8006054:	4630      	mov	r0, r6
 8006056:	f000 f929 	bl	80062ac <__smakebuf_r>
 800605a:	89a0      	ldrh	r0, [r4, #12]
 800605c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006060:	f010 0301 	ands.w	r3, r0, #1
 8006064:	d00a      	beq.n	800607c <__swsetup_r+0xbc>
 8006066:	2300      	movs	r3, #0
 8006068:	60a3      	str	r3, [r4, #8]
 800606a:	6963      	ldr	r3, [r4, #20]
 800606c:	425b      	negs	r3, r3
 800606e:	61a3      	str	r3, [r4, #24]
 8006070:	6923      	ldr	r3, [r4, #16]
 8006072:	b943      	cbnz	r3, 8006086 <__swsetup_r+0xc6>
 8006074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006078:	d1ba      	bne.n	8005ff0 <__swsetup_r+0x30>
 800607a:	bd70      	pop	{r4, r5, r6, pc}
 800607c:	0781      	lsls	r1, r0, #30
 800607e:	bf58      	it	pl
 8006080:	6963      	ldrpl	r3, [r4, #20]
 8006082:	60a3      	str	r3, [r4, #8]
 8006084:	e7f4      	b.n	8006070 <__swsetup_r+0xb0>
 8006086:	2000      	movs	r0, #0
 8006088:	e7f7      	b.n	800607a <__swsetup_r+0xba>
 800608a:	bf00      	nop
 800608c:	20000a18 	.word	0x20000a18
 8006090:	08006ca4 	.word	0x08006ca4
 8006094:	08006cc4 	.word	0x08006cc4
 8006098:	08006c84 	.word	0x08006c84

0800609c <_close_r>:
 800609c:	b538      	push	{r3, r4, r5, lr}
 800609e:	4d06      	ldr	r5, [pc, #24]	; (80060b8 <_close_r+0x1c>)
 80060a0:	2300      	movs	r3, #0
 80060a2:	4604      	mov	r4, r0
 80060a4:	4608      	mov	r0, r1
 80060a6:	602b      	str	r3, [r5, #0]
 80060a8:	f7fb fe31 	bl	8001d0e <_close>
 80060ac:	1c43      	adds	r3, r0, #1
 80060ae:	d102      	bne.n	80060b6 <_close_r+0x1a>
 80060b0:	682b      	ldr	r3, [r5, #0]
 80060b2:	b103      	cbz	r3, 80060b6 <_close_r+0x1a>
 80060b4:	6023      	str	r3, [r4, #0]
 80060b6:	bd38      	pop	{r3, r4, r5, pc}
 80060b8:	2000ad38 	.word	0x2000ad38

080060bc <__sflush_r>:
 80060bc:	898a      	ldrh	r2, [r1, #12]
 80060be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c2:	4605      	mov	r5, r0
 80060c4:	0710      	lsls	r0, r2, #28
 80060c6:	460c      	mov	r4, r1
 80060c8:	d458      	bmi.n	800617c <__sflush_r+0xc0>
 80060ca:	684b      	ldr	r3, [r1, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	dc05      	bgt.n	80060dc <__sflush_r+0x20>
 80060d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	dc02      	bgt.n	80060dc <__sflush_r+0x20>
 80060d6:	2000      	movs	r0, #0
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060de:	2e00      	cmp	r6, #0
 80060e0:	d0f9      	beq.n	80060d6 <__sflush_r+0x1a>
 80060e2:	2300      	movs	r3, #0
 80060e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80060e8:	682f      	ldr	r7, [r5, #0]
 80060ea:	602b      	str	r3, [r5, #0]
 80060ec:	d032      	beq.n	8006154 <__sflush_r+0x98>
 80060ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	075a      	lsls	r2, r3, #29
 80060f4:	d505      	bpl.n	8006102 <__sflush_r+0x46>
 80060f6:	6863      	ldr	r3, [r4, #4]
 80060f8:	1ac0      	subs	r0, r0, r3
 80060fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060fc:	b10b      	cbz	r3, 8006102 <__sflush_r+0x46>
 80060fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006100:	1ac0      	subs	r0, r0, r3
 8006102:	2300      	movs	r3, #0
 8006104:	4602      	mov	r2, r0
 8006106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006108:	6a21      	ldr	r1, [r4, #32]
 800610a:	4628      	mov	r0, r5
 800610c:	47b0      	blx	r6
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	d106      	bne.n	8006122 <__sflush_r+0x66>
 8006114:	6829      	ldr	r1, [r5, #0]
 8006116:	291d      	cmp	r1, #29
 8006118:	d82c      	bhi.n	8006174 <__sflush_r+0xb8>
 800611a:	4a2a      	ldr	r2, [pc, #168]	; (80061c4 <__sflush_r+0x108>)
 800611c:	40ca      	lsrs	r2, r1
 800611e:	07d6      	lsls	r6, r2, #31
 8006120:	d528      	bpl.n	8006174 <__sflush_r+0xb8>
 8006122:	2200      	movs	r2, #0
 8006124:	6062      	str	r2, [r4, #4]
 8006126:	04d9      	lsls	r1, r3, #19
 8006128:	6922      	ldr	r2, [r4, #16]
 800612a:	6022      	str	r2, [r4, #0]
 800612c:	d504      	bpl.n	8006138 <__sflush_r+0x7c>
 800612e:	1c42      	adds	r2, r0, #1
 8006130:	d101      	bne.n	8006136 <__sflush_r+0x7a>
 8006132:	682b      	ldr	r3, [r5, #0]
 8006134:	b903      	cbnz	r3, 8006138 <__sflush_r+0x7c>
 8006136:	6560      	str	r0, [r4, #84]	; 0x54
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	602f      	str	r7, [r5, #0]
 800613c:	2900      	cmp	r1, #0
 800613e:	d0ca      	beq.n	80060d6 <__sflush_r+0x1a>
 8006140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006144:	4299      	cmp	r1, r3
 8006146:	d002      	beq.n	800614e <__sflush_r+0x92>
 8006148:	4628      	mov	r0, r5
 800614a:	f000 f8fb 	bl	8006344 <_free_r>
 800614e:	2000      	movs	r0, #0
 8006150:	6360      	str	r0, [r4, #52]	; 0x34
 8006152:	e7c1      	b.n	80060d8 <__sflush_r+0x1c>
 8006154:	6a21      	ldr	r1, [r4, #32]
 8006156:	2301      	movs	r3, #1
 8006158:	4628      	mov	r0, r5
 800615a:	47b0      	blx	r6
 800615c:	1c41      	adds	r1, r0, #1
 800615e:	d1c7      	bne.n	80060f0 <__sflush_r+0x34>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0c4      	beq.n	80060f0 <__sflush_r+0x34>
 8006166:	2b1d      	cmp	r3, #29
 8006168:	d001      	beq.n	800616e <__sflush_r+0xb2>
 800616a:	2b16      	cmp	r3, #22
 800616c:	d101      	bne.n	8006172 <__sflush_r+0xb6>
 800616e:	602f      	str	r7, [r5, #0]
 8006170:	e7b1      	b.n	80060d6 <__sflush_r+0x1a>
 8006172:	89a3      	ldrh	r3, [r4, #12]
 8006174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006178:	81a3      	strh	r3, [r4, #12]
 800617a:	e7ad      	b.n	80060d8 <__sflush_r+0x1c>
 800617c:	690f      	ldr	r7, [r1, #16]
 800617e:	2f00      	cmp	r7, #0
 8006180:	d0a9      	beq.n	80060d6 <__sflush_r+0x1a>
 8006182:	0793      	lsls	r3, r2, #30
 8006184:	680e      	ldr	r6, [r1, #0]
 8006186:	bf08      	it	eq
 8006188:	694b      	ldreq	r3, [r1, #20]
 800618a:	600f      	str	r7, [r1, #0]
 800618c:	bf18      	it	ne
 800618e:	2300      	movne	r3, #0
 8006190:	eba6 0807 	sub.w	r8, r6, r7
 8006194:	608b      	str	r3, [r1, #8]
 8006196:	f1b8 0f00 	cmp.w	r8, #0
 800619a:	dd9c      	ble.n	80060d6 <__sflush_r+0x1a>
 800619c:	6a21      	ldr	r1, [r4, #32]
 800619e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80061a0:	4643      	mov	r3, r8
 80061a2:	463a      	mov	r2, r7
 80061a4:	4628      	mov	r0, r5
 80061a6:	47b0      	blx	r6
 80061a8:	2800      	cmp	r0, #0
 80061aa:	dc06      	bgt.n	80061ba <__sflush_r+0xfe>
 80061ac:	89a3      	ldrh	r3, [r4, #12]
 80061ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	e78e      	b.n	80060d8 <__sflush_r+0x1c>
 80061ba:	4407      	add	r7, r0
 80061bc:	eba8 0800 	sub.w	r8, r8, r0
 80061c0:	e7e9      	b.n	8006196 <__sflush_r+0xda>
 80061c2:	bf00      	nop
 80061c4:	20400001 	.word	0x20400001

080061c8 <_fflush_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	b913      	cbnz	r3, 80061d8 <_fflush_r+0x10>
 80061d2:	2500      	movs	r5, #0
 80061d4:	4628      	mov	r0, r5
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	b118      	cbz	r0, 80061e2 <_fflush_r+0x1a>
 80061da:	6983      	ldr	r3, [r0, #24]
 80061dc:	b90b      	cbnz	r3, 80061e2 <_fflush_r+0x1a>
 80061de:	f7ff fa4f 	bl	8005680 <__sinit>
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <_fflush_r+0x6c>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d11b      	bne.n	8006220 <_fflush_r+0x58>
 80061e8:	686c      	ldr	r4, [r5, #4]
 80061ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0ef      	beq.n	80061d2 <_fflush_r+0xa>
 80061f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80061f4:	07d0      	lsls	r0, r2, #31
 80061f6:	d404      	bmi.n	8006202 <_fflush_r+0x3a>
 80061f8:	0599      	lsls	r1, r3, #22
 80061fa:	d402      	bmi.n	8006202 <_fflush_r+0x3a>
 80061fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061fe:	f7ff fadd 	bl	80057bc <__retarget_lock_acquire_recursive>
 8006202:	4628      	mov	r0, r5
 8006204:	4621      	mov	r1, r4
 8006206:	f7ff ff59 	bl	80060bc <__sflush_r>
 800620a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800620c:	07da      	lsls	r2, r3, #31
 800620e:	4605      	mov	r5, r0
 8006210:	d4e0      	bmi.n	80061d4 <_fflush_r+0xc>
 8006212:	89a3      	ldrh	r3, [r4, #12]
 8006214:	059b      	lsls	r3, r3, #22
 8006216:	d4dd      	bmi.n	80061d4 <_fflush_r+0xc>
 8006218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800621a:	f7ff fad0 	bl	80057be <__retarget_lock_release_recursive>
 800621e:	e7d9      	b.n	80061d4 <_fflush_r+0xc>
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <_fflush_r+0x70>)
 8006222:	429c      	cmp	r4, r3
 8006224:	d101      	bne.n	800622a <_fflush_r+0x62>
 8006226:	68ac      	ldr	r4, [r5, #8]
 8006228:	e7df      	b.n	80061ea <_fflush_r+0x22>
 800622a:	4b04      	ldr	r3, [pc, #16]	; (800623c <_fflush_r+0x74>)
 800622c:	429c      	cmp	r4, r3
 800622e:	bf08      	it	eq
 8006230:	68ec      	ldreq	r4, [r5, #12]
 8006232:	e7da      	b.n	80061ea <_fflush_r+0x22>
 8006234:	08006ca4 	.word	0x08006ca4
 8006238:	08006cc4 	.word	0x08006cc4
 800623c:	08006c84 	.word	0x08006c84

08006240 <_lseek_r>:
 8006240:	b538      	push	{r3, r4, r5, lr}
 8006242:	4d07      	ldr	r5, [pc, #28]	; (8006260 <_lseek_r+0x20>)
 8006244:	4604      	mov	r4, r0
 8006246:	4608      	mov	r0, r1
 8006248:	4611      	mov	r1, r2
 800624a:	2200      	movs	r2, #0
 800624c:	602a      	str	r2, [r5, #0]
 800624e:	461a      	mov	r2, r3
 8006250:	f7fb fd84 	bl	8001d5c <_lseek>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_lseek_r+0x1e>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_lseek_r+0x1e>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	2000ad38 	.word	0x2000ad38

08006264 <__swhatbuf_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460e      	mov	r6, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	2900      	cmp	r1, #0
 800626e:	b096      	sub	sp, #88	; 0x58
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	da07      	bge.n	8006286 <__swhatbuf_r+0x22>
 8006276:	2300      	movs	r3, #0
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	89b3      	ldrh	r3, [r6, #12]
 800627c:	061a      	lsls	r2, r3, #24
 800627e:	d410      	bmi.n	80062a2 <__swhatbuf_r+0x3e>
 8006280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006284:	e00e      	b.n	80062a4 <__swhatbuf_r+0x40>
 8006286:	466a      	mov	r2, sp
 8006288:	f000 f8be 	bl	8006408 <_fstat_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	dbf2      	blt.n	8006276 <__swhatbuf_r+0x12>
 8006290:	9a01      	ldr	r2, [sp, #4]
 8006292:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006296:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800629a:	425a      	negs	r2, r3
 800629c:	415a      	adcs	r2, r3
 800629e:	602a      	str	r2, [r5, #0]
 80062a0:	e7ee      	b.n	8006280 <__swhatbuf_r+0x1c>
 80062a2:	2340      	movs	r3, #64	; 0x40
 80062a4:	2000      	movs	r0, #0
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	b016      	add	sp, #88	; 0x58
 80062aa:	bd70      	pop	{r4, r5, r6, pc}

080062ac <__smakebuf_r>:
 80062ac:	898b      	ldrh	r3, [r1, #12]
 80062ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80062b0:	079d      	lsls	r5, r3, #30
 80062b2:	4606      	mov	r6, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	d507      	bpl.n	80062c8 <__smakebuf_r+0x1c>
 80062b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80062bc:	6023      	str	r3, [r4, #0]
 80062be:	6123      	str	r3, [r4, #16]
 80062c0:	2301      	movs	r3, #1
 80062c2:	6163      	str	r3, [r4, #20]
 80062c4:	b002      	add	sp, #8
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	ab01      	add	r3, sp, #4
 80062ca:	466a      	mov	r2, sp
 80062cc:	f7ff ffca 	bl	8006264 <__swhatbuf_r>
 80062d0:	9900      	ldr	r1, [sp, #0]
 80062d2:	4605      	mov	r5, r0
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7ff fa73 	bl	80057c0 <_malloc_r>
 80062da:	b948      	cbnz	r0, 80062f0 <__smakebuf_r+0x44>
 80062dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062e0:	059a      	lsls	r2, r3, #22
 80062e2:	d4ef      	bmi.n	80062c4 <__smakebuf_r+0x18>
 80062e4:	f023 0303 	bic.w	r3, r3, #3
 80062e8:	f043 0302 	orr.w	r3, r3, #2
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	e7e3      	b.n	80062b8 <__smakebuf_r+0xc>
 80062f0:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <__smakebuf_r+0x7c>)
 80062f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	6020      	str	r0, [r4, #0]
 80062f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fc:	81a3      	strh	r3, [r4, #12]
 80062fe:	9b00      	ldr	r3, [sp, #0]
 8006300:	6163      	str	r3, [r4, #20]
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	6120      	str	r0, [r4, #16]
 8006306:	b15b      	cbz	r3, 8006320 <__smakebuf_r+0x74>
 8006308:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800630c:	4630      	mov	r0, r6
 800630e:	f000 f88d 	bl	800642c <_isatty_r>
 8006312:	b128      	cbz	r0, 8006320 <__smakebuf_r+0x74>
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	f043 0301 	orr.w	r3, r3, #1
 800631e:	81a3      	strh	r3, [r4, #12]
 8006320:	89a0      	ldrh	r0, [r4, #12]
 8006322:	4305      	orrs	r5, r0
 8006324:	81a5      	strh	r5, [r4, #12]
 8006326:	e7cd      	b.n	80062c4 <__smakebuf_r+0x18>
 8006328:	08005619 	.word	0x08005619

0800632c <__malloc_lock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_lock+0x8>)
 800632e:	f7ff ba45 	b.w	80057bc <__retarget_lock_acquire_recursive>
 8006332:	bf00      	nop
 8006334:	2000ad30 	.word	0x2000ad30

08006338 <__malloc_unlock>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__malloc_unlock+0x8>)
 800633a:	f7ff ba40 	b.w	80057be <__retarget_lock_release_recursive>
 800633e:	bf00      	nop
 8006340:	2000ad30 	.word	0x2000ad30

08006344 <_free_r>:
 8006344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006346:	2900      	cmp	r1, #0
 8006348:	d048      	beq.n	80063dc <_free_r+0x98>
 800634a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800634e:	9001      	str	r0, [sp, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	f1a1 0404 	sub.w	r4, r1, #4
 8006356:	bfb8      	it	lt
 8006358:	18e4      	addlt	r4, r4, r3
 800635a:	f7ff ffe7 	bl	800632c <__malloc_lock>
 800635e:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <_free_r+0x9c>)
 8006360:	9801      	ldr	r0, [sp, #4]
 8006362:	6813      	ldr	r3, [r2, #0]
 8006364:	4615      	mov	r5, r2
 8006366:	b933      	cbnz	r3, 8006376 <_free_r+0x32>
 8006368:	6063      	str	r3, [r4, #4]
 800636a:	6014      	str	r4, [r2, #0]
 800636c:	b003      	add	sp, #12
 800636e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006372:	f7ff bfe1 	b.w	8006338 <__malloc_unlock>
 8006376:	42a3      	cmp	r3, r4
 8006378:	d90b      	bls.n	8006392 <_free_r+0x4e>
 800637a:	6821      	ldr	r1, [r4, #0]
 800637c:	1862      	adds	r2, r4, r1
 800637e:	4293      	cmp	r3, r2
 8006380:	bf04      	itt	eq
 8006382:	681a      	ldreq	r2, [r3, #0]
 8006384:	685b      	ldreq	r3, [r3, #4]
 8006386:	6063      	str	r3, [r4, #4]
 8006388:	bf04      	itt	eq
 800638a:	1852      	addeq	r2, r2, r1
 800638c:	6022      	streq	r2, [r4, #0]
 800638e:	602c      	str	r4, [r5, #0]
 8006390:	e7ec      	b.n	800636c <_free_r+0x28>
 8006392:	461a      	mov	r2, r3
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	b10b      	cbz	r3, 800639c <_free_r+0x58>
 8006398:	42a3      	cmp	r3, r4
 800639a:	d9fa      	bls.n	8006392 <_free_r+0x4e>
 800639c:	6811      	ldr	r1, [r2, #0]
 800639e:	1855      	adds	r5, r2, r1
 80063a0:	42a5      	cmp	r5, r4
 80063a2:	d10b      	bne.n	80063bc <_free_r+0x78>
 80063a4:	6824      	ldr	r4, [r4, #0]
 80063a6:	4421      	add	r1, r4
 80063a8:	1854      	adds	r4, r2, r1
 80063aa:	42a3      	cmp	r3, r4
 80063ac:	6011      	str	r1, [r2, #0]
 80063ae:	d1dd      	bne.n	800636c <_free_r+0x28>
 80063b0:	681c      	ldr	r4, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	6053      	str	r3, [r2, #4]
 80063b6:	4421      	add	r1, r4
 80063b8:	6011      	str	r1, [r2, #0]
 80063ba:	e7d7      	b.n	800636c <_free_r+0x28>
 80063bc:	d902      	bls.n	80063c4 <_free_r+0x80>
 80063be:	230c      	movs	r3, #12
 80063c0:	6003      	str	r3, [r0, #0]
 80063c2:	e7d3      	b.n	800636c <_free_r+0x28>
 80063c4:	6825      	ldr	r5, [r4, #0]
 80063c6:	1961      	adds	r1, r4, r5
 80063c8:	428b      	cmp	r3, r1
 80063ca:	bf04      	itt	eq
 80063cc:	6819      	ldreq	r1, [r3, #0]
 80063ce:	685b      	ldreq	r3, [r3, #4]
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	bf04      	itt	eq
 80063d4:	1949      	addeq	r1, r1, r5
 80063d6:	6021      	streq	r1, [r4, #0]
 80063d8:	6054      	str	r4, [r2, #4]
 80063da:	e7c7      	b.n	800636c <_free_r+0x28>
 80063dc:	b003      	add	sp, #12
 80063de:	bd30      	pop	{r4, r5, pc}
 80063e0:	20000aac 	.word	0x20000aac

080063e4 <_read_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d07      	ldr	r5, [pc, #28]	; (8006404 <_read_r+0x20>)
 80063e8:	4604      	mov	r4, r0
 80063ea:	4608      	mov	r0, r1
 80063ec:	4611      	mov	r1, r2
 80063ee:	2200      	movs	r2, #0
 80063f0:	602a      	str	r2, [r5, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7fb fc52 	bl	8001c9c <_read>
 80063f8:	1c43      	adds	r3, r0, #1
 80063fa:	d102      	bne.n	8006402 <_read_r+0x1e>
 80063fc:	682b      	ldr	r3, [r5, #0]
 80063fe:	b103      	cbz	r3, 8006402 <_read_r+0x1e>
 8006400:	6023      	str	r3, [r4, #0]
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	2000ad38 	.word	0x2000ad38

08006408 <_fstat_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	4d07      	ldr	r5, [pc, #28]	; (8006428 <_fstat_r+0x20>)
 800640c:	2300      	movs	r3, #0
 800640e:	4604      	mov	r4, r0
 8006410:	4608      	mov	r0, r1
 8006412:	4611      	mov	r1, r2
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	f7fb fc86 	bl	8001d26 <_fstat>
 800641a:	1c43      	adds	r3, r0, #1
 800641c:	d102      	bne.n	8006424 <_fstat_r+0x1c>
 800641e:	682b      	ldr	r3, [r5, #0]
 8006420:	b103      	cbz	r3, 8006424 <_fstat_r+0x1c>
 8006422:	6023      	str	r3, [r4, #0]
 8006424:	bd38      	pop	{r3, r4, r5, pc}
 8006426:	bf00      	nop
 8006428:	2000ad38 	.word	0x2000ad38

0800642c <_isatty_r>:
 800642c:	b538      	push	{r3, r4, r5, lr}
 800642e:	4d06      	ldr	r5, [pc, #24]	; (8006448 <_isatty_r+0x1c>)
 8006430:	2300      	movs	r3, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	602b      	str	r3, [r5, #0]
 8006438:	f7fb fc85 	bl	8001d46 <_isatty>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d102      	bne.n	8006446 <_isatty_r+0x1a>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	b103      	cbz	r3, 8006446 <_isatty_r+0x1a>
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	bd38      	pop	{r3, r4, r5, pc}
 8006448:	2000ad38 	.word	0x2000ad38

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
